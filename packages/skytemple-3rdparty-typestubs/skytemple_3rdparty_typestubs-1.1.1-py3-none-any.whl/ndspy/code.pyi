from . import codeCompression as codeCompression
from typing import Any, List, Callable


class MainCodeFile:
    class Section:
        implicit: bool
        data: Any
        ramAddress: Any
        bssSize: Any
        def __init__(self, data, ramAddress, bssSize, *, implicit: bool = ...) -> None: ...
    sections: Any
    ramAddress: int
    codeSettingsOffs: int
    def __init__(self, data, ramAddress, codeSettingsPointerAddress: Any | None = ...) -> None: ...
    @classmethod
    def fromCompressed(cls, data, *args): ...
    @classmethod
    def fromSections(cls, sections, ramAddress): ...
    @classmethod
    def fromFile(cls, filePath, ramAddress): ...
    def save(self, *, compress: bool = ...): ...
    def saveToFile(self, filePath, *, compress: bool = ...) -> None: ...

class Overlay:
    data: bytes
    ramAddress: int
    ramSize: int
    bssSize: int
    staticInitStart: int
    staticInitEnd: int
    fileID: int
    compressedSize: int
    flags: int
    unkAddress: int
    def __init__(self, data, ramAddress, ramSize, bssSize, staticInitStart, staticInitEnd, fileID, compressedSize, flags) -> None: ...
    @property
    def compressed(self): ...
    @compressed.setter
    def compressed(self, value) -> None: ...
    @property
    def verifyHash(self): ...
    @verifyHash.setter
    def verifyHash(self, value) -> None: ...
    def save(self, *, compress: bool = ...): ...

def loadOverlayTable(tableData: bytes, fileCallback: Callable[[int, int], bytes], idsToLoad: List[int] = None) -> List[Overlay]: ...
def saveOverlayTable(table: List[Overlay]) -> bytes: ...
