[tool.poetry]
name = "cloud-api-signer"
version = "0.4.0"
description = ""
authors = ["Huang Shaoyan <huangshaoyan1982@gmail.com>"]

[[tool.poetry.source]]
name = "aliyun"
url = "https://mirrors.aliyun.com/pypi/simple/"
priority = "primary"

[tool.poetry.dependencies]
python = "^3.8.19"
pydantic = ">=2"

[tool.poetry.group.dev.dependencies]
mypy = "1.10.0"
pytest = "8.2.1"
pytest-cov = "5.0.0"
pytest-icdiff = "0.9"
pytest-mock = "3.14.0"
ruff = "0.4.7"

[tool.ruff]
target-version = "py38"
line-length = 120
lint.select = [
    "F",   # Pyflakes
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "C90", # mccabe
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "TID", # flake8-tidy-imports
    "RET", # flake8-return
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.isort]
# 命令行下，ruff 可以正确识别出哪些代码是项目文件
# vscode 扩展没有正确识别，因此将目录和文件配置为 known-first-party
known-first-party = ["cloud_api_signer"]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.8"
platform = "linux"

plugins = ["pydantic.mypy"]

# 已经确认必须设置为 True 的选项
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
check_untyped_defs = true
disallow_any_generics = true

# ==== 以下配置，在条件成熟时，需要被打开 ====
# do not follow imports (except for ones found in typeshed)
follow_imports = "skip"
# suppress errors about unsatisfied imports
ignore_missing_imports = true
# allow untyped calls as a consequence of the options above
disallow_untyped_calls = false
# allow returning Any as a consequence of the options above
warn_return_any = false
# The following are off by default since they're too noisy.
# Flip them on if you feel adventurous.
disallow_untyped_defs = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
addopts = "-v --cov --cov-report html --cov-report xml"
filterwarnings = ["error"]

[tool.coverage.run]
source = ["cloud_api_signer"]
omit = ["**/test_*.py"]
branch = true
data_file = ".coverage/.coverage"

[tool.coverage.report]
fail_under = 100
precision = 2

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
