help:
- https://stackoverflow.com/questions/51666621/pytest-help-does-not-run-when-using-pytest-configure-in-conftest-py
- https://stackoverflow.com/questions/50817905/pytest-dynamically-parametrized-test
- https://docs.pytest.org/en/7.1.x/how-to/usage.html
- https://stackoverflow.com/questions/49824248/allow-argparse-nargs-to-accept-comma-separated-input-with-choices


todos:
- TODO: complete test for add_args_and_ini_options_to_parser
- TODO: complete test for get_options_or_inis
- TODO: complete test for pytest_configure
- TODO: make sure globally defined configs are pulled into app


exclude_methods:
- pytest_runtest_logreport
- pytest_addoption
# - pytest_configure


resources:
- &RESOURCE
  resource: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/plugin/resources/app.py
- &CHECKS
  resource: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/checks/app.py


tests:
- function: get_options
  description: Returns a dictionary containing option names and values
  tests:
  - arguments:
      options:
        option_0: value_0
        option_1: value_1
        option_2: value_2
      option_names:
      - option_0
      - option_2
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
        option_0: value_0
        option_2: value_2
- function: process_option_exclude_files
  description: Process the `exclude-files` option as a list of strings
  tests:
  - description: Undefined arguments
    arguments:
      option: null
      config: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: []
  - description: Option is a string
    arguments:
      option: option
      config: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
      - option
  - description: Option is a list
    arguments:
      option:
      - option_0
      - option_1
      config: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
      - option_0
      - option_1
- function: process_option_project_path
  description: Returns the root directory for the project
  cast_arguments:
  - method: process_option_project_path_resource
    << : *RESOURCE
  tests:
  - description: Option and config are null
    arguments:
      option: null
      config: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: YAML_TESTING_FRAMEWORK_ROOT_DIR
  - description: Option is a single dot representing root directory
    arguments:
      option: .
      config: config
    checks:
    - method: check_equals
      << : *CHECKS
      expected: YAML_TESTING_FRAMEWORK_ROOT_DIR
  - description: Option is path to directory within the root directory
    arguments:
      option: ./path_to_directory
      config: config
    checks:
    - method: check_equals
      << : *CHECKS
      expected: /path_to_directory
  - description: Option is path to directory in root directory
    arguments:
      option: root_directory/sub_directory
      config: config
    checks:
    - method: check_equals
      << : *CHECKS
      expected: root_directory/sub_directory
- function: get_pytest_parser
  description: Returns the parser from pytest for adding configuration options
  cast_output:
  - method: __builtins__.str
    << : *RESOURCE
    unpack: false
  tests:
  - description: Non-null instance of pytest
    cast_arguments:
    - field: pytest_instance
      method: pytest_resource
      << : *RESOURCE
      unpack: false
    arguments:
      pytest_instance: pytest_instance
    checks:
    - method: check_equals
      << : *CHECKS
      expected:  <class '_pytest.config.argparsing.Parser'>
  - description: Null instance of pytest
    arguments:
      pytest_instance: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected:  <class '_pytest.config.argparsing.Parser'>
- function: get_pytest_instance
  description: Returns an instance of the pytest module
  tests:
  - arguments: {}
    checks:
    - method: check_equals
      << : *CHECKS
      field: __name__
      expected: pytest
    - method: check_type
      << : *CHECKS
      expected: module
- function: add_args_and_ini_options_to_parser
  description: >
    Add data cli arguments and ini settings
    options to the pytest parser
  cast_arguments:
  - field: parser
    method: pytest_parser_resource
    << : *RESOURCE
  tests:
  - arguments:
      parser: parser
    checks:
    - method: check_class
      << : *CHECKS
      expected:
        name: Parser
        fields:
          _ininames:
          - project-path
          - exclude-methods
          - include-methods
          - exclude-files
          - include-files
          - yaml-suffix
          - logging-flag
          - setup
    - method: check_length
      << : *CHECKS
      field: _anonymous.options
      expected: 8
- function: pass_through
  description: Returns the data passed into the function
  tests:
  - description: Option is undefined
    arguments:
      option: null
      config: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: null
  - description: Option is defined
    arguments:
      option: option
      config: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: option
# - function: pytest_configure
#   description: >
#     Retrieves the values of ini and CLI arguments
#     and calls the app to collect and run tests
#   cast_arguments:
#   - field: config
#     << : *RESOURCE
#     method: pytest_configure_resource
#   tests:
#   - arguments:
#       config: config
#     checks:
#     - method: check_equals
#       expected: null
- function: set_node_ids
  description: Sets node ids that are displayed in pytest report summaries
  cast_arguments:
  - method: set_node_ids_resource
    field: item
    << : *RESOURCE
  tests:
  - description: Item is undefined
    arguments:
      item: null
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        _nodeid: None
  - arguments:
      item: short_id_a
    checks:
    - method: check_equals
      << : *CHECKS
      field: _nodeid
      expected: short_id_a
  - arguments:
      item: short_id_b
    checks:
    - method: check_equals
      << : *CHECKS
      field: _nodeid
      expected: short_id_b
- function: format_report_nodeid
  description: >
    Format the nodeid displayed in pytest
    report summaries
  tests:
  - arguments:
      nodeid: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: None
  - arguments:
      nodeid: ::test_[nodeid
    checks:
    - method: check_equals
      << : *CHECKS
      expected: nodeid
  - arguments:
      nodeid: nodeid <- test_entrypoint.py
    checks:
    - method: check_equals
      << : *CHECKS
      expected: nodeid
- function: pytest_itemcollected
  description: Handles the collection of pytest test items
  patches:
  - route: set_node_ids
    value: {}
    method: callable
  spies:
  - set_node_ids
  tests:
  - description: Undefined arguments
    arguments:
      item: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: null
    - method: check_spies
      << : *CHECKS
      expected:
        set_node_ids:
          called: True
          called_with:
            item: null