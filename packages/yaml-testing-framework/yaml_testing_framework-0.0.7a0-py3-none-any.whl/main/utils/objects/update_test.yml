resources:
- &CHECKS
  resource: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/checks/app.py
- &RESOURCE
  resource: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/objects/resource.py


tests:
- function: main
  description: >
    Set the value of child objects in their parents following the path of a
    dot-delimited route from bottom to top
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected: null
  - description: Route is an empty string
    arguments:
      parent: parent
      value: null
      route: ''
    checks:
    - method: check_equals
      << : *CHECKS
      expected: parent
  - description: Route to a value in a dict
    arguments:
      parent:
        key: value
      value: new_value
      route: key
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
        key: new_value
  - description: Route to a non-existing value in a nested dick
    arguments:
      parent:
        key:
          key_a: value_a
      value: value_b
      route: key.key_b
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
        key:
          key_a: value_a
          key_b: value_b
  - description: Parent is undefined. Value and route are defined.
    arguments:
      parent: null
      value: value
      route: field
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        field: value
- function: get_route_values
  description: >
    Returns a list of simple name space objects containing the name and value of
    child objects along a dot-delimited route
  cast_output:
  - method: list_sns_to_list_dict
    << : *RESOURCE
    field: objects
  tests:
  - description: Undefined arguments
    arguments:
      parent: null
      route: null
      value: null
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        route: null
        objects:
        - name: root
          value: null
  - description: Route is empty string
    arguments:
      parent: parent
      route: ''
      value: value
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        route: ''
        objects:
        - name: root
          value: parent
  - description: Route is path to nested dict value
    arguments:
      parent:
        key_a:
          key_b: value_b
      route: key_a.key_b
      value: value
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        route:
        - key_a
        - key_b
        objects:
        - name: root
          value:
            key_a:
              key_b: value_b
        - name: key_a
          value:
            key_b: value_b
        - name: key_b
          value: value
  - description: Route contains non-existing fields
    arguments:
      parent:
        field_a: {}
      route: field_a.field_b.field_c
      value: value
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        route:
        - field_a
        - field_b
        - field_c
        objects:
        - name: root
          value:
            field_a: {}
        - name: field_a
          value: {}
        - name: field_b
          value: {}
        - name: field_c
          value: value
- function: get_slice_start_and_end_indices
  description: >
    Returns the start and end indices for slice of an Iterable object from
    a pipe delimited string representing the indices; start|end
  tests:
  - description: Start and end indices are undefined
    arguments:
      name: null
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        start: null
        end: null
  - description: Start and end indices are the same integer
    arguments:
      name: 0|0
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        start: 0
        end: 0
  - description: Start and end indices are different integers
    arguments:
      name: 0|4
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        start: 0
        end: 4
  - description: Start index is an integer and end index is undefined
    arguments:
      name: 0
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        start: 0
        end: null
  - description: Start index is undefined and end index is an integer
    arguments:
      name: '|5'
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        start: null
        end: 5
- function: replace_slice_with_value
  description: >
    Returns an Iterable object with a slice, represented as a pipe delimited
    string, of the object replaced with specified values.
  cast_arguments:
  - method: sns
    field: indices
    unpack: true
  tests:
  - description: Undefined arguments
    arguments:
      parent_value: null
      child_value: null
      indices: null
    checks:
    - method: check_error
      << : *CHECKS
      expected: AttributeError
  - description: Replace value at single index of parent value
    arguments:
      parent_value:
      - a
      - b
      - c
      child_value: A
      indices:
        start: 0
        end: 0
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
      - A
      - b
      - c
  - description: Replace the full parent value
    arguments:
      parent_value:
      - a
      - b
      - c
      child_value:
      - A
      - B
      - C
      indices:
        start: null
        end: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
      - A
      - B
      - C
  - description: Replace a slice in middle of the parent value
    arguments:
      parent_value:
      - a
      - b
      - c
      - d
      child_value:
      - A
      - B
      - C
      indices:
        start: 1
        end: 3
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
      - a
      - A
      - B
      - C
      - d
  - description: Replace a slice at beginning of the parent value
    arguments:
      parent_value:
      - a
      - b
      - c
      - d
      child_value:
      - 1
      - 2
      - 3
      indices:
        start: 2
        end: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
      - 1
      - 2
      - 3
      - c
      - d
  - description: Replace a slice at ending of the parent value
    arguments:
      parent_value:
      - a
      - b
      - c
      - d
      child_value:
      - 1
      - 2
      - 3
      indices:
        start: null
        end: 3
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
      - a
      - b
      - c
      - 1
      - 2
      - 3
- function: set_child_in_parent
  cast_arguments:
  - method: set_child_in_parent_cast_arguments
    << : *RESOURCE
  description: Sets the value of a a child object inside of a parent object
  tests:
  - description: Child are parent is undefined
    arguments: {}
    checks:
    - method: check_error
      << : *CHECKS
      expected: AttributeError
  - description: Set child when parent is dict
    arguments:
      parent:
        value: {}
      child:
        value: value
        name: key
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        name: null
        value:
          key: value
  - description: Set child when parent is none
    arguments:
      parent:
        value: null
      child:
        value: value
        name: name
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        name: null
    - method: check_sns
      << : *CHECKS
      field: value
      expected:
        name: value
  - description: Set child when parent is a simple name space
    cast_arguments:
    - field: parent.value
      method: sns
      unpack: true
      << : *RESOURCE
    arguments:
      parent:
        value:
          field_a: value_a
      child:
        value: value_b
        name: field_b
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        name: null
    - method: check_sns
      << : *CHECKS
      field: value
      expected:
        field_a: value_a
        field_b: value_b
- function: reset_route_values
  description: >
    Sets child values inside of parents along the route to the child from top
    to bottom
  cast_arguments:
  - field: objects
    method: list_dict_to_list_sns
    << : *RESOURCE
  tests:
  - description: Undefined arguments
    arguments:
      objects: null
    checks:
    - method: check_error
      << : *CHECKS
      expected: TypeError
  - description: Set child value in a nested dictionary
    arguments:
      objects:
      - name: root
        value:
          key_a:
            key_0 : value_0
      - name: key_a
        value:
          key_0 : value_0
      - name: key_0
        value: value_0
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
        key_a:
          key_0 : value_0
  # # TODO: Fix test to work with iterables
  # - description: Set child value in a simple name space
  #   cast_arguments:
  #   - method: reset_route_values_cast_arguments
  #     << : *RESOURCE
  #     field: objects.0|1
  #   arguments:
  #     objects:
  #     - name: root
  #       value:
  #         field: value
  #     - name: field
  #       value: set_value
  #   checks:
  #   - method: check_equals
  #     << : *CHECKS
  #     expected:
  #       field: set_value
