todos:
- TODO: each run should be a separate log file -> timestamp.count.exception or timestamp as the folder
- TODO: Add log level -> system.normal, system.warning, system.exception. For testing user defined function or user.
- TODO: expose set_default and other functions for dumping/loading json


help:
- https://stackoverflow.com/questions/11232230/logging-to-two-files-with-different-settings


resources:
- &RESOURCE
  resource: &RESOURCE_PATH ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/app.py
- &CHECKS
  resource: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/checks/app.py
- &LOG_DIR
  ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/data


tests:
- function: main
  description: Handles logging and outputting to the terminal
  tests:
  - description: Logging is not enabled
    arguments:
      enabled: false
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  - description: Logger has not been created
    patch:
    - method: value
      value: null
      route: LOGGER
    arguments:
      enabled: true
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  - description: Log info
    arguments:
      level: info
      message: message
      debug: True
      enabled: True
      standard_output: true
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  - description: Only logging enabled
    arguments:
      data_:
        a: a
        b: b
      format_: yaml
      level: info
      location: null
      timestamp: timestamp
      standard_output: False
      enabled: True
      log_dir: *LOG_DIR
  - description: Logging and standard output are disabled
    arguments:
      data_:
        a: a
        b: b
      format_: yaml
      level: info
      location: null
      timestamp: timestamp
      standard_output: False
      enabled: False
      log_dir: *LOG_DIR
  - description: Only standard output is enabled
    arguments:
      data_:
        a: a
        b: b
      format_: yaml
      level: info
      location: null
      timestamp: timestamp
      standard_output: True
      enabled: False
      log_dir: *LOG_DIR
- function: get_location_route
  description: >
    Returns the dot delimited route to the method from the root directory of
    a project
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected: ..
  - description: Name of method and location of module method is in
    arguments:
      location: location
      method: method
    checks:
    - method: check_equals
      << : *CHECKS
      expected: location.method
- function: format_error
  description: >
    Returns a dictionary containing the name, description and traceback for
    an exception
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - << : *CHECKS
      method: check_equals
      expected: null
  - description: Error is not an exception
    arguments:
      error: error
    checks:
    - << : *CHECKS
      method: check_equals
      expected: error
  - description: Error is an exception
    cast_arguments:
    - method: get_error
      << : *RESOURCE
      field: error
    arguments:
      error: runtime_error
    checks:
    - << : *CHECKS
      method: check_equals
      expected:
        description: runtime_error
        name: RuntimeError
        trace: []
- function: get_log
  description: >
    Returns a dictionary containing defined, specified fields from the
    `locals_` arguments
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
        info: {}
  - description: Defined arguments
    arguments:
      locals_:
        message: message
        arguments: arguments
        error: error
        output: output
        timestamps: timestamps
        location: location
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
        info:
          message: message
          arguments: arguments
          error: error
          output: output
          timestamps: timestamps
          location: location
  - description: Defined arguments
    arguments:
      locals_:
        level: level
        a: a
        message: message
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
        level:
          message: message
- function: format_as_json
  description: Converts data to JSON
  tests:
  - arguments:
      log: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{}'
  - arguments:
      log:
        key: value
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{"key": "value"}'
  - arguments:
      log:
        a: a
        b: b
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{"a": "a", "b": "b"}'
- function: format_as_yaml
  description: Convert data to YAML
  tests:
  - description: Empty dictionary
    arguments:
      log: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{}

          '
  - description: Dictionary with keys and values
    arguments:
      log:
        a: a
        b: b
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 'a: a

          b: b

          '
- function: format_log
  description: Handles formatting log as json or yaml
  tests:
  - description: Undefined arguments
    arguments:
      format: null
      log: null
    checks:
    - << : *CHECKS
      method: check_equals
      expected: "null\n..."
  - description: Format as YAML
    arguments:
      format: yaml
      log:
        message: message
    checks:
    - << : *CHECKS
      method: check_equals
      expected: "message: message\n"
  - description: Format as JSON
    arguments:
      format: json
      log:
        message: message
    checks:
    - << : *CHECKS
      method: check_equals
      expected: '{"message": "message"}'
  - description: Format as YAML
    arguments:
      format: yaml
      log:
        message: message
    checks:
    - << : *CHECKS
      method: check_equals
      expected: "message: message\n"
- function: write_to_log
  description: >
    Calls the method to write to log file if the method exists, otherwise
    does nothing
  tests:
  - description: Undefined arguments
    arguments:
      level: null
      log: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 1
  - description: Data is non-empty
    arguments:
      level: level
      log: log
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 1
- function: write_to_cli
  description: Prints log in terminal and returns 1, otherwise returns 0
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - << : *CHECKS
      method: check_equals
      expected: 0
  - description: Standard output is true
    arguments:
      standard_output: true
    checks:
    - << : *CHECKS
      method: check_equals
      expected: 1
  - description: Level is an error
    arguments:
      level: error
    checks:
    - << : *CHECKS
      method: check_equals
      expected: 1
  - description: Error is not None
    arguments:
      error: error
    checks:
    - << : *CHECKS
      method: check_equals
      expected: 1
  - description: Debug is true
    arguments:
      debug: true
    checks:
    - << : *CHECKS
      method: check_equals
      expected: 1
- function: handle_log
  description: Handles writing a log to a file or the terminal
  tests:
  - description: >
      Undefined arguments. Will always write log to file or return `1`
    arguments: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 1
  - description: Write log to file. Returns 1
    arguments:
      standard_output: false
      debug: false
      level: level
      log: log
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 1
  - description: Write log to file and the terminal. Returns 2
    arguments:
      standard_output: True
      debug: debug
      level: level
      log: log
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 2
- function: get_timestamp
  description: Returns a timestamp that is seconds since epoch
  tests:
  - arguments: {}
    checks:
    - method: check_type
      << : *CHECKS
      expected: float
- function: get_log_file_location
  description: Creates a log file and returns its location
  tests:
  - description: Log directory environment variable is not set
    patches:
    - route: CONFIG.environment.LOG_DIR
      method: value
      value: null
    arguments:
      project_path: root/project
    checks:
    - method: check_equals
      << : *CHECKS
      expected: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/.logs/root.project.log
  - description: Log directory environment variable is set
    patches:
    - route: CONFIG.environment.LOG_DIR
      method: value
      value: .logs
    arguments:
      project_path: .root
    checks:
    - method: check_equals
      << : *CHECKS
      expected: .logs/.root.log
- function: get_logger
  description: Returns an instance of a Logger tied to the location of a log file
  tests:
  # - description: Location is undefined
  #   arguments:
  #     location: null
  #   checks:
  #   - method: check_error
  #     << : *CHECKS
  #     expected: TypeError
  - description: Location is defined
    arguments:
      location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/data/log_file.log
    checks:
    - method: check_type
      << : *CHECKS
      expected: Logger
    - method: check_equals
      << : *CHECKS
      field: name
      expected: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/data/log_file.log
- function: create_logger
  description: >
    Creates the directory to store logs for each run of the app. The
    format of the directory's path is in this format: directory/.logs/timestamp
  tests:
  - description: Undefined arguments
    arguments:
      logging_flag: null
      project_path: null
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        status: 0
  - description: Logging is not enabled
    arguments:
      logging_flag: False
      project_path: null
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        status: 0
  - description: Logging is enabled
    arguments:
      logging_flag: true
      project_path: project_path
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        status: 1
