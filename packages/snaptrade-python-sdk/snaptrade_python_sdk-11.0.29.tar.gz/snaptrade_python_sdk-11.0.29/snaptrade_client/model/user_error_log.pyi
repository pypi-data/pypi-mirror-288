# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class UserErrorLog(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An API error log for a specific SnapTrade user.
    """


    class MetaOapg:
        
        class properties:
            requestedAt = schemas.StrSchema
            response = schemas.StrSchema
            statusCode = schemas.NumberSchema
            queryParams = schemas.StrSchema
            httpMethod = schemas.StrSchema
            endpoint = schemas.StrSchema
            __annotations__ = {
                "requestedAt": requestedAt,
                "response": response,
                "statusCode": statusCode,
                "queryParams": queryParams,
                "httpMethod": httpMethod,
                "endpoint": endpoint,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestedAt"]) -> MetaOapg.properties.requestedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["response"]) -> MetaOapg.properties.response: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusCode"]) -> MetaOapg.properties.statusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queryParams"]) -> MetaOapg.properties.queryParams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["httpMethod"]) -> MetaOapg.properties.httpMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpoint"]) -> MetaOapg.properties.endpoint: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["requestedAt"], typing_extensions.Literal["response"], typing_extensions.Literal["statusCode"], typing_extensions.Literal["queryParams"], typing_extensions.Literal["httpMethod"], typing_extensions.Literal["endpoint"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestedAt"]) -> typing.Union[MetaOapg.properties.requestedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["response"]) -> typing.Union[MetaOapg.properties.response, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusCode"]) -> typing.Union[MetaOapg.properties.statusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queryParams"]) -> typing.Union[MetaOapg.properties.queryParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["httpMethod"]) -> typing.Union[MetaOapg.properties.httpMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpoint"]) -> typing.Union[MetaOapg.properties.endpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requestedAt"], typing_extensions.Literal["response"], typing_extensions.Literal["statusCode"], typing_extensions.Literal["queryParams"], typing_extensions.Literal["httpMethod"], typing_extensions.Literal["endpoint"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        requestedAt: typing.Union[MetaOapg.properties.requestedAt, str, schemas.Unset] = schemas.unset,
        response: typing.Union[MetaOapg.properties.response, str, schemas.Unset] = schemas.unset,
        statusCode: typing.Union[MetaOapg.properties.statusCode, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        queryParams: typing.Union[MetaOapg.properties.queryParams, str, schemas.Unset] = schemas.unset,
        httpMethod: typing.Union[MetaOapg.properties.httpMethod, str, schemas.Unset] = schemas.unset,
        endpoint: typing.Union[MetaOapg.properties.endpoint, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'UserErrorLog':
        return super().__new__(
            cls,
            *args,
            requestedAt=requestedAt,
            response=response,
            statusCode=statusCode,
            queryParams=queryParams,
            httpMethod=httpMethod,
            endpoint=endpoint,
            _configuration=_configuration,
            **kwargs,
        )
