# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _amplpy_copt_swig
else:
    import _amplpy_copt_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class dblArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _amplpy_copt_swig.dblArray_swiginit(self, _amplpy_copt_swig.new_dblArray(nelements))
    __swig_destroy__ = _amplpy_copt_swig.delete_dblArray

    def __getitem__(self, index):
        return _amplpy_copt_swig.dblArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpy_copt_swig.dblArray___setitem__(self, index, value)

    def cast(self):
        return _amplpy_copt_swig.dblArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _amplpy_copt_swig.dblArray_frompointer(t)

# Register dblArray in _amplpy_copt_swig:
_amplpy_copt_swig.dblArray_swigregister(dblArray)
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _amplpy_copt_swig.intArray_swiginit(self, _amplpy_copt_swig.new_intArray(nelements))
    __swig_destroy__ = _amplpy_copt_swig.delete_intArray

    def __getitem__(self, index):
        return _amplpy_copt_swig.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpy_copt_swig.intArray___setitem__(self, index, value)

    def cast(self):
        return _amplpy_copt_swig.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _amplpy_copt_swig.intArray_frompointer(t)

# Register intArray in _amplpy_copt_swig:
_amplpy_copt_swig.intArray_swigregister(intArray)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpy_copt_swig.delete_SwigPyIterator

    def value(self):
        return _amplpy_copt_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _amplpy_copt_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _amplpy_copt_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _amplpy_copt_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _amplpy_copt_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _amplpy_copt_swig.SwigPyIterator_copy(self)

    def next(self):
        return _amplpy_copt_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _amplpy_copt_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _amplpy_copt_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _amplpy_copt_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _amplpy_copt_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _amplpy_copt_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _amplpy_copt_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _amplpy_copt_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _amplpy_copt_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _amplpy_copt_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _amplpy_copt_swig:
_amplpy_copt_swig.SwigPyIterator_swigregister(SwigPyIterator)
class map_string_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_copt_swig.map_string_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_copt_swig.map_string_int___nonzero__(self)

    def __bool__(self):
        return _amplpy_copt_swig.map_string_int___bool__(self)

    def __len__(self):
        return _amplpy_copt_swig.map_string_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_copt_swig.map_string_int___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_copt_swig.map_string_int___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_copt_swig.map_string_int_has_key(self, key)

    def keys(self):
        return _amplpy_copt_swig.map_string_int_keys(self)

    def values(self):
        return _amplpy_copt_swig.map_string_int_values(self)

    def items(self):
        return _amplpy_copt_swig.map_string_int_items(self)

    def __contains__(self, key):
        return _amplpy_copt_swig.map_string_int___contains__(self, key)

    def key_iterator(self):
        return _amplpy_copt_swig.map_string_int_key_iterator(self)

    def value_iterator(self):
        return _amplpy_copt_swig.map_string_int_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_copt_swig.map_string_int___setitem__(self, *args)

    def asdict(self):
        return _amplpy_copt_swig.map_string_int_asdict(self)

    def __init__(self, *args):
        _amplpy_copt_swig.map_string_int_swiginit(self, _amplpy_copt_swig.new_map_string_int(*args))

    def empty(self):
        return _amplpy_copt_swig.map_string_int_empty(self)

    def size(self):
        return _amplpy_copt_swig.map_string_int_size(self)

    def swap(self, v):
        return _amplpy_copt_swig.map_string_int_swap(self, v)

    def begin(self):
        return _amplpy_copt_swig.map_string_int_begin(self)

    def end(self):
        return _amplpy_copt_swig.map_string_int_end(self)

    def rbegin(self):
        return _amplpy_copt_swig.map_string_int_rbegin(self)

    def rend(self):
        return _amplpy_copt_swig.map_string_int_rend(self)

    def clear(self):
        return _amplpy_copt_swig.map_string_int_clear(self)

    def get_allocator(self):
        return _amplpy_copt_swig.map_string_int_get_allocator(self)

    def count(self, x):
        return _amplpy_copt_swig.map_string_int_count(self, x)

    def erase(self, *args):
        return _amplpy_copt_swig.map_string_int_erase(self, *args)

    def find(self, x):
        return _amplpy_copt_swig.map_string_int_find(self, x)

    def lower_bound(self, x):
        return _amplpy_copt_swig.map_string_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_copt_swig.map_string_int_upper_bound(self, x)
    __swig_destroy__ = _amplpy_copt_swig.delete_map_string_int

# Register map_string_int in _amplpy_copt_swig:
_amplpy_copt_swig.map_string_int_swigregister(map_string_int)
class map_int_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_copt_swig.map_int_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_copt_swig.map_int_string___nonzero__(self)

    def __bool__(self):
        return _amplpy_copt_swig.map_int_string___bool__(self)

    def __len__(self):
        return _amplpy_copt_swig.map_int_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_copt_swig.map_int_string___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_copt_swig.map_int_string___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_copt_swig.map_int_string_has_key(self, key)

    def keys(self):
        return _amplpy_copt_swig.map_int_string_keys(self)

    def values(self):
        return _amplpy_copt_swig.map_int_string_values(self)

    def items(self):
        return _amplpy_copt_swig.map_int_string_items(self)

    def __contains__(self, key):
        return _amplpy_copt_swig.map_int_string___contains__(self, key)

    def key_iterator(self):
        return _amplpy_copt_swig.map_int_string_key_iterator(self)

    def value_iterator(self):
        return _amplpy_copt_swig.map_int_string_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_copt_swig.map_int_string___setitem__(self, *args)

    def asdict(self):
        return _amplpy_copt_swig.map_int_string_asdict(self)

    def __init__(self, *args):
        _amplpy_copt_swig.map_int_string_swiginit(self, _amplpy_copt_swig.new_map_int_string(*args))

    def empty(self):
        return _amplpy_copt_swig.map_int_string_empty(self)

    def size(self):
        return _amplpy_copt_swig.map_int_string_size(self)

    def swap(self, v):
        return _amplpy_copt_swig.map_int_string_swap(self, v)

    def begin(self):
        return _amplpy_copt_swig.map_int_string_begin(self)

    def end(self):
        return _amplpy_copt_swig.map_int_string_end(self)

    def rbegin(self):
        return _amplpy_copt_swig.map_int_string_rbegin(self)

    def rend(self):
        return _amplpy_copt_swig.map_int_string_rend(self)

    def clear(self):
        return _amplpy_copt_swig.map_int_string_clear(self)

    def get_allocator(self):
        return _amplpy_copt_swig.map_int_string_get_allocator(self)

    def count(self, x):
        return _amplpy_copt_swig.map_int_string_count(self, x)

    def erase(self, *args):
        return _amplpy_copt_swig.map_int_string_erase(self, *args)

    def find(self, x):
        return _amplpy_copt_swig.map_int_string_find(self, x)

    def lower_bound(self, x):
        return _amplpy_copt_swig.map_int_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_copt_swig.map_int_string_upper_bound(self, x)
    __swig_destroy__ = _amplpy_copt_swig.delete_map_int_string

# Register map_int_string in _amplpy_copt_swig:
_amplpy_copt_swig.map_int_string_swigregister(map_int_string)
class map_string_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_copt_swig.map_string_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_copt_swig.map_string_double___nonzero__(self)

    def __bool__(self):
        return _amplpy_copt_swig.map_string_double___bool__(self)

    def __len__(self):
        return _amplpy_copt_swig.map_string_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_copt_swig.map_string_double___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_copt_swig.map_string_double___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_copt_swig.map_string_double_has_key(self, key)

    def keys(self):
        return _amplpy_copt_swig.map_string_double_keys(self)

    def values(self):
        return _amplpy_copt_swig.map_string_double_values(self)

    def items(self):
        return _amplpy_copt_swig.map_string_double_items(self)

    def __contains__(self, key):
        return _amplpy_copt_swig.map_string_double___contains__(self, key)

    def key_iterator(self):
        return _amplpy_copt_swig.map_string_double_key_iterator(self)

    def value_iterator(self):
        return _amplpy_copt_swig.map_string_double_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_copt_swig.map_string_double___setitem__(self, *args)

    def asdict(self):
        return _amplpy_copt_swig.map_string_double_asdict(self)

    def __init__(self, *args):
        _amplpy_copt_swig.map_string_double_swiginit(self, _amplpy_copt_swig.new_map_string_double(*args))

    def empty(self):
        return _amplpy_copt_swig.map_string_double_empty(self)

    def size(self):
        return _amplpy_copt_swig.map_string_double_size(self)

    def swap(self, v):
        return _amplpy_copt_swig.map_string_double_swap(self, v)

    def begin(self):
        return _amplpy_copt_swig.map_string_double_begin(self)

    def end(self):
        return _amplpy_copt_swig.map_string_double_end(self)

    def rbegin(self):
        return _amplpy_copt_swig.map_string_double_rbegin(self)

    def rend(self):
        return _amplpy_copt_swig.map_string_double_rend(self)

    def clear(self):
        return _amplpy_copt_swig.map_string_double_clear(self)

    def get_allocator(self):
        return _amplpy_copt_swig.map_string_double_get_allocator(self)

    def count(self, x):
        return _amplpy_copt_swig.map_string_double_count(self, x)

    def erase(self, *args):
        return _amplpy_copt_swig.map_string_double_erase(self, *args)

    def find(self, x):
        return _amplpy_copt_swig.map_string_double_find(self, x)

    def lower_bound(self, x):
        return _amplpy_copt_swig.map_string_double_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_copt_swig.map_string_double_upper_bound(self, x)
    __swig_destroy__ = _amplpy_copt_swig.delete_map_string_double

# Register map_string_double in _amplpy_copt_swig:
_amplpy_copt_swig.map_string_double_swigregister(map_string_double)
class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_copt_swig.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_copt_swig.vector_string___nonzero__(self)

    def __bool__(self):
        return _amplpy_copt_swig.vector_string___bool__(self)

    def __len__(self):
        return _amplpy_copt_swig.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_copt_swig.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_copt_swig.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_copt_swig.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_copt_swig.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_copt_swig.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_copt_swig.vector_string___setitem__(self, *args)

    def pop(self):
        return _amplpy_copt_swig.vector_string_pop(self)

    def append(self, x):
        return _amplpy_copt_swig.vector_string_append(self, x)

    def empty(self):
        return _amplpy_copt_swig.vector_string_empty(self)

    def size(self):
        return _amplpy_copt_swig.vector_string_size(self)

    def swap(self, v):
        return _amplpy_copt_swig.vector_string_swap(self, v)

    def begin(self):
        return _amplpy_copt_swig.vector_string_begin(self)

    def end(self):
        return _amplpy_copt_swig.vector_string_end(self)

    def rbegin(self):
        return _amplpy_copt_swig.vector_string_rbegin(self)

    def rend(self):
        return _amplpy_copt_swig.vector_string_rend(self)

    def clear(self):
        return _amplpy_copt_swig.vector_string_clear(self)

    def get_allocator(self):
        return _amplpy_copt_swig.vector_string_get_allocator(self)

    def pop_back(self):
        return _amplpy_copt_swig.vector_string_pop_back(self)

    def erase(self, *args):
        return _amplpy_copt_swig.vector_string_erase(self, *args)

    def __init__(self, *args):
        _amplpy_copt_swig.vector_string_swiginit(self, _amplpy_copt_swig.new_vector_string(*args))

    def push_back(self, x):
        return _amplpy_copt_swig.vector_string_push_back(self, x)

    def front(self):
        return _amplpy_copt_swig.vector_string_front(self)

    def back(self):
        return _amplpy_copt_swig.vector_string_back(self)

    def assign(self, n, x):
        return _amplpy_copt_swig.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_copt_swig.vector_string_resize(self, *args)

    def insert(self, *args):
        return _amplpy_copt_swig.vector_string_insert(self, *args)

    def reserve(self, n):
        return _amplpy_copt_swig.vector_string_reserve(self, n)

    def capacity(self):
        return _amplpy_copt_swig.vector_string_capacity(self)
    __swig_destroy__ = _amplpy_copt_swig.delete_vector_string

# Register vector_string in _amplpy_copt_swig:
_amplpy_copt_swig.vector_string_swigregister(vector_string)
class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_copt_swig.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_copt_swig.vector_double___nonzero__(self)

    def __bool__(self):
        return _amplpy_copt_swig.vector_double___bool__(self)

    def __len__(self):
        return _amplpy_copt_swig.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_copt_swig.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_copt_swig.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_copt_swig.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_copt_swig.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_copt_swig.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_copt_swig.vector_double___setitem__(self, *args)

    def pop(self):
        return _amplpy_copt_swig.vector_double_pop(self)

    def append(self, x):
        return _amplpy_copt_swig.vector_double_append(self, x)

    def empty(self):
        return _amplpy_copt_swig.vector_double_empty(self)

    def size(self):
        return _amplpy_copt_swig.vector_double_size(self)

    def swap(self, v):
        return _amplpy_copt_swig.vector_double_swap(self, v)

    def begin(self):
        return _amplpy_copt_swig.vector_double_begin(self)

    def end(self):
        return _amplpy_copt_swig.vector_double_end(self)

    def rbegin(self):
        return _amplpy_copt_swig.vector_double_rbegin(self)

    def rend(self):
        return _amplpy_copt_swig.vector_double_rend(self)

    def clear(self):
        return _amplpy_copt_swig.vector_double_clear(self)

    def get_allocator(self):
        return _amplpy_copt_swig.vector_double_get_allocator(self)

    def pop_back(self):
        return _amplpy_copt_swig.vector_double_pop_back(self)

    def erase(self, *args):
        return _amplpy_copt_swig.vector_double_erase(self, *args)

    def __init__(self, *args):
        _amplpy_copt_swig.vector_double_swiginit(self, _amplpy_copt_swig.new_vector_double(*args))

    def push_back(self, x):
        return _amplpy_copt_swig.vector_double_push_back(self, x)

    def front(self):
        return _amplpy_copt_swig.vector_double_front(self)

    def back(self):
        return _amplpy_copt_swig.vector_double_back(self)

    def assign(self, n, x):
        return _amplpy_copt_swig.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_copt_swig.vector_double_resize(self, *args)

    def insert(self, *args):
        return _amplpy_copt_swig.vector_double_insert(self, *args)

    def reserve(self, n):
        return _amplpy_copt_swig.vector_double_reserve(self, n)

    def capacity(self):
        return _amplpy_copt_swig.vector_double_capacity(self)
    __swig_destroy__ = _amplpy_copt_swig.delete_vector_double

# Register vector_double in _amplpy_copt_swig:
_amplpy_copt_swig.vector_double_swigregister(vector_double)
class vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_copt_swig.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_copt_swig.vector_int___nonzero__(self)

    def __bool__(self):
        return _amplpy_copt_swig.vector_int___bool__(self)

    def __len__(self):
        return _amplpy_copt_swig.vector_int___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_copt_swig.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_copt_swig.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_copt_swig.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_copt_swig.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_copt_swig.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_copt_swig.vector_int___setitem__(self, *args)

    def pop(self):
        return _amplpy_copt_swig.vector_int_pop(self)

    def append(self, x):
        return _amplpy_copt_swig.vector_int_append(self, x)

    def empty(self):
        return _amplpy_copt_swig.vector_int_empty(self)

    def size(self):
        return _amplpy_copt_swig.vector_int_size(self)

    def swap(self, v):
        return _amplpy_copt_swig.vector_int_swap(self, v)

    def begin(self):
        return _amplpy_copt_swig.vector_int_begin(self)

    def end(self):
        return _amplpy_copt_swig.vector_int_end(self)

    def rbegin(self):
        return _amplpy_copt_swig.vector_int_rbegin(self)

    def rend(self):
        return _amplpy_copt_swig.vector_int_rend(self)

    def clear(self):
        return _amplpy_copt_swig.vector_int_clear(self)

    def get_allocator(self):
        return _amplpy_copt_swig.vector_int_get_allocator(self)

    def pop_back(self):
        return _amplpy_copt_swig.vector_int_pop_back(self)

    def erase(self, *args):
        return _amplpy_copt_swig.vector_int_erase(self, *args)

    def __init__(self, *args):
        _amplpy_copt_swig.vector_int_swiginit(self, _amplpy_copt_swig.new_vector_int(*args))

    def push_back(self, x):
        return _amplpy_copt_swig.vector_int_push_back(self, x)

    def front(self):
        return _amplpy_copt_swig.vector_int_front(self)

    def back(self):
        return _amplpy_copt_swig.vector_int_back(self)

    def assign(self, n, x):
        return _amplpy_copt_swig.vector_int_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_copt_swig.vector_int_resize(self, *args)

    def insert(self, *args):
        return _amplpy_copt_swig.vector_int_insert(self, *args)

    def reserve(self, n):
        return _amplpy_copt_swig.vector_int_reserve(self, n)

    def capacity(self):
        return _amplpy_copt_swig.vector_int_capacity(self)
    __swig_destroy__ = _amplpy_copt_swig.delete_vector_int

# Register vector_int in _amplpy_copt_swig:
_amplpy_copt_swig.vector_int_swigregister(vector_int)
class vector_options(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_copt_swig.vector_options_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_copt_swig.vector_options___nonzero__(self)

    def __bool__(self):
        return _amplpy_copt_swig.vector_options___bool__(self)

    def __len__(self):
        return _amplpy_copt_swig.vector_options___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_copt_swig.vector_options___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_copt_swig.vector_options___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_copt_swig.vector_options___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_copt_swig.vector_options___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_copt_swig.vector_options___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_copt_swig.vector_options___setitem__(self, *args)

    def pop(self):
        return _amplpy_copt_swig.vector_options_pop(self)

    def append(self, x):
        return _amplpy_copt_swig.vector_options_append(self, x)

    def empty(self):
        return _amplpy_copt_swig.vector_options_empty(self)

    def size(self):
        return _amplpy_copt_swig.vector_options_size(self)

    def swap(self, v):
        return _amplpy_copt_swig.vector_options_swap(self, v)

    def begin(self):
        return _amplpy_copt_swig.vector_options_begin(self)

    def end(self):
        return _amplpy_copt_swig.vector_options_end(self)

    def rbegin(self):
        return _amplpy_copt_swig.vector_options_rbegin(self)

    def rend(self):
        return _amplpy_copt_swig.vector_options_rend(self)

    def clear(self):
        return _amplpy_copt_swig.vector_options_clear(self)

    def get_allocator(self):
        return _amplpy_copt_swig.vector_options_get_allocator(self)

    def pop_back(self):
        return _amplpy_copt_swig.vector_options_pop_back(self)

    def erase(self, *args):
        return _amplpy_copt_swig.vector_options_erase(self, *args)

    def __init__(self, *args):
        _amplpy_copt_swig.vector_options_swiginit(self, _amplpy_copt_swig.new_vector_options(*args))

    def push_back(self, x):
        return _amplpy_copt_swig.vector_options_push_back(self, x)

    def front(self):
        return _amplpy_copt_swig.vector_options_front(self)

    def back(self):
        return _amplpy_copt_swig.vector_options_back(self)

    def assign(self, n, x):
        return _amplpy_copt_swig.vector_options_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_copt_swig.vector_options_resize(self, *args)

    def insert(self, *args):
        return _amplpy_copt_swig.vector_options_insert(self, *args)

    def reserve(self, n):
        return _amplpy_copt_swig.vector_options_reserve(self, n)

    def capacity(self):
        return _amplpy_copt_swig.vector_options_capacity(self)
    __swig_destroy__ = _amplpy_copt_swig.delete_vector_options

# Register vector_options in _amplpy_copt_swig:
_amplpy_copt_swig.vector_options_swigregister(vector_options)
class AMPLSolverException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_copt_swig.AMPLSolverException_swiginit(self, _amplpy_copt_swig.new_AMPLSolverException(*args))

    @staticmethod
    def format(*args):
        return _amplpy_copt_swig.AMPLSolverException_format(*args)

    def __str__(self):
        return _amplpy_copt_swig.AMPLSolverException___str__(self)
    __swig_destroy__ = _amplpy_copt_swig.delete_AMPLSolverException

# Register AMPLSolverException in _amplpy_copt_swig:
_amplpy_copt_swig.AMPLSolverException_swigregister(AMPLSolverException)
class Variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    str = property(_amplpy_copt_swig.Variant_str_get, _amplpy_copt_swig.Variant_str_set)
    integer = property(_amplpy_copt_swig.Variant_integer_get, _amplpy_copt_swig.Variant_integer_set)
    dbl = property(_amplpy_copt_swig.Variant_dbl_get, _amplpy_copt_swig.Variant_dbl_set)
    type = property(_amplpy_copt_swig.Variant_type_get, _amplpy_copt_swig.Variant_type_set)

    def __init__(self, *args):
        _amplpy_copt_swig.Variant_swiginit(self, _amplpy_copt_swig.new_Variant(*args))
    __swig_destroy__ = _amplpy_copt_swig.delete_Variant

# Register Variant in _amplpy_copt_swig:
_amplpy_copt_swig.Variant_swigregister(Variant)

def __lshift__(out, v):
    return _amplpy_copt_swig.__lshift__(out, v)


def generateArguments(modelName):
    return _amplpy_copt_swig.generateArguments(modelName)

def deleteParams(params):
    return _amplpy_copt_swig.deleteParams(params)
class VarType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Continuous = _amplpy_copt_swig.VarType_Continuous
    Binary = _amplpy_copt_swig.VarType_Binary
    Integer = _amplpy_copt_swig.VarType_Integer

    def __init__(self):
        _amplpy_copt_swig.VarType_swiginit(self, _amplpy_copt_swig.new_VarType())
    __swig_destroy__ = _amplpy_copt_swig.delete_VarType

# Register VarType in _amplpy_copt_swig:
_amplpy_copt_swig.VarType_swigregister(VarType)
class SolverAttributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DBL_RelMIPGap = _amplpy_copt_swig.SolverAttributes_DBL_RelMIPGap
    DBL_CurrentObjBound = _amplpy_copt_swig.SolverAttributes_DBL_CurrentObjBound
    INT_NumIntegerVars = _amplpy_copt_swig.SolverAttributes_INT_NumIntegerVars

    def __init__(self):
        _amplpy_copt_swig.SolverAttributes_swiginit(self, _amplpy_copt_swig.new_SolverAttributes())
    __swig_destroy__ = _amplpy_copt_swig.delete_SolverAttributes

# Register SolverAttributes in _amplpy_copt_swig:
_amplpy_copt_swig.SolverAttributes_swigregister(SolverAttributes)
class SolverParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DBL_MIPGap = _amplpy_copt_swig.SolverParams_DBL_MIPGap
    DBL_TimeLimit = _amplpy_copt_swig.SolverParams_DBL_TimeLimit
    INT_SolutionLimit = _amplpy_copt_swig.SolverParams_INT_SolutionLimit
    INT_LP_Algorithm = _amplpy_copt_swig.SolverParams_INT_LP_Algorithm

    def __init__(self):
        _amplpy_copt_swig.SolverParams_swiginit(self, _amplpy_copt_swig.new_SolverParams())
    __swig_destroy__ = _amplpy_copt_swig.delete_SolverParams

# Register SolverParams in _amplpy_copt_swig:
_amplpy_copt_swig.SolverParams_swigregister(SolverParams)
class LPAlgorithms(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Auto = _amplpy_copt_swig.LPAlgorithms_Auto
    PrimalSimplex = _amplpy_copt_swig.LPAlgorithms_PrimalSimplex
    DualSimplex = _amplpy_copt_swig.LPAlgorithms_DualSimplex
    Barrier = _amplpy_copt_swig.LPAlgorithms_Barrier

    def __init__(self):
        _amplpy_copt_swig.LPAlgorithms_swiginit(self, _amplpy_copt_swig.new_LPAlgorithms())
    __swig_destroy__ = _amplpy_copt_swig.delete_LPAlgorithms

# Register LPAlgorithms in _amplpy_copt_swig:
_amplpy_copt_swig.LPAlgorithms_swigregister(LPAlgorithms)
class Where(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MSG = _amplpy_copt_swig.Where_MSG
    PRESOLVE = _amplpy_copt_swig.Where_PRESOLVE
    LPSOLVE = _amplpy_copt_swig.Where_LPSOLVE
    MIPNODE = _amplpy_copt_swig.Where_MIPNODE
    MIPSOL = _amplpy_copt_swig.Where_MIPSOL
    MIP = _amplpy_copt_swig.Where_MIP
    NOTMAPPED = _amplpy_copt_swig.Where_NOTMAPPED

    def __init__(self):
        _amplpy_copt_swig.Where_swiginit(self, _amplpy_copt_swig.new_Where())
    __swig_destroy__ = _amplpy_copt_swig.delete_Where

# Register Where in _amplpy_copt_swig:
_amplpy_copt_swig.Where_swigregister(Where)
class CanDo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IMPORT_SOLUTION = _amplpy_copt_swig.CanDo_IMPORT_SOLUTION
    GET_LP_SOLUTION = _amplpy_copt_swig.CanDo_GET_LP_SOLUTION
    GET_MIP_SOLUTION = _amplpy_copt_swig.CanDo_GET_MIP_SOLUTION
    ADD_LAZY_CONSTRAINT = _amplpy_copt_swig.CanDo_ADD_LAZY_CONSTRAINT
    ADD_USER_CUT = _amplpy_copt_swig.CanDo_ADD_USER_CUT

    def __init__(self):
        _amplpy_copt_swig.CanDo_swiginit(self, _amplpy_copt_swig.new_CanDo())
    __swig_destroy__ = _amplpy_copt_swig.delete_CanDo

# Register CanDo in _amplpy_copt_swig:
_amplpy_copt_swig.CanDo_swigregister(CanDo)
class Value(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OBJ = _amplpy_copt_swig.Value_OBJ
    PRE_DELCOLS = _amplpy_copt_swig.Value_PRE_DELCOLS
    PRE_DELROWS = _amplpy_copt_swig.Value_PRE_DELROWS
    PRE_COEFFCHANGED = _amplpy_copt_swig.Value_PRE_COEFFCHANGED
    ITERATIONS = _amplpy_copt_swig.Value_ITERATIONS
    RUNTIME = _amplpy_copt_swig.Value_RUNTIME
    MIP_NODES = _amplpy_copt_swig.Value_MIP_NODES
    MIP_RELATIVEGAP = _amplpy_copt_swig.Value_MIP_RELATIVEGAP
    MIP_OBJBOUND = _amplpy_copt_swig.Value_MIP_OBJBOUND
    MIP_SOL_RELAXED = _amplpy_copt_swig.Value_MIP_SOL_RELAXED
    N_ROWS = _amplpy_copt_swig.Value_N_ROWS
    N_COLS = _amplpy_copt_swig.Value_N_COLS

    def __init__(self):
        _amplpy_copt_swig.Value_swiginit(self, _amplpy_copt_swig.new_Value())
    __swig_destroy__ = _amplpy_copt_swig.delete_Value

# Register Value in _amplpy_copt_swig:
_amplpy_copt_swig.Value_swigregister(Value)
class CutDirection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EQ = _amplpy_copt_swig.CutDirection_EQ
    GE = _amplpy_copt_swig.CutDirection_GE
    LE = _amplpy_copt_swig.CutDirection_LE

    @staticmethod
    def toString(dir):
        return _amplpy_copt_swig.CutDirection_toString(dir)

    def __init__(self):
        _amplpy_copt_swig.CutDirection_swiginit(self, _amplpy_copt_swig.new_CutDirection())
    __swig_destroy__ = _amplpy_copt_swig.delete_CutDirection

# Register CutDirection in _amplpy_copt_swig:
_amplpy_copt_swig.CutDirection_swigregister(CutDirection)
class Status(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNKNOWN = _amplpy_copt_swig.Status_UNKNOWN
    OPTIMAL = _amplpy_copt_swig.Status_OPTIMAL
    INFEASIBLE = _amplpy_copt_swig.Status_INFEASIBLE
    UNBOUNDED = _amplpy_copt_swig.Status_UNBOUNDED
    LIMIT_ITERATION = _amplpy_copt_swig.Status_LIMIT_ITERATION
    LIMIT_NODE = _amplpy_copt_swig.Status_LIMIT_NODE
    LIMIT_TIME = _amplpy_copt_swig.Status_LIMIT_TIME
    LIMIT_SOLUTION = _amplpy_copt_swig.Status_LIMIT_SOLUTION
    INTERRUPTED = _amplpy_copt_swig.Status_INTERRUPTED
    NOTMAPPED = _amplpy_copt_swig.Status_NOTMAPPED

    def __init__(self):
        _amplpy_copt_swig.Status_swiginit(self, _amplpy_copt_swig.new_Status())
    __swig_destroy__ = _amplpy_copt_swig.delete_Status

# Register Status in _amplpy_copt_swig:
_amplpy_copt_swig.Status_swigregister(Status)

def calculateRelMIPGAP(obj, bbound):
    return _amplpy_copt_swig.calculateRelMIPGAP(obj, bbound)
class Entity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _amplpy_copt_swig.Entity_name(self)

    def indices(self):
        return _amplpy_copt_swig.Entity_indices(self)

    def coeffs(self):
        return _amplpy_copt_swig.Entity_coeffs(self)

    def solverIndex(self, *args):
        return _amplpy_copt_swig.Entity_solverIndex(self, *args)

    def value(self, *args):
        return _amplpy_copt_swig.Entity_value(self, *args)

    def toAMPLString(self, varMap, consMap, records):
        return _amplpy_copt_swig.Entity_toAMPLString(self, varMap, consMap, records)

    def __eq__(self, other):
        return _amplpy_copt_swig.Entity___eq__(self, other)
    __swig_destroy__ = _amplpy_copt_swig.delete_Entity

# Register Entity in _amplpy_copt_swig:
_amplpy_copt_swig.Entity_swigregister(Entity)
class Constraint(Entity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_copt_swig.Constraint_swiginit(self, _amplpy_copt_swig.new_Constraint(*args))

    def sense(self):
        return _amplpy_copt_swig.Constraint_sense(self)

    def rhs(self):
        return _amplpy_copt_swig.Constraint_rhs(self)

    def toAMPLString(self, varMap, consMap, records):
        return _amplpy_copt_swig.Constraint_toAMPLString(self, varMap, consMap, records)

    def toString(self, *args):
        return _amplpy_copt_swig.Constraint_toString(self, *args)

    def __eq__(self, other):
        return _amplpy_copt_swig.Constraint___eq__(self, other)

    def to_string(self, *args):
        return _amplpy_copt_swig.Constraint_to_string(self, *args)
    __swig_destroy__ = _amplpy_copt_swig.delete_Constraint

# Register Constraint in _amplpy_copt_swig:
_amplpy_copt_swig.Constraint_swigregister(Constraint)
class Variable(Entity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_copt_swig.Variable_swiginit(self, _amplpy_copt_swig.new_Variable(*args))
    ub_ = property(_amplpy_copt_swig.Variable_ub__get, _amplpy_copt_swig.Variable_ub__set)
    lb_ = property(_amplpy_copt_swig.Variable_lb__get, _amplpy_copt_swig.Variable_lb__set)
    obj_ = property(_amplpy_copt_swig.Variable_obj__get, _amplpy_copt_swig.Variable_obj__set)
    type_ = property(_amplpy_copt_swig.Variable_type__get, _amplpy_copt_swig.Variable_type__set)

    def toAMPLString(self, map, consMap, records):
        return _amplpy_copt_swig.Variable_toAMPLString(self, map, consMap, records)
    __swig_destroy__ = _amplpy_copt_swig.delete_Variable

# Register Variable in _amplpy_copt_swig:
_amplpy_copt_swig.Variable_swigregister(Variable)
class Records(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_copt_swig.Records_swiginit(self, _amplpy_copt_swig.new_Records(*args))

    def getRecordedEntities(self, exportToAMPL=False):
        return _amplpy_copt_swig.Records_getRecordedEntities(self, exportToAMPL)

    def addVariable(self, v):
        return _amplpy_copt_swig.Records_addVariable(self, v)

    def addConstraint(self, c):
        return _amplpy_copt_swig.Records_addConstraint(self, c)

    def getVarIndices(self, min, max):
        return _amplpy_copt_swig.Records_getVarIndices(self, min, max)

    def getConsIndices(self, min, max):
        return _amplpy_copt_swig.Records_getConsIndices(self, min, max)

    def getNumConstraints(self):
        return _amplpy_copt_swig.Records_getNumConstraints(self)

    def getNumVariables(self):
        return _amplpy_copt_swig.Records_getNumVariables(self)
    __swig_destroy__ = _amplpy_copt_swig.delete_Records

# Register Records in _amplpy_copt_swig:
_amplpy_copt_swig.Records_swigregister(Records)
class AMPLMutex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _amplpy_copt_swig.AMPLMutex_swiginit(self, _amplpy_copt_swig.new_AMPLMutex())
    __swig_destroy__ = _amplpy_copt_swig.delete_AMPLMutex

    def Lock(self):
        return _amplpy_copt_swig.AMPLMutex_Lock(self)

    def Unlock(self):
        return _amplpy_copt_swig.AMPLMutex_Unlock(self)

# Register AMPLMutex in _amplpy_copt_swig:
_amplpy_copt_swig.AMPLMutex_swigregister(AMPLMutex)
class BaseCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValueImpl(self, v):
        return _amplpy_copt_swig.BaseCallback_getValueImpl(self, v)

    def canDo(self, f):
        return _amplpy_copt_swig.BaseCallback_canDo(self, f)

    def record(self, *args):
        return _amplpy_copt_swig.BaseCallback_record(self, *args)

    def addVariable(self, *args):
        return _amplpy_copt_swig.BaseCallback_addVariable(self, *args)

    def setDebugCuts(self, cutDebug, cutDebugIntCoefficients, cutDebugPrintVarNames):
        return _amplpy_copt_swig.BaseCallback_setDebugCuts(self, cutDebug, cutDebugIntCoefficients, cutDebugPrintVarNames)

    def __init__(self):
        if self.__class__ == BaseCallback:
            _self = None
        else:
            _self = self
        _amplpy_copt_swig.BaseCallback_swiginit(self, _amplpy_copt_swig.new_BaseCallback(_self, ))

    def run(self):
        return _amplpy_copt_swig.BaseCallback_run(self)
    __swig_destroy__ = _amplpy_copt_swig.delete_BaseCallback

    def addCut(self, vars, coeffs, direction, rhs):
        return _amplpy_copt_swig.BaseCallback_addCut(self, vars, coeffs, direction, rhs)

    def addLazy(self, vars, coeffs, direction, rhs):
        return _amplpy_copt_swig.BaseCallback_addLazy(self, vars, coeffs, direction, rhs)

    def addCutIndices(self, nvars, coeffs, direction, rhs):
        return _amplpy_copt_swig.BaseCallback_addCutIndices(self, nvars, coeffs, direction, rhs)

    def addLazyIndices(self, nvars, coeffs, direction, rhs):
        return _amplpy_copt_swig.BaseCallback_addLazyIndices(self, nvars, coeffs, direction, rhs)

    def setHeuristicSolution(self, nvars, indices, values):
        return _amplpy_copt_swig.BaseCallback_setHeuristicSolution(self, nvars, indices, values)

    def getSolutionVector(self):
        return _amplpy_copt_swig.BaseCallback_getSolutionVector(self)

    def getSolution(self, len, sol):
        return _amplpy_copt_swig.BaseCallback_getSolution(self, len, sol)

    def getObj(self):
        return _amplpy_copt_swig.BaseCallback_getObj(self)

    def getWhere(self):
        return _amplpy_copt_swig.BaseCallback_getWhere(self)

    def getWhereString(self):
        return _amplpy_copt_swig.BaseCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_copt_swig.BaseCallback_getMessage(self)

    def getAMPLWhere(self):
        return _amplpy_copt_swig.BaseCallback_getAMPLWhere(self)

    def getValue(self, v):
        return _amplpy_copt_swig.BaseCallback_getValue(self, v)

    def getValueArray(self, v):
        return _amplpy_copt_swig.BaseCallback_getValueArray(self, v)

    def getSolutionDict(self):
        return _amplpy_copt_swig.BaseCallback_getSolutionDict(self)

    def getVarMap(self):
        return _amplpy_copt_swig.BaseCallback_getVarMap(self)

    def getVarMapInverse(self):
        return _amplpy_copt_swig.BaseCallback_getVarMapInverse(self)

    def get_solution_vector(self):
        return _amplpy_copt_swig.BaseCallback_get_solution_vector(self)

    def can_do(self, f):
        return _amplpy_copt_swig.BaseCallback_can_do(self, f)

    def add_variable(self, *args):
        return _amplpy_copt_swig.BaseCallback_add_variable(self, *args)

    def set_debug_cuts(self, cutDebug, cutDebugIntCoefficients, cutDebugPrintVarNames):
        return _amplpy_copt_swig.BaseCallback_set_debug_cuts(self, cutDebug, cutDebugIntCoefficients, cutDebugPrintVarNames)

    def get_var_map(self):
        return _amplpy_copt_swig.BaseCallback_get_var_map(self)

    def get_var_map_inverse(self):
        return _amplpy_copt_swig.BaseCallback_get_var_map_inverse(self)

    def set_heuristic_solution(self, nvars, indices, values):
        return _amplpy_copt_swig.BaseCallback_set_heuristic_solution(self, nvars, indices, values)

    def get_obj(self):
        return _amplpy_copt_swig.BaseCallback_get_obj(self)

    def get_where(self):
        return _amplpy_copt_swig.BaseCallback_get_where(self)

    def get_where_string(self):
        return _amplpy_copt_swig.BaseCallback_get_where_string(self)

    def get_message(self):
        return _amplpy_copt_swig.BaseCallback_get_message(self)

    def get_ampl_where(self):
        return _amplpy_copt_swig.BaseCallback_get_ampl_where(self)

    def get_value(self, v):
        return _amplpy_copt_swig.BaseCallback_get_value(self, v)

    def get_value_array(self, v):
        return _amplpy_copt_swig.BaseCallback_get_value_array(self, v)
    def __disown__(self):
        self.this.disown()
        _amplpy_copt_swig.disown_BaseCallback(self)
        return weakref.proxy(self)

# Register BaseCallback in _amplpy_copt_swig:
_amplpy_copt_swig.BaseCallback_swigregister(BaseCallback)
class GenericCallback(BaseCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValueImpl(self, v):
        return _amplpy_copt_swig.GenericCallback_getValueImpl(self, v)

    def getSolutionVector(self):
        return _amplpy_copt_swig.GenericCallback_getSolutionVector(self)

    def getValueArray(self, v):
        return _amplpy_copt_swig.GenericCallback_getValueArray(self, v)

    def setHeuristicSolution(self, nvars, indices, values):
        return _amplpy_copt_swig.GenericCallback_setHeuristicSolution(self, nvars, indices, values)

    def getObj(self):
        return _amplpy_copt_swig.GenericCallback_getObj(self)

    def getWhere(self):
        return _amplpy_copt_swig.GenericCallback_getWhere(self)

    def getAMPLWhere(self):
        return _amplpy_copt_swig.GenericCallback_getAMPLWhere(self)

    def getWhereString(self):
        return _amplpy_copt_swig.GenericCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_copt_swig.GenericCallback_getMessage(self)

    def getValue(self, v):
        return _amplpy_copt_swig.GenericCallback_getValue(self, v)

    def canDo(self, f):
        return _amplpy_copt_swig.GenericCallback_canDo(self, f)

    def __init__(self):
        if self.__class__ == GenericCallback:
            _self = None
        else:
            _self = self
        _amplpy_copt_swig.GenericCallback_swiginit(self, _amplpy_copt_swig.new_GenericCallback(_self, ))
    __swig_destroy__ = _amplpy_copt_swig.delete_GenericCallback
    def __disown__(self):
        self.this.disown()
        _amplpy_copt_swig.disown_GenericCallback(self)
        return weakref.proxy(self)

# Register GenericCallback in _amplpy_copt_swig:
_amplpy_copt_swig.GenericCallback_swigregister(GenericCallback)
class Option(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name_ = property(_amplpy_copt_swig.Option_name__get, _amplpy_copt_swig.Option_name__set)
    description_ = property(_amplpy_copt_swig.Option_description__get, _amplpy_copt_swig.Option_description__set)
    INT = _amplpy_copt_swig.Option_INT
    BOOL = _amplpy_copt_swig.Option_BOOL
    DOUBLE = _amplpy_copt_swig.Option_DOUBLE
    STRING = _amplpy_copt_swig.Option_STRING
    UNKNOWN = _amplpy_copt_swig.Option_UNKNOWN
    type_ = property(_amplpy_copt_swig.Option_type__get, _amplpy_copt_swig.Option_type__set)

    def __init__(self, *args):
        _amplpy_copt_swig.Option_swiginit(self, _amplpy_copt_swig.new_Option(*args))

    def name(self):
        return _amplpy_copt_swig.Option_name(self)

    def description(self):
        return _amplpy_copt_swig.Option_description(self)

    def type(self):
        return _amplpy_copt_swig.Option_type(self)

    def typeStr(self):
        return _amplpy_copt_swig.Option_typeStr(self)

    def toString(self):
        return _amplpy_copt_swig.Option_toString(self)

    def __repr__(self):
      return self.toString()

    __swig_destroy__ = _amplpy_copt_swig.delete_Option

# Register Option in _amplpy_copt_swig:
_amplpy_copt_swig.Option_swigregister(Option)
class AMPLModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def driver(self):
        return _amplpy_copt_swig.AMPLModel_driver(self)

    def getRecordedEntities(self, exportToAMPL=True):
        return _amplpy_copt_swig.AMPLModel_getRecordedEntities(self, exportToAMPL)

    def addConstraint(self, *args):
        return _amplpy_copt_swig.AMPLModel_addConstraint(self, *args)

    def record(self, *args):
        return _amplpy_copt_swig.AMPLModel_record(self, *args)

    def infinity(self):
        return _amplpy_copt_swig.AMPLModel_infinity(self)

    def negInfinity(self):
        return _amplpy_copt_swig.AMPLModel_negInfinity(self)

    def addVariable(self, *args):
        return _amplpy_copt_swig.AMPLModel_addVariable(self, *args)

    def getFileName(self):
        return _amplpy_copt_swig.AMPLModel_getFileName(self)

    def getConMapInverse(self):
        return _amplpy_copt_swig.AMPLModel_getConMapInverse(self)

    def getConMap(self):
        return _amplpy_copt_swig.AMPLModel_getConMap(self)

    def getConMapFiltered(self, beginWith):
        return _amplpy_copt_swig.AMPLModel_getConMapFiltered(self, beginWith)

    def setCallback(self, *args):
        return _amplpy_copt_swig.AMPLModel_setCallback(self, *args)

    def getSolutionVector(self):
        return _amplpy_copt_swig.AMPLModel_getSolutionVector(self)

    def getDualVector(self):
        return _amplpy_copt_swig.AMPLModel_getDualVector(self)

    def getNumVars(self):
        return _amplpy_copt_swig.AMPLModel_getNumVars(self)

    def getNumCons(self):
        return _amplpy_copt_swig.AMPLModel_getNumCons(self)

    def getStatus(self):
        return _amplpy_copt_swig.AMPLModel_getStatus(self)

    def optimize(self):
        return _amplpy_copt_swig.AMPLModel_optimize(self)

    def writeSol(self, *args):
        return _amplpy_copt_swig.AMPLModel_writeSol(self, *args)

    def getSolution(self, first, length, sol):
        return _amplpy_copt_swig.AMPLModel_getSolution(self, first, length, sol)

    def getObj(self):
        return _amplpy_copt_swig.AMPLModel_getObj(self)

    def error(self, code):
        return _amplpy_copt_swig.AMPLModel_error(self, code)

    def enableLazyConstraints(self):
        return _amplpy_copt_swig.AMPLModel_enableLazyConstraints(self)

    def printModelVars(self, onlyNonZero):
        return _amplpy_copt_swig.AMPLModel_printModelVars(self, onlyNonZero)

    def setAMPLParameter(self, *args):
        return _amplpy_copt_swig.AMPLModel_setAMPLParameter(self, *args)

    def getAMPLIntParameter(self, params):
        return _amplpy_copt_swig.AMPLModel_getAMPLIntParameter(self, params)

    def getAMPLDoubleParameter(self, param):
        return _amplpy_copt_swig.AMPLModel_getAMPLDoubleParameter(self, param)

    def getAMPLIntAttribute(self, arg2):
        return _amplpy_copt_swig.AMPLModel_getAMPLIntAttribute(self, arg2)

    def getAMPLDoubleAttribute(self, arg2):
        return _amplpy_copt_swig.AMPLModel_getAMPLDoubleAttribute(self, arg2)

    def getOptions(self):
        return _amplpy_copt_swig.AMPLModel_getOptions(self)

    def setOption(self, *args):
        return _amplpy_copt_swig.AMPLModel_setOption(self, *args)

    def getIntOption(self, name):
        return _amplpy_copt_swig.AMPLModel_getIntOption(self, name)

    def getDoubleOption(self, name):
        return _amplpy_copt_swig.AMPLModel_getDoubleOption(self, name)

    def getStringOption(self, name):
        return _amplpy_copt_swig.AMPLModel_getStringOption(self, name)

    def refresh(self):
        return _amplpy_copt_swig.AMPLModel_refresh(self)

    def getSolutionDict(self):
        return _amplpy_copt_swig.AMPLModel_getSolutionDict(self)

    def getVarMap(self):
        return _amplpy_copt_swig.AMPLModel_getVarMap(self)

    def getVarMapFiltered(self, beginWith):
        return _amplpy_copt_swig.AMPLModel_getVarMapFiltered(self, beginWith)

    def getVarMapInverse(self):
        return _amplpy_copt_swig.AMPLModel_getVarMapInverse(self)

    def get_recorded_entities(self, exportToAMPL=True):
        return _amplpy_copt_swig.AMPLModel_get_recorded_entities(self, exportToAMPL)

    def add_variable(self, *args):
        return _amplpy_copt_swig.AMPLModel_add_variable(self, *args)

    def get_file_name(self):
        return _amplpy_copt_swig.AMPLModel_get_file_name(self)

    def get_var_map_inverse(self):
        return _amplpy_copt_swig.AMPLModel_get_var_map_inverse(self)

    def get_con_map_inverse(self):
        return _amplpy_copt_swig.AMPLModel_get_con_map_inverse(self)

    def get_var_map(self):
        return _amplpy_copt_swig.AMPLModel_get_var_map(self)

    def get_con_map(self):
        return _amplpy_copt_swig.AMPLModel_get_con_map(self)

    def get_var_map_filtered(self, beginWith):
        return _amplpy_copt_swig.AMPLModel_get_var_map_filtered(self, beginWith)

    def get_con_map_filtered(self, beginWith):
        return _amplpy_copt_swig.AMPLModel_get_con_map_filtered(self, beginWith)

    def set_callback(self, *args):
        return _amplpy_copt_swig.AMPLModel_set_callback(self, *args)

    def get_solution_vector(self):
        return _amplpy_copt_swig.AMPLModel_get_solution_vector(self)

    def get_dual_vector(self):
        return _amplpy_copt_swig.AMPLModel_get_dual_vector(self)

    def get_num_vars(self):
        return _amplpy_copt_swig.AMPLModel_get_num_vars(self)

    def get_num_cons(self):
        return _amplpy_copt_swig.AMPLModel_get_num_cons(self)

    def write_sol(self, *args):
        return _amplpy_copt_swig.AMPLModel_write_sol(self, *args)

    def get_obj(self):
        return _amplpy_copt_swig.AMPLModel_get_obj(self)

    def enable_lazy_constraints(self):
        return _amplpy_copt_swig.AMPLModel_enable_lazy_constraints(self)

    def print_model_vars(self, onlyNonZero):
        return _amplpy_copt_swig.AMPLModel_print_model_vars(self, onlyNonZero)

    def get_options(self):
        return _amplpy_copt_swig.AMPLModel_get_options(self)

    def set_option(self, *args):
        return _amplpy_copt_swig.AMPLModel_set_option(self, *args)

    def get_int_option(self, name):
        return _amplpy_copt_swig.AMPLModel_get_int_option(self, name)

    def get_double_option(self, name):
        return _amplpy_copt_swig.AMPLModel_get_double_option(self, name)

    def get_string_option(self, name):
        return _amplpy_copt_swig.AMPLModel_get_string_option(self, name)
    __swig_destroy__ = _amplpy_copt_swig.delete_AMPLModel

# Register AMPLModel in _amplpy_copt_swig:
_amplpy_copt_swig.AMPLModel_swigregister(AMPLModel)
class AMPLMPModel(AMPLModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOptions(self):
        return _amplpy_copt_swig.AMPLMPModel_getOptions(self)

    def setOption(self, *args):
        return _amplpy_copt_swig.AMPLMPModel_setOption(self, *args)

    def getIntOption(self, name):
        return _amplpy_copt_swig.AMPLMPModel_getIntOption(self, name)

    def getDoubleOption(self, name):
        return _amplpy_copt_swig.AMPLMPModel_getDoubleOption(self, name)

    def getStringOption(self, name):
        return _amplpy_copt_swig.AMPLMPModel_getStringOption(self, name)

    def refresh(self):
        return _amplpy_copt_swig.AMPLMPModel_refresh(self)

    def optimize(self):
        return _amplpy_copt_swig.AMPLMPModel_optimize(self)
    __swig_destroy__ = _amplpy_copt_swig.delete_AMPLMPModel

# Register AMPLMPModel in _amplpy_copt_swig:
_amplpy_copt_swig.AMPLMPModel_swigregister(AMPLMPModel)
class SolverDriverCopt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def loadModel(self, *args):
        return _amplpy_copt_swig.SolverDriverCopt_loadModel(self, *args)
    __swig_destroy__ = _amplpy_copt_swig.delete_SolverDriverCopt

# Register SolverDriverCopt in _amplpy_copt_swig:
_amplpy_copt_swig.SolverDriverCopt_swigregister(SolverDriverCopt)
COPT_VERSION_MAJOR = _amplpy_copt_swig.COPT_VERSION_MAJOR
COPT_VERSION_MINOR = _amplpy_copt_swig.COPT_VERSION_MINOR
COPT_VERSION_TECHNICAL = _amplpy_copt_swig.COPT_VERSION_TECHNICAL
COPT_MINIMIZE = _amplpy_copt_swig.COPT_MINIMIZE
COPT_MAXIMIZE = _amplpy_copt_swig.COPT_MAXIMIZE
COPT_INFINITY = _amplpy_copt_swig.COPT_INFINITY
COPT_UNDEFINED = _amplpy_copt_swig.COPT_UNDEFINED
COPT_BUFFSIZE = _amplpy_copt_swig.COPT_BUFFSIZE
COPT_LESS_EQUAL = _amplpy_copt_swig.COPT_LESS_EQUAL
COPT_GREATER_EQUAL = _amplpy_copt_swig.COPT_GREATER_EQUAL
COPT_EQUAL = _amplpy_copt_swig.COPT_EQUAL
COPT_FREE = _amplpy_copt_swig.COPT_FREE
COPT_RANGE = _amplpy_copt_swig.COPT_RANGE
COPT_CONTINUOUS = _amplpy_copt_swig.COPT_CONTINUOUS
COPT_BINARY = _amplpy_copt_swig.COPT_BINARY
COPT_INTEGER = _amplpy_copt_swig.COPT_INTEGER
COPT_SOS_TYPE1 = _amplpy_copt_swig.COPT_SOS_TYPE1
COPT_SOS_TYPE2 = _amplpy_copt_swig.COPT_SOS_TYPE2
COPT_CONE_QUAD = _amplpy_copt_swig.COPT_CONE_QUAD
COPT_CONE_RQUAD = _amplpy_copt_swig.COPT_CONE_RQUAD
COPT_RETCODE_OK = _amplpy_copt_swig.COPT_RETCODE_OK
COPT_RETCODE_MEMORY = _amplpy_copt_swig.COPT_RETCODE_MEMORY
COPT_RETCODE_FILE = _amplpy_copt_swig.COPT_RETCODE_FILE
COPT_RETCODE_INVALID = _amplpy_copt_swig.COPT_RETCODE_INVALID
COPT_RETCODE_LICENSE = _amplpy_copt_swig.COPT_RETCODE_LICENSE
COPT_RETCODE_INTERNAL = _amplpy_copt_swig.COPT_RETCODE_INTERNAL
COPT_RETCODE_THREAD = _amplpy_copt_swig.COPT_RETCODE_THREAD
COPT_RETCODE_SERVER = _amplpy_copt_swig.COPT_RETCODE_SERVER
COPT_RETCODE_NONCONVEX = _amplpy_copt_swig.COPT_RETCODE_NONCONVEX
COPT_BASIS_LOWER = _amplpy_copt_swig.COPT_BASIS_LOWER
COPT_BASIS_BASIC = _amplpy_copt_swig.COPT_BASIS_BASIC
COPT_BASIS_UPPER = _amplpy_copt_swig.COPT_BASIS_UPPER
COPT_BASIS_SUPERBASIC = _amplpy_copt_swig.COPT_BASIS_SUPERBASIC
COPT_BASIS_FIXED = _amplpy_copt_swig.COPT_BASIS_FIXED
COPT_LPSTATUS_UNSTARTED = _amplpy_copt_swig.COPT_LPSTATUS_UNSTARTED
COPT_LPSTATUS_OPTIMAL = _amplpy_copt_swig.COPT_LPSTATUS_OPTIMAL
COPT_LPSTATUS_INFEASIBLE = _amplpy_copt_swig.COPT_LPSTATUS_INFEASIBLE
COPT_LPSTATUS_UNBOUNDED = _amplpy_copt_swig.COPT_LPSTATUS_UNBOUNDED
COPT_LPSTATUS_NUMERICAL = _amplpy_copt_swig.COPT_LPSTATUS_NUMERICAL
COPT_LPSTATUS_IMPRECISE = _amplpy_copt_swig.COPT_LPSTATUS_IMPRECISE
COPT_LPSTATUS_TIMEOUT = _amplpy_copt_swig.COPT_LPSTATUS_TIMEOUT
COPT_LPSTATUS_UNFINISHED = _amplpy_copt_swig.COPT_LPSTATUS_UNFINISHED
COPT_LPSTATUS_INTERRUPTED = _amplpy_copt_swig.COPT_LPSTATUS_INTERRUPTED
COPT_MIPSTATUS_UNSTARTED = _amplpy_copt_swig.COPT_MIPSTATUS_UNSTARTED
COPT_MIPSTATUS_OPTIMAL = _amplpy_copt_swig.COPT_MIPSTATUS_OPTIMAL
COPT_MIPSTATUS_INFEASIBLE = _amplpy_copt_swig.COPT_MIPSTATUS_INFEASIBLE
COPT_MIPSTATUS_UNBOUNDED = _amplpy_copt_swig.COPT_MIPSTATUS_UNBOUNDED
COPT_MIPSTATUS_INF_OR_UNB = _amplpy_copt_swig.COPT_MIPSTATUS_INF_OR_UNB
COPT_MIPSTATUS_NODELIMIT = _amplpy_copt_swig.COPT_MIPSTATUS_NODELIMIT
COPT_MIPSTATUS_TIMEOUT = _amplpy_copt_swig.COPT_MIPSTATUS_TIMEOUT
COPT_MIPSTATUS_UNFINISHED = _amplpy_copt_swig.COPT_MIPSTATUS_UNFINISHED
COPT_MIPSTATUS_INTERRUPTED = _amplpy_copt_swig.COPT_MIPSTATUS_INTERRUPTED
COPT_CBCONTEXT_MIPRELAX = _amplpy_copt_swig.COPT_CBCONTEXT_MIPRELAX
COPT_CBCONTEXT_MIPSOL = _amplpy_copt_swig.COPT_CBCONTEXT_MIPSOL
COPT_CBCONTEXT_MIPNODE = _amplpy_copt_swig.COPT_CBCONTEXT_MIPNODE
COPT_CBCONTEXT_INCUMBENT = _amplpy_copt_swig.COPT_CBCONTEXT_INCUMBENT
COPT_CBINFO_BESTOBJ = _amplpy_copt_swig.COPT_CBINFO_BESTOBJ
COPT_CBINFO_BESTBND = _amplpy_copt_swig.COPT_CBINFO_BESTBND
COPT_CBINFO_HASINCUMBENT = _amplpy_copt_swig.COPT_CBINFO_HASINCUMBENT
COPT_CBINFO_INCUMBENT = _amplpy_copt_swig.COPT_CBINFO_INCUMBENT
COPT_CBINFO_MIPCANDIDATE = _amplpy_copt_swig.COPT_CBINFO_MIPCANDIDATE
COPT_CBINFO_MIPCANDOBJ = _amplpy_copt_swig.COPT_CBINFO_MIPCANDOBJ
COPT_CBINFO_RELAXSOLUTION = _amplpy_copt_swig.COPT_CBINFO_RELAXSOLUTION
COPT_CBINFO_RELAXSOLOBJ = _amplpy_copt_swig.COPT_CBINFO_RELAXSOLOBJ
COPT_CBINFO_NODESTATUS = _amplpy_copt_swig.COPT_CBINFO_NODESTATUS
COPT_DBLPARAM_TIMELIMIT = _amplpy_copt_swig.COPT_DBLPARAM_TIMELIMIT
COPT_DBLPARAM_SOLTIMELIMIT = _amplpy_copt_swig.COPT_DBLPARAM_SOLTIMELIMIT
COPT_DBLPARAM_MATRIXTOL = _amplpy_copt_swig.COPT_DBLPARAM_MATRIXTOL
COPT_DBLPARAM_FEASTOL = _amplpy_copt_swig.COPT_DBLPARAM_FEASTOL
COPT_DBLPARAM_DUALTOL = _amplpy_copt_swig.COPT_DBLPARAM_DUALTOL
COPT_DBLPARAM_INTTOL = _amplpy_copt_swig.COPT_DBLPARAM_INTTOL
COPT_DBLPARAM_PDLPTOL = _amplpy_copt_swig.COPT_DBLPARAM_PDLPTOL
COPT_DBLPARAM_RELGAP = _amplpy_copt_swig.COPT_DBLPARAM_RELGAP
COPT_DBLPARAM_ABSGAP = _amplpy_copt_swig.COPT_DBLPARAM_ABSGAP
COPT_DBLPARAM_TUNETIMELIMIT = _amplpy_copt_swig.COPT_DBLPARAM_TUNETIMELIMIT
COPT_DBLPARAM_TUNETARGETTIME = _amplpy_copt_swig.COPT_DBLPARAM_TUNETARGETTIME
COPT_DBLPARAM_TUNETARGETRELGAP = _amplpy_copt_swig.COPT_DBLPARAM_TUNETARGETRELGAP
COPT_INTPARAM_LOGGING = _amplpy_copt_swig.COPT_INTPARAM_LOGGING
COPT_INTPARAM_LOGTOCONSOLE = _amplpy_copt_swig.COPT_INTPARAM_LOGTOCONSOLE
COPT_INTPARAM_PRESOLVE = _amplpy_copt_swig.COPT_INTPARAM_PRESOLVE
COPT_INTPARAM_SCALING = _amplpy_copt_swig.COPT_INTPARAM_SCALING
COPT_INTPARAM_DUALIZE = _amplpy_copt_swig.COPT_INTPARAM_DUALIZE
COPT_INTPARAM_LPMETHOD = _amplpy_copt_swig.COPT_INTPARAM_LPMETHOD
COPT_INTPARAM_GPUMODE = _amplpy_copt_swig.COPT_INTPARAM_GPUMODE
COPT_INTPARAM_GPUDEVICE = _amplpy_copt_swig.COPT_INTPARAM_GPUDEVICE
COPT_INTPARAM_REQFARKASRAY = _amplpy_copt_swig.COPT_INTPARAM_REQFARKASRAY
COPT_INTPARAM_DUALPRICE = _amplpy_copt_swig.COPT_INTPARAM_DUALPRICE
COPT_INTPARAM_DUALPERTURB = _amplpy_copt_swig.COPT_INTPARAM_DUALPERTURB
COPT_INTPARAM_CUTLEVEL = _amplpy_copt_swig.COPT_INTPARAM_CUTLEVEL
COPT_INTPARAM_ROOTCUTLEVEL = _amplpy_copt_swig.COPT_INTPARAM_ROOTCUTLEVEL
COPT_INTPARAM_TREECUTLEVEL = _amplpy_copt_swig.COPT_INTPARAM_TREECUTLEVEL
COPT_INTPARAM_ROOTCUTROUNDS = _amplpy_copt_swig.COPT_INTPARAM_ROOTCUTROUNDS
COPT_INTPARAM_NODECUTROUNDS = _amplpy_copt_swig.COPT_INTPARAM_NODECUTROUNDS
COPT_INTPARAM_HEURLEVEL = _amplpy_copt_swig.COPT_INTPARAM_HEURLEVEL
COPT_INTPARAM_ROUNDINGHEURLEVEL = _amplpy_copt_swig.COPT_INTPARAM_ROUNDINGHEURLEVEL
COPT_INTPARAM_DIVINGHEURLEVEL = _amplpy_copt_swig.COPT_INTPARAM_DIVINGHEURLEVEL
COPT_INTPARAM_FAPHEURLEVEL = _amplpy_copt_swig.COPT_INTPARAM_FAPHEURLEVEL
COPT_INTPARAM_SUBMIPHEURLEVEL = _amplpy_copt_swig.COPT_INTPARAM_SUBMIPHEURLEVEL
COPT_INTPARAM_STRONGBRANCHING = _amplpy_copt_swig.COPT_INTPARAM_STRONGBRANCHING
COPT_INTPARAM_CONFLICTANALYSIS = _amplpy_copt_swig.COPT_INTPARAM_CONFLICTANALYSIS
COPT_INTPARAM_NODELIMIT = _amplpy_copt_swig.COPT_INTPARAM_NODELIMIT
COPT_INTPARAM_MIPTASKS = _amplpy_copt_swig.COPT_INTPARAM_MIPTASKS
COPT_INTPARAM_BARHOMOGENEOUS = _amplpy_copt_swig.COPT_INTPARAM_BARHOMOGENEOUS
COPT_INTPARAM_BARORDER = _amplpy_copt_swig.COPT_INTPARAM_BARORDER
COPT_INTPARAM_BARSTART = _amplpy_copt_swig.COPT_INTPARAM_BARSTART
COPT_INTPARAM_BARITERLIMIT = _amplpy_copt_swig.COPT_INTPARAM_BARITERLIMIT
COPT_INTPARAM_THREADS = _amplpy_copt_swig.COPT_INTPARAM_THREADS
COPT_INTPARAM_BARTHREADS = _amplpy_copt_swig.COPT_INTPARAM_BARTHREADS
COPT_INTPARAM_SIMPLEXTHREADS = _amplpy_copt_swig.COPT_INTPARAM_SIMPLEXTHREADS
COPT_INTPARAM_CROSSOVERTHREADS = _amplpy_copt_swig.COPT_INTPARAM_CROSSOVERTHREADS
COPT_INTPARAM_CROSSOVER = _amplpy_copt_swig.COPT_INTPARAM_CROSSOVER
COPT_INTPARAM_SDPMETHOD = _amplpy_copt_swig.COPT_INTPARAM_SDPMETHOD
COPT_INTPARAM_IISMETHOD = _amplpy_copt_swig.COPT_INTPARAM_IISMETHOD
COPT_INTPARAM_FEASRELAXMODE = _amplpy_copt_swig.COPT_INTPARAM_FEASRELAXMODE
COPT_INTPARAM_MIPSTARTMODE = _amplpy_copt_swig.COPT_INTPARAM_MIPSTARTMODE
COPT_INTPARAM_MIPSTARTNODELIMIT = _amplpy_copt_swig.COPT_INTPARAM_MIPSTARTNODELIMIT
COPT_INTPARAM_TUNEMETHOD = _amplpy_copt_swig.COPT_INTPARAM_TUNEMETHOD
COPT_INTPARAM_TUNEMODE = _amplpy_copt_swig.COPT_INTPARAM_TUNEMODE
COPT_INTPARAM_TUNEMEASURE = _amplpy_copt_swig.COPT_INTPARAM_TUNEMEASURE
COPT_INTPARAM_TUNEPERMUTES = _amplpy_copt_swig.COPT_INTPARAM_TUNEPERMUTES
COPT_INTPARAM_TUNEOUTPUTLEVEL = _amplpy_copt_swig.COPT_INTPARAM_TUNEOUTPUTLEVEL
COPT_INTPARAM_LAZYCONSTRAINTS = _amplpy_copt_swig.COPT_INTPARAM_LAZYCONSTRAINTS
COPT_DBLATTR_SOLVINGTIME = _amplpy_copt_swig.COPT_DBLATTR_SOLVINGTIME
COPT_DBLATTR_OBJCONST = _amplpy_copt_swig.COPT_DBLATTR_OBJCONST
COPT_DBLATTR_LPOBJVAL = _amplpy_copt_swig.COPT_DBLATTR_LPOBJVAL
COPT_DBLATTR_BESTOBJ = _amplpy_copt_swig.COPT_DBLATTR_BESTOBJ
COPT_DBLATTR_BESTBND = _amplpy_copt_swig.COPT_DBLATTR_BESTBND
COPT_DBLATTR_BESTGAP = _amplpy_copt_swig.COPT_DBLATTR_BESTGAP
COPT_DBLATTR_FEASRELAXOBJ = _amplpy_copt_swig.COPT_DBLATTR_FEASRELAXOBJ
COPT_INTATTR_COLS = _amplpy_copt_swig.COPT_INTATTR_COLS
COPT_INTATTR_PSDCOLS = _amplpy_copt_swig.COPT_INTATTR_PSDCOLS
COPT_INTATTR_ROWS = _amplpy_copt_swig.COPT_INTATTR_ROWS
COPT_INTATTR_ELEMS = _amplpy_copt_swig.COPT_INTATTR_ELEMS
COPT_INTATTR_QELEMS = _amplpy_copt_swig.COPT_INTATTR_QELEMS
COPT_INTATTR_PSDELEMS = _amplpy_copt_swig.COPT_INTATTR_PSDELEMS
COPT_INTATTR_SYMMATS = _amplpy_copt_swig.COPT_INTATTR_SYMMATS
COPT_INTATTR_BINS = _amplpy_copt_swig.COPT_INTATTR_BINS
COPT_INTATTR_INTS = _amplpy_copt_swig.COPT_INTATTR_INTS
COPT_INTATTR_SOSS = _amplpy_copt_swig.COPT_INTATTR_SOSS
COPT_INTATTR_CONES = _amplpy_copt_swig.COPT_INTATTR_CONES
COPT_INTATTR_QCONSTRS = _amplpy_copt_swig.COPT_INTATTR_QCONSTRS
COPT_INTATTR_PSDCONSTRS = _amplpy_copt_swig.COPT_INTATTR_PSDCONSTRS
COPT_INTATTR_LMICONSTRS = _amplpy_copt_swig.COPT_INTATTR_LMICONSTRS
COPT_INTATTR_INDICATORS = _amplpy_copt_swig.COPT_INTATTR_INDICATORS
COPT_INTATTR_IISCOLS = _amplpy_copt_swig.COPT_INTATTR_IISCOLS
COPT_INTATTR_IISROWS = _amplpy_copt_swig.COPT_INTATTR_IISROWS
COPT_INTATTR_IISSOSS = _amplpy_copt_swig.COPT_INTATTR_IISSOSS
COPT_INTATTR_IISINDICATORS = _amplpy_copt_swig.COPT_INTATTR_IISINDICATORS
COPT_INTATTR_OBJSENSE = _amplpy_copt_swig.COPT_INTATTR_OBJSENSE
COPT_INTATTR_LPSTATUS = _amplpy_copt_swig.COPT_INTATTR_LPSTATUS
COPT_INTATTR_MIPSTATUS = _amplpy_copt_swig.COPT_INTATTR_MIPSTATUS
COPT_INTATTR_SIMPLEXITER = _amplpy_copt_swig.COPT_INTATTR_SIMPLEXITER
COPT_INTATTR_BARRIERITER = _amplpy_copt_swig.COPT_INTATTR_BARRIERITER
COPT_INTATTR_NODECNT = _amplpy_copt_swig.COPT_INTATTR_NODECNT
COPT_INTATTR_POOLSOLS = _amplpy_copt_swig.COPT_INTATTR_POOLSOLS
COPT_INTATTR_TUNERESULTS = _amplpy_copt_swig.COPT_INTATTR_TUNERESULTS
COPT_INTATTR_HASLPSOL = _amplpy_copt_swig.COPT_INTATTR_HASLPSOL
COPT_INTATTR_HASDUALFARKAS = _amplpy_copt_swig.COPT_INTATTR_HASDUALFARKAS
COPT_INTATTR_HASPRIMALRAY = _amplpy_copt_swig.COPT_INTATTR_HASPRIMALRAY
COPT_INTATTR_HASBASIS = _amplpy_copt_swig.COPT_INTATTR_HASBASIS
COPT_INTATTR_HASMIPSOL = _amplpy_copt_swig.COPT_INTATTR_HASMIPSOL
COPT_INTATTR_HASQOBJ = _amplpy_copt_swig.COPT_INTATTR_HASQOBJ
COPT_INTATTR_HASPSDOBJ = _amplpy_copt_swig.COPT_INTATTR_HASPSDOBJ
COPT_INTATTR_HASIIS = _amplpy_copt_swig.COPT_INTATTR_HASIIS
COPT_INTATTR_HASFEASRELAXSOL = _amplpy_copt_swig.COPT_INTATTR_HASFEASRELAXSOL
COPT_INTATTR_ISMIP = _amplpy_copt_swig.COPT_INTATTR_ISMIP
COPT_INTATTR_ISMINIIS = _amplpy_copt_swig.COPT_INTATTR_ISMINIIS
COPT_DBLINFO_OBJ = _amplpy_copt_swig.COPT_DBLINFO_OBJ
COPT_DBLINFO_LB = _amplpy_copt_swig.COPT_DBLINFO_LB
COPT_DBLINFO_UB = _amplpy_copt_swig.COPT_DBLINFO_UB
COPT_DBLINFO_VALUE = _amplpy_copt_swig.COPT_DBLINFO_VALUE
COPT_DBLINFO_SLACK = _amplpy_copt_swig.COPT_DBLINFO_SLACK
COPT_DBLINFO_DUAL = _amplpy_copt_swig.COPT_DBLINFO_DUAL
COPT_DBLINFO_REDCOST = _amplpy_copt_swig.COPT_DBLINFO_REDCOST
COPT_DBLINFO_DUALFARKAS = _amplpy_copt_swig.COPT_DBLINFO_DUALFARKAS
COPT_DBLINFO_PRIMALRAY = _amplpy_copt_swig.COPT_DBLINFO_PRIMALRAY
COPT_DBLINFO_RELAXLB = _amplpy_copt_swig.COPT_DBLINFO_RELAXLB
COPT_DBLINFO_RELAXUB = _amplpy_copt_swig.COPT_DBLINFO_RELAXUB
COPT_DBLINFO_RELAXVALUE = _amplpy_copt_swig.COPT_DBLINFO_RELAXVALUE
COPT_CLIENT_CLUSTER = _amplpy_copt_swig.COPT_CLIENT_CLUSTER
COPT_CLIENT_FLOATING = _amplpy_copt_swig.COPT_CLIENT_FLOATING
COPT_CLIENT_PASSWORD = _amplpy_copt_swig.COPT_CLIENT_PASSWORD
COPT_CLIENT_PORT = _amplpy_copt_swig.COPT_CLIENT_PORT
COPT_CLIENT_PRIORITY = _amplpy_copt_swig.COPT_CLIENT_PRIORITY
COPT_CLIENT_WAITTIME = _amplpy_copt_swig.COPT_CLIENT_WAITTIME
COPT_CLIENT_WEBSERVER = _amplpy_copt_swig.COPT_CLIENT_WEBSERVER
COPT_CLIENT_WEBLICENSEID = _amplpy_copt_swig.COPT_CLIENT_WEBLICENSEID
COPT_CLIENT_WEBACCESSKEY = _amplpy_copt_swig.COPT_CLIENT_WEBACCESSKEY
COPT_CLIENT_WEBTOKENDURATION = _amplpy_copt_swig.COPT_CLIENT_WEBTOKENDURATION

def COPT_GetBanner(buff, buffSize):
    return _amplpy_copt_swig.COPT_GetBanner(buff, buffSize)

def COPT_GetRetcodeMsg(code, buff, buffSize):
    return _amplpy_copt_swig.COPT_GetRetcodeMsg(code, buff, buffSize)

def COPT_CreateEnvConfig(p_config):
    return _amplpy_copt_swig.COPT_CreateEnvConfig(p_config)

def COPT_DeleteEnvConfig(p_config):
    return _amplpy_copt_swig.COPT_DeleteEnvConfig(p_config)

def COPT_SetEnvConfig(config, name, value):
    return _amplpy_copt_swig.COPT_SetEnvConfig(config, name, value)

def COPT_CreateEnv(p_env):
    return _amplpy_copt_swig.COPT_CreateEnv(p_env)

def COPT_CreateEnvWithPath(licDir, p_env):
    return _amplpy_copt_swig.COPT_CreateEnvWithPath(licDir, p_env)

def COPT_CreateEnvWithConfig(config, p_env):
    return _amplpy_copt_swig.COPT_CreateEnvWithConfig(config, p_env)

def COPT_DeleteEnv(p_env):
    return _amplpy_copt_swig.COPT_DeleteEnv(p_env)

def COPT_GetLicenseMsg(env, buff, buffSize):
    return _amplpy_copt_swig.COPT_GetLicenseMsg(env, buff, buffSize)

def COPT_CreateProb(env, p_prob):
    return _amplpy_copt_swig.COPT_CreateProb(env, p_prob)

def COPT_CreateCopy(src_prob, p_dst_prob):
    return _amplpy_copt_swig.COPT_CreateCopy(src_prob, p_dst_prob)

def COPT_DeleteProb(p_prob):
    return _amplpy_copt_swig.COPT_DeleteProb(p_prob)

def COPT_LoadProb(prob, nCol, nRow, iObjSense, dObjConst, colObj, colMatBeg, colMatCnt, colMatIdx, colMatElem, colType, colLower, colUpper, rowSense, rowBound, rowUpper, colNames, rowNames):
    return _amplpy_copt_swig.COPT_LoadProb(prob, nCol, nRow, iObjSense, dObjConst, colObj, colMatBeg, colMatCnt, colMatIdx, colMatElem, colType, colLower, colUpper, rowSense, rowBound, rowUpper, colNames, rowNames)

def COPT_AddCol(prob, dColObj, nColMatCnt, colMatIdx, colMatElem, cColType, dColLower, dColUpper, colName):
    return _amplpy_copt_swig.COPT_AddCol(prob, dColObj, nColMatCnt, colMatIdx, colMatElem, cColType, dColLower, dColUpper, colName)

def COPT_AddPSDCol(prob, colDim, name):
    return _amplpy_copt_swig.COPT_AddPSDCol(prob, colDim, name)

def COPT_AddRow(prob, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound, dRowUpper, rowName):
    return _amplpy_copt_swig.COPT_AddRow(prob, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound, dRowUpper, rowName)

def COPT_AddCols(prob, nAddCol, colObj, colMatBeg, colMatCnt, colMatIdx, colMatElem, colType, colLower, colUpper, colNames):
    return _amplpy_copt_swig.COPT_AddCols(prob, nAddCol, colObj, colMatBeg, colMatCnt, colMatIdx, colMatElem, colType, colLower, colUpper, colNames)

def COPT_AddPSDCols(prob, nAddCol, colDims, names):
    return _amplpy_copt_swig.COPT_AddPSDCols(prob, nAddCol, colDims, names)

def COPT_AddRows(prob, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowBound, rowUpper, rowNames):
    return _amplpy_copt_swig.COPT_AddRows(prob, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowBound, rowUpper, rowNames)

def COPT_AddLazyConstr(prob, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound, dRowUpper, rowName):
    return _amplpy_copt_swig.COPT_AddLazyConstr(prob, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound, dRowUpper, rowName)

def COPT_AddLazyConstrs(prob, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowBound, rowUpper, rowNames):
    return _amplpy_copt_swig.COPT_AddLazyConstrs(prob, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowBound, rowUpper, rowNames)

def COPT_AddUserCut(prob, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound, dRowUpper, rowName):
    return _amplpy_copt_swig.COPT_AddUserCut(prob, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound, dRowUpper, rowName)

def COPT_AddUserCuts(prob, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowBound, rowUpper, rowNames):
    return _amplpy_copt_swig.COPT_AddUserCuts(prob, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowBound, rowUpper, rowNames)

def COPT_AddSOSs(prob, nAddSOS, sosType, sosMatBeg, sosMatCnt, sosMatIdx, sosMatWt):
    return _amplpy_copt_swig.COPT_AddSOSs(prob, nAddSOS, sosType, sosMatBeg, sosMatCnt, sosMatIdx, sosMatWt)

def COPT_AddCones(prob, nAddCone, coneType, coneBeg, coneCnt, coneIdx):
    return _amplpy_copt_swig.COPT_AddCones(prob, nAddCone, coneType, coneBeg, coneCnt, coneIdx)

def COPT_AddQConstr(prob, nRowMatCnt, rowMatIdx, rowMatElem, nQMatCnt, qMatRow, qMatCol, qMatElem, cRowsense, dRowBound, name):
    return _amplpy_copt_swig.COPT_AddQConstr(prob, nRowMatCnt, rowMatIdx, rowMatElem, nQMatCnt, qMatRow, qMatCol, qMatElem, cRowsense, dRowBound, name)

def COPT_AddPSDConstr(prob, nRowMatCnt, rowMatIdx, rowMatElem, nColCnt, psdColIdx, symMatIdx, cRowSense, dRowBound, dRowUpper, name):
    return _amplpy_copt_swig.COPT_AddPSDConstr(prob, nRowMatCnt, rowMatIdx, rowMatElem, nColCnt, psdColIdx, symMatIdx, cRowSense, dRowBound, dRowUpper, name)

def COPT_AddLMIConstr(prob, nDim, nLMIMatCnt, colIdx, symMatIdx, constMatIdx, name):
    return _amplpy_copt_swig.COPT_AddLMIConstr(prob, nDim, nLMIMatCnt, colIdx, symMatIdx, constMatIdx, name)

def COPT_AddIndicator(prob, binColIdx, binColVal, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound):
    return _amplpy_copt_swig.COPT_AddIndicator(prob, binColIdx, binColVal, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound)

def COPT_GetCols(prob, nCol, list, colMatBeg, colMatCnt, colMatIdx, colMatElem, nElemSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetCols(prob, nCol, list, colMatBeg, colMatCnt, colMatIdx, colMatElem, nElemSize, pReqSize)

def COPT_GetPSDCols(prob, nCol, list, colDims, colLens):
    return _amplpy_copt_swig.COPT_GetPSDCols(prob, nCol, list, colDims, colLens)

def COPT_GetRows(prob, nRow, list, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, nElemSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetRows(prob, nRow, list, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, nElemSize, pReqSize)

def COPT_GetSOSs(prob, nSos, list, sosType, sosMatBeg, sosMatCnt, sosMatIdx, sosMatWt, nElemSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetSOSs(prob, nSos, list, sosType, sosMatBeg, sosMatCnt, sosMatIdx, sosMatWt, nElemSize, pReqSize)

def COPT_GetCones(prob, nCone, list, coneType, coneBeg, coneCnt, coneIdx, nElemSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetCones(prob, nCone, list, coneType, coneBeg, coneCnt, coneIdx, nElemSize, pReqSize)

def COPT_GetQConstr(prob, qConstrIdx, qMatRow, qMatCol, qMatElem, nQElemSize, pQReqSize, rowMatIdx, rowMatElem, cRowSense, dRowBound, nElemSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetQConstr(prob, qConstrIdx, qMatRow, qMatCol, qMatElem, nQElemSize, pQReqSize, rowMatIdx, rowMatElem, cRowSense, dRowBound, nElemSize, pReqSize)

def COPT_GetPSDConstr(prob, psdConstrIdx, psdColIdx, symMatIdx, nColSize, pColReqSize, rowMatIdx, rowMatElem, dRowLower, dRowUpper, nElemSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetPSDConstr(prob, psdConstrIdx, psdColIdx, symMatIdx, nColSize, pColReqSize, rowMatIdx, rowMatElem, dRowLower, dRowUpper, nElemSize, pReqSize)

def COPT_GetLMIConstr(prob, lmiConstrIdx, nDim, nLMILen, colIdx, symMatIdx, constMatIdx, nElemSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetLMIConstr(prob, lmiConstrIdx, nDim, nLMILen, colIdx, symMatIdx, constMatIdx, nElemSize, pReqSize)

def COPT_GetIndicator(prob, rowIdx, binColIdx, binColVal, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound, nElemSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetIndicator(prob, rowIdx, binColIdx, binColVal, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowBound, nElemSize, pReqSize)

def COPT_GetElem(prob, iCol, iRow, p_elem):
    return _amplpy_copt_swig.COPT_GetElem(prob, iCol, iRow, p_elem)

def COPT_SetElem(prob, iCol, iRow, newElem):
    return _amplpy_copt_swig.COPT_SetElem(prob, iCol, iRow, newElem)

def COPT_SetElems(prob, nelem, cols, rows, elems):
    return _amplpy_copt_swig.COPT_SetElems(prob, nelem, cols, rows, elems)

def COPT_GetPSDElem(prob, iCol, iRow, p_idx):
    return _amplpy_copt_swig.COPT_GetPSDElem(prob, iCol, iRow, p_idx)

def COPT_SetPSDElem(prob, iCol, iRow, newIdx):
    return _amplpy_copt_swig.COPT_SetPSDElem(prob, iCol, iRow, newIdx)

def COPT_GetLMIElem(prob, iCol, iRow, p_idx):
    return _amplpy_copt_swig.COPT_GetLMIElem(prob, iCol, iRow, p_idx)

def COPT_SetLMIElem(prob, iCol, iRow, newIdx):
    return _amplpy_copt_swig.COPT_SetLMIElem(prob, iCol, iRow, newIdx)

def COPT_DelCols(prob, num, list):
    return _amplpy_copt_swig.COPT_DelCols(prob, num, list)

def COPT_DelPSDCols(prob, num, list):
    return _amplpy_copt_swig.COPT_DelPSDCols(prob, num, list)

def COPT_DelRows(prob, num, list):
    return _amplpy_copt_swig.COPT_DelRows(prob, num, list)

def COPT_DelSOSs(prob, num, list):
    return _amplpy_copt_swig.COPT_DelSOSs(prob, num, list)

def COPT_DelCones(prob, num, list):
    return _amplpy_copt_swig.COPT_DelCones(prob, num, list)

def COPT_DelQConstrs(prob, num, list):
    return _amplpy_copt_swig.COPT_DelQConstrs(prob, num, list)

def COPT_DelPSDConstrs(prob, num, list):
    return _amplpy_copt_swig.COPT_DelPSDConstrs(prob, num, list)

def COPT_DelLMIConstrs(prob, num, list):
    return _amplpy_copt_swig.COPT_DelLMIConstrs(prob, num, list)

def COPT_DelIndicators(prob, num, list):
    return _amplpy_copt_swig.COPT_DelIndicators(prob, num, list)

def COPT_SetQuadObj(prob, num, qRow, qCol, qElem):
    return _amplpy_copt_swig.COPT_SetQuadObj(prob, num, qRow, qCol, qElem)

def COPT_GetQuadObj(prob, p_nQElem, qRow, qCol, qElem):
    return _amplpy_copt_swig.COPT_GetQuadObj(prob, p_nQElem, qRow, qCol, qElem)

def COPT_DelQuadObj(prob):
    return _amplpy_copt_swig.COPT_DelQuadObj(prob)

def COPT_SetPSDObj(prob, iCol, newIdx):
    return _amplpy_copt_swig.COPT_SetPSDObj(prob, iCol, newIdx)

def COPT_GetPSDObj(prob, iCol, p_idx):
    return _amplpy_copt_swig.COPT_GetPSDObj(prob, iCol, p_idx)

def COPT_DelPSDObj(prob):
    return _amplpy_copt_swig.COPT_DelPSDObj(prob)

def COPT_AddSymMat(prob, ndim, nelem, rows, cols, elems):
    return _amplpy_copt_swig.COPT_AddSymMat(prob, ndim, nelem, rows, cols, elems)

def COPT_GetSymMat(prob, iMat, p_nDim, p_nElem, rows, cols, elems):
    return _amplpy_copt_swig.COPT_GetSymMat(prob, iMat, p_nDim, p_nElem, rows, cols, elems)

def COPT_SetObjSense(prob, iObjSense):
    return _amplpy_copt_swig.COPT_SetObjSense(prob, iObjSense)

def COPT_SetObjConst(prob, dObjConst):
    return _amplpy_copt_swig.COPT_SetObjConst(prob, dObjConst)

def COPT_SetColObj(prob, num, list, obj):
    return _amplpy_copt_swig.COPT_SetColObj(prob, num, list, obj)

def COPT_SetColType(prob, num, list, type):
    return _amplpy_copt_swig.COPT_SetColType(prob, num, list, type)

def COPT_SetColLower(prob, num, list, lower):
    return _amplpy_copt_swig.COPT_SetColLower(prob, num, list, lower)

def COPT_SetColUpper(prob, num, list, upper):
    return _amplpy_copt_swig.COPT_SetColUpper(prob, num, list, upper)

def COPT_SetColNames(prob, num, list, names):
    return _amplpy_copt_swig.COPT_SetColNames(prob, num, list, names)

def COPT_SetRowLower(prob, num, list, lower):
    return _amplpy_copt_swig.COPT_SetRowLower(prob, num, list, lower)

def COPT_SetRowUpper(prob, num, list, upper):
    return _amplpy_copt_swig.COPT_SetRowUpper(prob, num, list, upper)

def COPT_SetRowNames(prob, num, list, names):
    return _amplpy_copt_swig.COPT_SetRowNames(prob, num, list, names)

def COPT_SetQConstrSense(prob, num, list, sense):
    return _amplpy_copt_swig.COPT_SetQConstrSense(prob, num, list, sense)

def COPT_SetQConstrRhs(prob, num, list, rhs):
    return _amplpy_copt_swig.COPT_SetQConstrRhs(prob, num, list, rhs)

def COPT_SetQConstrNames(prob, num, list, names):
    return _amplpy_copt_swig.COPT_SetQConstrNames(prob, num, list, names)

def COPT_SetPSDConstrLower(prob, num, list, lower):
    return _amplpy_copt_swig.COPT_SetPSDConstrLower(prob, num, list, lower)

def COPT_SetPSDConstrUpper(prob, num, list, upper):
    return _amplpy_copt_swig.COPT_SetPSDConstrUpper(prob, num, list, upper)

def COPT_SetPSDConstrNames(prob, num, list, names):
    return _amplpy_copt_swig.COPT_SetPSDConstrNames(prob, num, list, names)

def COPT_SetLMIConstrRhs(prob, num, list, newIdx):
    return _amplpy_copt_swig.COPT_SetLMIConstrRhs(prob, num, list, newIdx)

def COPT_SetLMIConstrNames(prob, num, list, names):
    return _amplpy_copt_swig.COPT_SetLMIConstrNames(prob, num, list, names)

def COPT_ReplaceColObj(prob, num, list, obj):
    return _amplpy_copt_swig.COPT_ReplaceColObj(prob, num, list, obj)

def COPT_ReplacePSDObj(prob, num, list, idx):
    return _amplpy_copt_swig.COPT_ReplacePSDObj(prob, num, list, idx)

def COPT_ReadMps(prob, mpsfilename):
    return _amplpy_copt_swig.COPT_ReadMps(prob, mpsfilename)

def COPT_ReadLp(prob, lpfilename):
    return _amplpy_copt_swig.COPT_ReadLp(prob, lpfilename)

def COPT_ReadSDPA(prob, sdpafilename):
    return _amplpy_copt_swig.COPT_ReadSDPA(prob, sdpafilename)

def COPT_ReadCbf(prob, cbffilename):
    return _amplpy_copt_swig.COPT_ReadCbf(prob, cbffilename)

def COPT_ReadBin(prob, binfilename):
    return _amplpy_copt_swig.COPT_ReadBin(prob, binfilename)

def COPT_ReadSol(prob, solfilename):
    return _amplpy_copt_swig.COPT_ReadSol(prob, solfilename)

def COPT_ReadBasis(prob, basfilename):
    return _amplpy_copt_swig.COPT_ReadBasis(prob, basfilename)

def COPT_ReadMst(prob, mstfilename):
    return _amplpy_copt_swig.COPT_ReadMst(prob, mstfilename)

def COPT_ReadParam(prob, parfilename):
    return _amplpy_copt_swig.COPT_ReadParam(prob, parfilename)

def COPT_ReadParamStr(prob, strParam):
    return _amplpy_copt_swig.COPT_ReadParamStr(prob, strParam)

def COPT_ReadTune(prob, tunefilename):
    return _amplpy_copt_swig.COPT_ReadTune(prob, tunefilename)

def COPT_WriteMps(prob, mpsfilename):
    return _amplpy_copt_swig.COPT_WriteMps(prob, mpsfilename)

def COPT_WriteLp(prob, lpfilename):
    return _amplpy_copt_swig.COPT_WriteLp(prob, lpfilename)

def COPT_WriteCbf(prob, cbffilename):
    return _amplpy_copt_swig.COPT_WriteCbf(prob, cbffilename)

def COPT_WriteBin(prob, binfilename):
    return _amplpy_copt_swig.COPT_WriteBin(prob, binfilename)

def COPT_WriteIIS(prob, iisfilename):
    return _amplpy_copt_swig.COPT_WriteIIS(prob, iisfilename)

def COPT_WriteRelax(prob, relaxfilename):
    return _amplpy_copt_swig.COPT_WriteRelax(prob, relaxfilename)

def COPT_WriteSol(prob, solfilename):
    return _amplpy_copt_swig.COPT_WriteSol(prob, solfilename)

def COPT_WritePoolSol(prob, iSol, solfilename):
    return _amplpy_copt_swig.COPT_WritePoolSol(prob, iSol, solfilename)

def COPT_WriteBasis(prob, basfilename):
    return _amplpy_copt_swig.COPT_WriteBasis(prob, basfilename)

def COPT_WriteMst(prob, mstfilename):
    return _amplpy_copt_swig.COPT_WriteMst(prob, mstfilename)

def COPT_WriteParam(prob, parfilename):
    return _amplpy_copt_swig.COPT_WriteParam(prob, parfilename)

def COPT_WriteTuneParam(prob, idx, parfilename):
    return _amplpy_copt_swig.COPT_WriteTuneParam(prob, idx, parfilename)

def COPT_WriteMpsStr(prob, str, nStrSize, pReqSize):
    return _amplpy_copt_swig.COPT_WriteMpsStr(prob, str, nStrSize, pReqSize)

def COPT_WriteParamStr(prob, str, nStrSize, pReqSize):
    return _amplpy_copt_swig.COPT_WriteParamStr(prob, str, nStrSize, pReqSize)

def COPT_AddMipStart(prob, num, list, colVal):
    return _amplpy_copt_swig.COPT_AddMipStart(prob, num, list, colVal)

def COPT_SolveLp(prob):
    return _amplpy_copt_swig.COPT_SolveLp(prob)

def COPT_Solve(prob):
    return _amplpy_copt_swig.COPT_Solve(prob)

def COPT_ComputeIIS(prob):
    return _amplpy_copt_swig.COPT_ComputeIIS(prob)

def COPT_FeasRelax(prob, colLowPen, colUppPen, rowBndPen, rowUppPen):
    return _amplpy_copt_swig.COPT_FeasRelax(prob, colLowPen, colUppPen, rowBndPen, rowUppPen)

def COPT_Tune(prob):
    return _amplpy_copt_swig.COPT_Tune(prob)

def COPT_LoadTuneParam(prob, idx):
    return _amplpy_copt_swig.COPT_LoadTuneParam(prob, idx)

def COPT_GetSolution(prob, colVal):
    return _amplpy_copt_swig.COPT_GetSolution(prob, colVal)

def COPT_GetLpSolution(prob, value, slack, rowDual, redCost):
    return _amplpy_copt_swig.COPT_GetLpSolution(prob, value, slack, rowDual, redCost)

def COPT_SetLpSolution(prob, value, slack, rowDual, redCost):
    return _amplpy_copt_swig.COPT_SetLpSolution(prob, value, slack, rowDual, redCost)

def COPT_GetBasis(prob, colBasis, rowBasis):
    return _amplpy_copt_swig.COPT_GetBasis(prob, colBasis, rowBasis)

def COPT_SetBasis(prob, colBasis, rowBasis):
    return _amplpy_copt_swig.COPT_SetBasis(prob, colBasis, rowBasis)

def COPT_SetSlackBasis(prob):
    return _amplpy_copt_swig.COPT_SetSlackBasis(prob)

def COPT_GetPoolObjVal(prob, iSol, p_objVal):
    return _amplpy_copt_swig.COPT_GetPoolObjVal(prob, iSol, p_objVal)

def COPT_GetPoolSolution(prob, iSol, num, list, colVal):
    return _amplpy_copt_swig.COPT_GetPoolSolution(prob, iSol, num, list, colVal)

def COPT_SetIntParam(prob, paramName, intParam):
    return _amplpy_copt_swig.COPT_SetIntParam(prob, paramName, intParam)

def COPT_GetIntParam(prob, paramName, p_intParam):
    return _amplpy_copt_swig.COPT_GetIntParam(prob, paramName, p_intParam)

def COPT_GetIntParamDef(prob, paramName, p_intParam):
    return _amplpy_copt_swig.COPT_GetIntParamDef(prob, paramName, p_intParam)

def COPT_GetIntParamMin(prob, paramName, p_intParam):
    return _amplpy_copt_swig.COPT_GetIntParamMin(prob, paramName, p_intParam)

def COPT_GetIntParamMax(prob, paramName, p_intParam):
    return _amplpy_copt_swig.COPT_GetIntParamMax(prob, paramName, p_intParam)

def COPT_SetDblParam(prob, paramName, dblParam):
    return _amplpy_copt_swig.COPT_SetDblParam(prob, paramName, dblParam)

def COPT_GetDblParam(prob, paramName, p_dblParam):
    return _amplpy_copt_swig.COPT_GetDblParam(prob, paramName, p_dblParam)

def COPT_GetDblParamDef(prob, paramName, p_dblParam):
    return _amplpy_copt_swig.COPT_GetDblParamDef(prob, paramName, p_dblParam)

def COPT_GetDblParamMin(prob, paramName, p_dblParam):
    return _amplpy_copt_swig.COPT_GetDblParamMin(prob, paramName, p_dblParam)

def COPT_GetDblParamMax(prob, paramName, p_dblParam):
    return _amplpy_copt_swig.COPT_GetDblParamMax(prob, paramName, p_dblParam)

def COPT_ResetParam(prob):
    return _amplpy_copt_swig.COPT_ResetParam(prob)

def COPT_Reset(prob, iClearAll):
    return _amplpy_copt_swig.COPT_Reset(prob, iClearAll)

def COPT_GetIntAttr(prob, attrName, p_intAttr):
    return _amplpy_copt_swig.COPT_GetIntAttr(prob, attrName, p_intAttr)

def COPT_GetDblAttr(prob, attrName, p_dblAttr):
    return _amplpy_copt_swig.COPT_GetDblAttr(prob, attrName, p_dblAttr)

def COPT_GetColIdx(prob, colName, p_iCol):
    return _amplpy_copt_swig.COPT_GetColIdx(prob, colName, p_iCol)

def COPT_GetPSDColIdx(prob, psdColName, p_iPSDCol):
    return _amplpy_copt_swig.COPT_GetPSDColIdx(prob, psdColName, p_iPSDCol)

def COPT_GetRowIdx(prob, rowName, p_iRow):
    return _amplpy_copt_swig.COPT_GetRowIdx(prob, rowName, p_iRow)

def COPT_GetQConstrIdx(prob, qConstrName, p_iQConstr):
    return _amplpy_copt_swig.COPT_GetQConstrIdx(prob, qConstrName, p_iQConstr)

def COPT_GetPSDConstrIdx(prob, psdConstrName, p_iPSDConstr):
    return _amplpy_copt_swig.COPT_GetPSDConstrIdx(prob, psdConstrName, p_iPSDConstr)

def COPT_GetLMIConstrIdx(prob, lmiConstrName, p_iLMIConstr):
    return _amplpy_copt_swig.COPT_GetLMIConstrIdx(prob, lmiConstrName, p_iLMIConstr)

def COPT_GetColInfo(prob, infoName, num, list, info):
    return _amplpy_copt_swig.COPT_GetColInfo(prob, infoName, num, list, info)

def COPT_GetPSDColInfo(prob, infoName, iCol, info):
    return _amplpy_copt_swig.COPT_GetPSDColInfo(prob, infoName, iCol, info)

def COPT_GetRowInfo(prob, infoName, num, list, info):
    return _amplpy_copt_swig.COPT_GetRowInfo(prob, infoName, num, list, info)

def COPT_GetQConstrInfo(prob, infoName, num, list, info):
    return _amplpy_copt_swig.COPT_GetQConstrInfo(prob, infoName, num, list, info)

def COPT_GetPSDConstrInfo(prob, infoName, num, list, info):
    return _amplpy_copt_swig.COPT_GetPSDConstrInfo(prob, infoName, num, list, info)

def COPT_GetLMIConstrInfo(prob, infoName, iLMI, info):
    return _amplpy_copt_swig.COPT_GetLMIConstrInfo(prob, infoName, iLMI, info)

def COPT_GetColType(prob, num, list, type):
    return _amplpy_copt_swig.COPT_GetColType(prob, num, list, type)

def COPT_GetColBasis(prob, num, list, colBasis):
    return _amplpy_copt_swig.COPT_GetColBasis(prob, num, list, colBasis)

def COPT_GetRowBasis(prob, num, list, rowBasis):
    return _amplpy_copt_swig.COPT_GetRowBasis(prob, num, list, rowBasis)

def COPT_GetQConstrSense(prob, num, list, sense):
    return _amplpy_copt_swig.COPT_GetQConstrSense(prob, num, list, sense)

def COPT_GetQConstrRhs(prob, num, list, rhs):
    return _amplpy_copt_swig.COPT_GetQConstrRhs(prob, num, list, rhs)

def COPT_GetLMIConstrRhs(prob, num, list, constMatIdx):
    return _amplpy_copt_swig.COPT_GetLMIConstrRhs(prob, num, list, constMatIdx)

def COPT_GetColLowerIIS(prob, num, list, colLowerIIS):
    return _amplpy_copt_swig.COPT_GetColLowerIIS(prob, num, list, colLowerIIS)

def COPT_GetColUpperIIS(prob, num, list, colUpperIIS):
    return _amplpy_copt_swig.COPT_GetColUpperIIS(prob, num, list, colUpperIIS)

def COPT_GetRowLowerIIS(prob, num, list, rowLowerIIS):
    return _amplpy_copt_swig.COPT_GetRowLowerIIS(prob, num, list, rowLowerIIS)

def COPT_GetRowUpperIIS(prob, num, list, rowUpperIIS):
    return _amplpy_copt_swig.COPT_GetRowUpperIIS(prob, num, list, rowUpperIIS)

def COPT_GetSOSIIS(prob, num, list, sosIIS):
    return _amplpy_copt_swig.COPT_GetSOSIIS(prob, num, list, sosIIS)

def COPT_GetIndicatorIIS(prob, num, list, indicatorIIS):
    return _amplpy_copt_swig.COPT_GetIndicatorIIS(prob, num, list, indicatorIIS)

def COPT_GetColName(prob, iCol, buff, buffSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetColName(prob, iCol, buff, buffSize, pReqSize)

def COPT_GetPSDColName(prob, iPSDCol, buff, buffSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetPSDColName(prob, iPSDCol, buff, buffSize, pReqSize)

def COPT_GetRowName(prob, iRow, buff, buffSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetRowName(prob, iRow, buff, buffSize, pReqSize)

def COPT_GetQConstrName(prob, iQConstr, buff, buffSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetQConstrName(prob, iQConstr, buff, buffSize, pReqSize)

def COPT_GetPSDConstrName(prob, iPSDConstr, buff, buffSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetPSDConstrName(prob, iPSDConstr, buff, buffSize, pReqSize)

def COPT_GetLMIConstrName(prob, iLMIConstr, buff, buffSize, pReqSize):
    return _amplpy_copt_swig.COPT_GetLMIConstrName(prob, iLMIConstr, buff, buffSize, pReqSize)

def COPT_SetLogFile(prob, logfilename):
    return _amplpy_copt_swig.COPT_SetLogFile(prob, logfilename)

def COPT_GetCallbackInfo(cbdata, cbinfo, p_val):
    return _amplpy_copt_swig.COPT_GetCallbackInfo(cbdata, cbinfo, p_val)

def COPT_AddCallbackSolution(cbdata, sol, p_objval):
    return _amplpy_copt_swig.COPT_AddCallbackSolution(cbdata, sol, p_objval)

def COPT_AddCallbackUserCut(cbdata, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowRhs):
    return _amplpy_copt_swig.COPT_AddCallbackUserCut(cbdata, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowRhs)

def COPT_AddCallbackUserCuts(cbdata, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowRhs):
    return _amplpy_copt_swig.COPT_AddCallbackUserCuts(cbdata, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowRhs)

def COPT_AddCallbackLazyConstr(cbdata, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowRhs):
    return _amplpy_copt_swig.COPT_AddCallbackLazyConstr(cbdata, nRowMatCnt, rowMatIdx, rowMatElem, cRowSense, dRowRhs)

def COPT_AddCallbackLazyConstrs(cbdata, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowRhs):
    return _amplpy_copt_swig.COPT_AddCallbackLazyConstrs(cbdata, nAddRow, rowMatBeg, rowMatCnt, rowMatIdx, rowMatElem, rowSense, rowRhs)

def COPT_Interrupt(prob):
    return _amplpy_copt_swig.COPT_Interrupt(prob)
class CoptCallback(BaseCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CoptCallback:
            _self = None
        else:
            _self = self
        _amplpy_copt_swig.CoptCallback_swiginit(self, _amplpy_copt_swig.new_CoptCallback(_self, ))

    def run(self):
        return _amplpy_copt_swig.CoptCallback_run(self)

    def getWhereString(self):
        return _amplpy_copt_swig.CoptCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_copt_swig.CoptCallback_getMessage(self)

    def getObj(self):
        return _amplpy_copt_swig.CoptCallback_getObj(self)

    def getCBData(self):
        return _amplpy_copt_swig.CoptCallback_getCBData(self)

    def getCOPTModel(self):
        return _amplpy_copt_swig.CoptCallback_getCOPTModel(self)

    def terminate(self):
        return _amplpy_copt_swig.CoptCallback_terminate(self)

    def getDouble(self, cbinfo):
        return _amplpy_copt_swig.CoptCallback_getDouble(self, cbinfo)

    def setSolution(self, x):
        return _amplpy_copt_swig.CoptCallback_setSolution(self, x)

    def get(self, what):
        return _amplpy_copt_swig.CoptCallback_get(self, what)

    def setHeuristicSolution(self, nvars, indices, values):
        return _amplpy_copt_swig.CoptCallback_setHeuristicSolution(self, nvars, indices, values)

    def getValueArray(self, v):
        return _amplpy_copt_swig.CoptCallback_getValueArray(self, v)
    __swig_destroy__ = _amplpy_copt_swig.delete_CoptCallback
    def __disown__(self):
        self.this.disown()
        _amplpy_copt_swig.disown_CoptCallback(self)
        return weakref.proxy(self)

    def getValueImpl(self, v):
        return _amplpy_copt_swig.CoptCallback_getValueImpl(self, v)

# Register CoptCallback in _amplpy_copt_swig:
_amplpy_copt_swig.CoptCallback_swigregister(CoptCallback)
class CoptDrv(SolverDriverCopt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpy_copt_swig.delete_CoptDrv

    def __init__(self):
        _amplpy_copt_swig.CoptDrv_swiginit(self, _amplpy_copt_swig.new_CoptDrv())

# Register CoptDrv in _amplpy_copt_swig:
_amplpy_copt_swig.CoptDrv_swigregister(CoptDrv)
class CoptModel(AMPLMPModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def enableLazyConstraints(self):
        return _amplpy_copt_swig.CoptModel_enableLazyConstraints(self)

    def __init__(self, *args):
        _amplpy_copt_swig.CoptModel_swiginit(self, _amplpy_copt_swig.new_CoptModel(*args))

    def getSolutionVector(self):
        return _amplpy_copt_swig.CoptModel_getSolutionVector(self)

    def driver(self):
        return _amplpy_copt_swig.CoptModel_driver(self)

    def getStatus(self):
        return _amplpy_copt_swig.CoptModel_getStatus(self)

    def isMIP(self):
        return _amplpy_copt_swig.CoptModel_isMIP(self)

    def getNumVars(self):
        return _amplpy_copt_swig.CoptModel_getNumVars(self)

    def getNumCons(self):
        return _amplpy_copt_swig.CoptModel_getNumCons(self)

    def getObj(self):
        return _amplpy_copt_swig.CoptModel_getObj(self)

    def getSolution(self, first, length, sol):
        return _amplpy_copt_swig.CoptModel_getSolution(self, first, length, sol)

    def error(self, code):
        return _amplpy_copt_swig.CoptModel_error(self, code)

    def infinity(self):
        return _amplpy_copt_swig.CoptModel_infinity(self)

    def getIntAttr(self, name):
        return _amplpy_copt_swig.CoptModel_getIntAttr(self, name)

    def getDoubleAttr(self, name):
        return _amplpy_copt_swig.CoptModel_getDoubleAttr(self, name)

    def getIntParam(self, name):
        return _amplpy_copt_swig.CoptModel_getIntParam(self, name)

    def getDoubleParam(self, name):
        return _amplpy_copt_swig.CoptModel_getDoubleParam(self, name)

    def setParam(self, *args):
        return _amplpy_copt_swig.CoptModel_setParam(self, *args)

    def getCOPTmodel(self):
        return _amplpy_copt_swig.CoptModel_getCOPTmodel(self)
    __swig_destroy__ = _amplpy_copt_swig.delete_CoptModel

    def setAMPLParameter(self, *args):
        return _amplpy_copt_swig.CoptModel_setAMPLParameter(self, *args)

    def getAMPLIntParameter(self, params):
        return _amplpy_copt_swig.CoptModel_getAMPLIntParameter(self, params)

    def getAMPLDoubleParameter(self, params):
        return _amplpy_copt_swig.CoptModel_getAMPLDoubleParameter(self, params)

    def getAMPLIntAttribute(self, attrib):
        return _amplpy_copt_swig.CoptModel_getAMPLIntAttribute(self, attrib)

    def getAMPLDoubleAttribute(self, attrib):
        return _amplpy_copt_swig.CoptModel_getAMPLDoubleAttribute(self, attrib)

    def addConstraintImpl(self, name, numnz, vars, coefficients, sense, rhs):
        return _amplpy_copt_swig.CoptModel_addConstraintImpl(self, name, numnz, vars, coefficients, sense, rhs)

    def addVariableImpl(self, name, numnz, cons, coefficients, lb, ub, objcoeff, type):
        return _amplpy_copt_swig.CoptModel_addVariableImpl(self, name, numnz, cons, coefficients, lb, ub, objcoeff, type)

    def getConstraintsValueImpl(self, *args):
        return _amplpy_copt_swig.CoptModel_getConstraintsValueImpl(self, *args)

    def getVarsValueImpl(self, offset, length):
        return _amplpy_copt_swig.CoptModel_getVarsValueImpl(self, offset, length)

# Register CoptModel in _amplpy_copt_swig:
_amplpy_copt_swig.CoptModel_swigregister(CoptModel)

from enum import Enum
def to_enum(enumclasses : list):
    skip = ['acquire', 'append', 'disown', 'next', 'own', 'this', 'thisown']
    for enumclass in enumclasses:
        env = {name : value for name,value in vars(enumclass).items() 
               if name not in skip and not name.startswith('__')}
        globals()[enumclass.__name__]=Enum(enumclass.__name__, env)

to_enum([Status, SolverAttributes, SolverParams, LPAlgorithms, Where, CanDo, Value, CutDirection])

# clean up the namespace
del to_enum  


def __e_to_v(v):
  if isinstance(v, Enum): return v.value
  return v

def __var_to_v(v):
    if v.type == 0:
        return v.str
    if v.type == 1:
        return v.integer
    if v.type == 2:
        return v.dbl
    raise RuntimeError("Should not happen")


def _do_get_value(self, what):
    v = self._getValue(__e_to_v(what))
    return __var_to_v(v)

def _do_can_do(self, func):
  return self._canDo(__e_to_v(func))

def do_addCut(self, vars, coeffs, direction, rhs):
    return self._addCut(vars, coeffs, __e_to_v(direction), rhs)
def do_addLazy(self, vars, coeffs, direction, rhs):
    return self._addLazy(vars, coeffs, __e_to_v(direction), rhs)
def do_addCutIndices(self, nvars, coeffs, direction, rhs):
    return self._addCutIndices(nvars, coeffs, __e_to_v(direction), rhs)
def do_addLazyIndices(self, nvars, coeffs, direction, rhs):
    return self._addLazyIndices(nvars, coeffs, __e_to_v(direction), rhs)

AMPLModel.get_solution_dict = AMPLModel.getSolutionDict
BaseCallback.get_solution_dict= BaseCallback.getSolutionDict

# Note: do not override getValue, as it is 
# also called from the cpp routines
#BaseCallback._getValue=BaseCallback.getValue
GenericCallback._getValue=GenericCallback.getValue
GenericCallback.getValue=_do_get_value
GenericCallback.get_value=_do_get_value

GenericCallback._canDo=GenericCallback.canDo
GenericCallback.canDo=_do_can_do
GenericCallback.can_do=_do_can_do

GenericCallback._getAMPLWhere=GenericCallback.getAMPLWhere
GenericCallback.get_ampl_where=lambda self : Where(self._getAMPLWhere())
GenericCallback.getAMPLWhere=lambda self : Where(self._getAMPLWhere())

GenericCallback._addLazy=GenericCallback.addLazy
GenericCallback._addCut=GenericCallback.addCut
GenericCallback._addLazyIndices=GenericCallback.addLazyIndices
GenericCallback._addCutIndices=GenericCallback.addCutIndices
GenericCallback.addLazy= do_addLazy
GenericCallback.addCut= do_addCut
GenericCallback.addCutIndices= do_addCutIndices
GenericCallback.addLazyIndices= do_addLazyIndices
GenericCallback.add_lazy= do_addLazy
GenericCallback.add_cut= do_addCut
GenericCallback.add_cut_indices= do_addCutIndices
GenericCallback.add_lazy_indices= do_addLazyIndices

BaseCallback._addLazy=BaseCallback.addLazy
BaseCallback._addCut=BaseCallback.addCut
BaseCallback._addLazyIndices=BaseCallback.addLazyIndices
BaseCallback._addCutIndices=BaseCallback.addCutIndices
BaseCallback.addLazy= do_addLazy
BaseCallback.addCut= do_addCut
BaseCallback.addCutIndices= do_addCutIndices
BaseCallback.addLazyIndices= do_addLazyIndices
BaseCallback.add_lazy= do_addLazy
BaseCallback.add_cut= do_addCut
BaseCallback.add_cut_indices= do_addCutIndices
BaseCallback.add_lazy_indices= do_addLazyIndices

def do_addConstraint(self, vars, coeffs, direction, rhs, name=""):
    return self._addConstraint(vars, coeffs, __e_to_v(direction), rhs, name)

AMPLModel._addConstraint = AMPLModel.addConstraint
AMPLModel.addConstraint = do_addConstraint
AMPLModel.add_constraint = do_addConstraint

# The following are used in common-python-overrides.i
def __get_ampl_parameter(self, param):
    if param.name.startswith('DBL'):
        return self.getAMPLDoubleParameter(__e_to_v(param))
    v = self.getAMPLIntParameter(__e_to_v(param))
    if param == SolverParams.INT_LP_Algorithm:
        return LPAlgorithms(v)
    return v

def __get_ampl_attribute(self, param):
    if param.name.startswith('DBL'):
        return self.getAMPLDoubleAttribute(__e_to_v(param))
    return self.getAMPLIntAttribute(__e_to_v(param))

def __setAMPLParameter(self, what, value):
    self._setAMPLParameter(__e_to_v(what.value), value)




# The functions are defined in common-python-overrides.i
# Call update_common.sh to update them in all solvers

AMPLModel._getStatus=AMPLModel.getStatus
AMPLModel.getStatus=lambda self : Status(self._getStatus())
AMPLModel.get_status=lambda self : Status(self._getStatus())

AMPLModel._setAMPLParameter=AMPLModel.setAMPLParameter
AMPLModel.set_ampl_parameter=__setAMPLParameter
AMPLModel.setAMPLParameter=__setAMPLParameter

AMPLModel.getAMPLParameter=__get_ampl_parameter
AMPLModel.get_ampl_parameter=__get_ampl_parameter

AMPLModel.get_ampl_attribute=__get_ampl_attribute
AMPLModel.getAMPLAttribute=__get_ampl_attribute

BaseCallback._canDo=BaseCallback.canDo
BaseCallback.canDo=_do_can_do
BaseCallback.can_do=_do_can_do

BaseCallback._getAMPLWhere=BaseCallback.getAMPLWhere
BaseCallback.get_ampl_where=lambda self : Where(self._getAMPLWhere())
BaseCallback.getAMPLWhere=lambda self : Where(self._getAMPLWhere())



# The functions are defined in common-python-overrides.i
# Call update_common.sh to update them in all solvers

CoptModel._getStatus=CoptModel.getStatus
CoptModel.getStatus=lambda self : Status(self._getStatus())
CoptModel.get_status=lambda self : Status(self._getStatus())

CoptModel._setAMPLParameter=CoptModel.setAMPLParameter
CoptModel.set_ampl_parameter=__setAMPLParameter
CoptModel.setAMPLParameter=__setAMPLParameter

CoptModel.getAMPLParameter=__get_ampl_parameter
CoptModel.get_ampl_parameter=__get_ampl_parameter

CoptModel.get_ampl_attribute=__get_ampl_attribute
CoptModel.getAMPLAttribute=__get_ampl_attribute

CoptCallback._canDo=CoptCallback.canDo
CoptCallback.canDo=_do_can_do
CoptCallback.can_do=_do_can_do

CoptCallback._getAMPLWhere=CoptCallback.getAMPLWhere
CoptCallback.get_ampl_where=lambda self : Where(self._getAMPLWhere())
CoptCallback.getAMPLWhere=lambda self : Where(self._getAMPLWhere())


