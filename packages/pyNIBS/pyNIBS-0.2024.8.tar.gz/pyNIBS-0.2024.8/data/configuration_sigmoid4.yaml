########################################################################################################################
# This configuration file can be used to set values in pynibs.Element() that influence the regression.                 #
# The values in this version are optimized for MEP data.                                                     #
########################################################################################################################
#
#
############################################## General regression concept ##############################################
# While trying to find the best fit, many possible regression functions are calculated and the best one is picked.
# Usually, that is the one that explains the most noise, meaning that the data points have a minimal distance to the
# regression function. The function sigmoid4 always looks like the following term, with varying coefficients:
##     y = y_0 + \frac{amp - y_0}{1+e^{-r(x-x_0)}}
##     (x0 : Horizontal shift along the abscissa)
##     (r : Slope parameter (steepness))
##     (amp : Maximum value the sigmoid converges to)
##     (y0 : Offset value of the sigmoid)
# Note: The fourth parameter y0 is the only difference between sigmoid and sigmoid4. It presents the possibility to
# factor in an offset in y-direction.

# The usual regression approach is to start with a function described by some initial values (init_vals) and try out
# many other values within the value limits (limits), minimizing the distance between regression function and real data.
# During refitting, different initial vales (calculated within the random_vals_init_range) are used to see whether a
# better result can be achieved.

element_params:
  ############################################### Picking suitable values ################################################
  # Values transforming the initial regression coefficients:
  init_vals:
    x0: # set initial x_0 to rate p of the x-data range
      p: 0.75
    r: # slope of tangent over middle of 1/p of the e-range (e.g. 25% = 0.25 = 1/4 -> set p=4)
      p: 4
    amp: # amp = y_max * m + t
      m: 1
      t: 0
    y0: # y0 = y_min * m + t
      m: 1
      t: 0
  # Strategy: Pick the values you may expect the result to have, or that are not far-fetched. Picking reasonable initial
  # values can speed up the fitting procedure.

  # Values that limit all possible regression coefficients:
  limits:
    limit_factor: # the initial values get multiplied with "limit_factor" to calculate the limits
      100
    y0: # y0 \in [c, y_max * m]
      c: 1.0e-12
      m: 1
  # Strategy: Rather wide range recommended, since a few points could have very extreme values and therefore be
  # approximated by a function very different from the expected values. E.g. a multiple of the presented data range.
  # (Note: This should not be used to factor out outliers, since an approximation will still be calculated, but with too
  # narrow limits it will just be a very bad one.)

  # Value range for the calculation of new initial values for refits:
  random_vals_init_range:
    range_factor: # the initial values get multiplied with "range_factor" to calculate this range
      3
  # Strategy: During refitting, new initial values are calculated by picking a random number between these lower and upper
  # bounds, so the range should be a lot smaller than 'limits' and somewhat symmetrical around the 'init_vals'.


  # Example usage:
  ##
  ##        configfile = configuration_sigmoid4.yaml
  ##        with open(configfile, "r") as yamlfile:
  ##            config = yaml.load(yamlfile, Loader=yaml.FullLoader)
  ##
  ##        pynibs.regress_data(...,
  ##                           **configfile)