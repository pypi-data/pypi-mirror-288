{"version":3,"file":"xPu5VC_h.js","mappings":";;AAmDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;AC/EA;;AAGA;AACA;;;;;AAKA;AA3CA;;;;AAgDA;;AAKA;AACA;AACA;;;;AAIA;AACA;;;AAGA;;AAGA;;AAGA;AAMA;;;;AAKA;AACA;;AAGA;AACA;AACA;AACA;;;;AAMA;;;;;;;;;;;;;;;AAwCA;;AClFA;;AAGA;ACqBA;AACA;AACA;;AAMA;AACA;AAGA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHA;;ACpHA;;AAEA;;AAIA;;AAyCA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;AAIA;;AA8CA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;AAEA;;;;;AA3BA;;;;;;;;;;;;;;AAuDA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-button-menu.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-icon-overflow-menu.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-state-icon.ts","webpack://knx-frontend/./src/components/knx-project-tree-view.ts","webpack://knx-frontend/./src/views/entities_view.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"BOTTOM_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @property({ type: Boolean, attribute: \"no-anchor\" }) public noAnchor = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (mainWindow.document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this.noAnchor ? null : this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-button-menu\";\nimport \"./ha-icon-button\";\nimport \"./ha-list-item\";\nimport \"./ha-svg-icon\";\n\nexport interface IconOverflowMenuItem {\n  [key: string]: any;\n  path: string;\n  label: string;\n  narrowOnly?: boolean;\n  disabled?: boolean;\n  tooltip?: string;\n  action: () => any;\n  warning?: boolean;\n  divider?: boolean;\n}\n\n@customElement(\"ha-icon-overflow-menu\")\nexport class HaIconOverflowMenu extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Array }) public items: IconOverflowMenuItem[] = [];\n\n  @property({ type: Boolean }) public narrow = false;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.narrow\n        ? html` <!-- Collapsed representation for small screens -->\n            <ha-button-menu\n              @click=${this._handleIconOverflowMenuOpened}\n              @closed=${this._handleIconOverflowMenuClosed}\n              class=\"ha-icon-overflow-menu-overflow\"\n              absolute\n            >\n              <ha-icon-button\n                .label=${this.hass.localize(\"ui.common.overflow_menu\")}\n                .path=${mdiDotsVertical}\n                slot=\"trigger\"\n              ></ha-icon-button>\n\n              ${this.items.map((item) =>\n                item.divider\n                  ? html`<li divider role=\"separator\"></li>`\n                  : html`<ha-list-item\n                      graphic=\"icon\"\n                      ?disabled=${item.disabled}\n                      @click=${item.action}\n                      class=${classMap({ warning: Boolean(item.warning) })}\n                    >\n                      <div slot=\"graphic\">\n                        <ha-svg-icon\n                          class=${classMap({ warning: Boolean(item.warning) })}\n                          .path=${item.path}\n                        ></ha-svg-icon>\n                      </div>\n                      ${item.label}\n                    </ha-list-item> `\n              )}\n            </ha-button-menu>`\n        : html`\n            <!-- Icon representation for big screens -->\n            ${this.items.map((item) =>\n              item.narrowOnly\n                ? \"\"\n                : item.divider\n                  ? html`<div role=\"separator\"></div>`\n                  : html`<div>\n                      ${item.tooltip\n                        ? html`<simple-tooltip\n                            animation-delay=\"0\"\n                            position=\"left\"\n                          >\n                            ${item.tooltip}\n                          </simple-tooltip>`\n                        : \"\"}\n                      <ha-icon-button\n                        @click=${item.action}\n                        .label=${item.label}\n                        .path=${item.path}\n                        ?disabled=${item.disabled}\n                      ></ha-icon-button>\n                    </div> `\n            )}\n          `}\n    `;\n  }\n\n  protected _handleIconOverflowMenuOpened(e) {\n    e.stopPropagation();\n    // If this component is used inside a data table, the z-index of the row\n    // needs to be increased. Otherwise the ha-button-menu would be displayed\n    // underneath the next row in the table.\n    const row = this.closest(\".mdc-data-table__row\") as HTMLDivElement | null;\n    if (row) {\n      row.style.zIndex = \"1\";\n    }\n  }\n\n  protected _handleIconOverflowMenuClosed() {\n    const row = this.closest(\".mdc-data-table__row\") as HTMLDivElement | null;\n    if (row) {\n      row.style.zIndex = \"\";\n    }\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: flex;\n          justify-content: flex-end;\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n        div[role=\"separator\"] {\n          border-right: 1px solid var(--divider-color);\n          width: 1px;\n        }\n        ha-list-item[disabled] ha-svg-icon {\n          color: var(--disabled-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-overflow-menu\": HaIconOverflowMenu;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { DEFAULT_DOMAIN_ICON, FIXED_DOMAIN_ICONS } from \"../common/const\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { entityIcon } from \"../data/icons\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public stateValue?: string;\n\n  @property() public icon?: string;\n\n  protected render() {\n    const overrideIcon =\n      this.icon ||\n      (this.stateObj && this.hass?.entities[this.stateObj.entity_id]?.icon) ||\n      this.stateObj?.attributes.icon;\n    if (overrideIcon) {\n      return html`<ha-icon .icon=${overrideIcon}></ha-icon>`;\n    }\n    if (!this.stateObj) {\n      return nothing;\n    }\n    if (!this.hass) {\n      return this._renderFallback();\n    }\n    const icon = entityIcon(this.hass, this.stateObj, this.stateValue).then(\n      (icn) => {\n        if (icn) {\n          return html`<ha-icon .icon=${icn}></ha-icon>`;\n        }\n        return this._renderFallback();\n      }\n    );\n    return html`${until(icon)}`;\n  }\n\n  private _renderFallback() {\n    const domain = computeStateDomain(this.stateObj!);\n\n    return html`\n      <ha-svg-icon\n        .path=${FIXED_DOMAIN_ICONS[domain] || DEFAULT_DOMAIN_ICON}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, nothing, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\n\nimport { GroupRange, KNXProject } from \"../types/websocket\";\nimport { KNXLogger } from \"../tools/knx-logger\";\n\nconst logger = new KNXLogger(\"knx-project-tree-view\");\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"knx-group-range-selection-changed\": GroupRangeSelectionChangedEvent;\n  }\n}\n\nexport interface GroupRangeSelectionChangedEvent {\n  groupAddresses: string[];\n}\n\ninterface RangeInfo {\n  selected: boolean;\n  groupAddresses: string[];\n}\n\n@customElement(\"knx-project-tree-view\")\nexport class KNXProjectTreeView extends LitElement {\n  @property({ attribute: false }) data!: KNXProject;\n\n  @property({ attribute: false }) multiselect = false;\n\n  @state() private _selectableRanges: { [key: string]: RangeInfo } = {};\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    const initSelectableRanges = (data: { [key: string]: GroupRange }) => {\n      Object.entries(data).forEach(([key, groupRange]) => {\n        if (groupRange.group_addresses.length > 0) {\n          this._selectableRanges[key] = {\n            selected: false,\n            groupAddresses: groupRange.group_addresses,\n          };\n        }\n        initSelectableRanges(groupRange.group_ranges);\n      });\n    };\n    initSelectableRanges(this.data.group_ranges);\n    logger.debug(\"ranges\", this._selectableRanges);\n  }\n\n  protected render(): TemplateResult {\n    return html`<div class=\"ha-tree-view\">${this._recurseData(this.data.group_ranges)}</div>`;\n  }\n\n  protected _recurseData(data: { [key: string]: GroupRange }, level: number = 0): TemplateResult {\n    const childTemplates = Object.entries(data).map(([key, groupRange]) => {\n      const hasSubRange = Object.keys(groupRange.group_ranges).length > 0;\n      const empty = !(hasSubRange || groupRange.group_addresses.length > 0);\n      if (empty) {\n        return nothing;\n      }\n      const selectable = key in this._selectableRanges;\n      const selected = selectable ? this._selectableRanges[key].selected : false;\n      const rangeClasses = {\n        \"range-item\": true,\n        \"root-range\": level === 0,\n        \"sub-range\": level > 0,\n        selectable: selectable,\n        \"selected-range\": selected,\n        \"non-selected-range\": selectable && !selected,\n      };\n      const rangeContent = html`<div\n        class=${classMap(rangeClasses)}\n        toggle-range=${selectable ? key : nothing}\n        @click=${selectable\n          ? this.multiselect\n            ? this._selectionChangedMulti\n            : this._selectionChangedSingle\n          : nothing}\n      >\n        <span class=\"range-key\">${key}</span>\n        <span class=\"range-text\">${groupRange.name}</span>\n      </div>`;\n\n      if (hasSubRange) {\n        const groupClasses = {\n          \"root-group\": level === 0,\n          \"sub-group\": level !== 0,\n        };\n        return html`<div class=${classMap(groupClasses)}>\n          ${rangeContent} ${this._recurseData(groupRange.group_ranges, level + 1)}\n        </div>`;\n      }\n\n      return html`${rangeContent}`;\n    });\n    return html`${childTemplates}`;\n  }\n\n  private _selectionChangedMulti(ev) {\n    const rangeKey = (ev.target as Element).getAttribute(\"toggle-range\")!;\n    this._selectableRanges[rangeKey].selected = !this._selectableRanges[rangeKey].selected;\n    this._selectionUpdate();\n    this.requestUpdate();\n  }\n\n  private _selectionChangedSingle(ev) {\n    const rangeKey = (ev.target as Element).getAttribute(\"toggle-range\")!;\n    const rangePreviouslySelected = this._selectableRanges[rangeKey].selected;\n    Object.values(this._selectableRanges).forEach((rangeInfo) => {\n      rangeInfo.selected = false;\n    });\n    this._selectableRanges[rangeKey].selected = !rangePreviouslySelected;\n    this._selectionUpdate();\n    this.requestUpdate();\n  }\n\n  private _selectionUpdate() {\n    const _gaOfSelectedRanges = Object.values(this._selectableRanges).reduce(\n      (result, rangeInfo) =>\n        rangeInfo.selected ? result.concat(rangeInfo.groupAddresses) : result,\n      [] as string[],\n    );\n    logger.debug(\"selection changed\", _gaOfSelectedRanges);\n    fireEvent(this, \"knx-group-range-selection-changed\", { groupAddresses: _gaOfSelectedRanges });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        margin: 0;\n        height: 100%;\n        overflow-y: scroll;\n        overflow-x: hidden;\n        background-color: var(--card-background-color);\n      }\n\n      .ha-tree-view {\n        cursor: default;\n      }\n\n      .root-group {\n        margin-bottom: 8px;\n      }\n\n      .root-group > * {\n        padding-top: 5px;\n        padding-bottom: 5px;\n      }\n\n      .range-item {\n        display: block;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        font-size: 0.875rem;\n      }\n\n      .range-item > * {\n        vertical-align: middle;\n        pointer-events: none;\n      }\n\n      .range-key {\n        color: var(--text-primary-color);\n        font-size: 0.75rem;\n        font-weight: 700;\n        background-color: var(--label-badge-grey);\n        border-radius: 4px;\n        padding: 1px 4px;\n        margin-right: 2px;\n      }\n\n      .root-range {\n        padding-left: 8px;\n        font-weight: 500;\n        background-color: var(--secondary-background-color);\n\n        & .range-key {\n          color: var(--primary-text-color);\n          background-color: var(--card-background-color);\n        }\n      }\n\n      .sub-range {\n        padding-left: 13px;\n      }\n\n      .selectable {\n        cursor: pointer;\n      }\n\n      .selectable:hover {\n        background-color: rgba(var(--rgb-primary-text-color), 0.04);\n      }\n\n      .selected-range {\n        background-color: rgba(var(--rgb-primary-color), 0.12);\n\n        & .range-key {\n          background-color: var(--primary-color);\n        }\n      }\n\n      .selected-range:hover {\n        background-color: rgba(var(--rgb-primary-color), 0.07);\n      }\n\n      .non-selected-range {\n        background-color: var(--card-background-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-project-tree-view\": KNXProjectTreeView;\n  }\n}\n","import { mdiDelete, mdiInformationSlabCircleOutline, mdiPlus, mdiPencilOutline } from \"@mdi/js\";\nimport { LitElement, TemplateResult, html, css } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\n\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport memoize from \"memoize-one\";\n\nimport \"@ha/layouts/hass-loading-screen\";\nimport \"@ha/layouts/hass-tabs-subpage\";\nimport \"@ha/components/ha-card\";\nimport \"@ha/components/ha-fab\";\nimport \"@ha/components/ha-icon-button\";\nimport \"@ha/components/ha-icon-overflow-menu\";\nimport \"@ha/components/ha-state-icon\";\nimport \"@ha/components/ha-svg-icon\";\nimport \"@ha/components/data-table/ha-data-table\";\nimport { navigate } from \"@ha/common/navigate\";\nimport { mainWindow } from \"@ha/common/dom/get_main_window\";\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport type { DataTableColumnContainer } from \"@ha/components/data-table/ha-data-table\";\nimport { AreaRegistryEntry } from \"@ha/data/area_registry\";\nimport { ExtEntityRegistryEntry } from \"@ha/data/entity_registry\";\nimport { showAlertDialog, showConfirmationDialog } from \"@ha/dialogs/generic/show-dialog-box\";\nimport type { PageNavigation } from \"@ha/layouts/hass-tabs-subpage\";\nimport { HomeAssistant, Route } from \"@ha/types\";\n\nimport \"../components/knx-project-tree-view\";\n\nimport { getEntityEntries, deleteEntity } from \"../services/websocket.service\";\nimport { KNX } from \"../types/knx\";\nimport { KNXLogger } from \"../tools/knx-logger\";\n\nconst logger = new KNXLogger(\"knx-entities-view\");\n\nexport interface EntityRow extends ExtEntityRegistryEntry {\n  entityState?: HassEntity;\n  area?: AreaRegistryEntry;\n}\n\n@customElement(\"knx-entities-view\")\nexport class KNXEntitiesView extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public knx!: KNX;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Object }) public route?: Route;\n\n  @property({ type: Array, reflect: false }) public tabs!: PageNavigation[];\n\n  @state() private knx_entities: EntityRow[] = [];\n\n  @state() private filterDevice: string | null = null;\n\n  protected firstUpdated() {\n    this._fetchEntities();\n  }\n\n  protected willUpdate() {\n    const urlParams = new URLSearchParams(mainWindow.location.search);\n    this.filterDevice = urlParams.get(\"device_id\");\n  }\n\n  private async _fetchEntities() {\n    getEntityEntries(this.hass)\n      .then((entries) => {\n        logger.debug(`Fetched ${entries.length} entity entries.`);\n        this.knx_entities = entries.map((entry) => {\n          const entityState = this.hass.states[entry.entity_id];\n          const device = entry.device_id ? this.hass.devices[entry.device_id] : undefined;\n          const areaId = entry.area_id ?? device?.area_id;\n          const area = areaId ? this.hass.areas[areaId] : undefined;\n          return {\n            ...entry,\n            entityState,\n            area,\n          };\n        });\n      })\n      .catch((err) => {\n        logger.error(\"getEntityEntries\", err);\n        navigate(\"/knx/error\", { replace: true, data: err });\n      });\n  }\n\n  private _columns = memoize((_narrow, _language): DataTableColumnContainer<EntityRow> => {\n    const iconWidth = \"56px\";\n    const actionWidth = \"176px\"; // 48px*3 + 16px*2 padding\n    const textColumnWith = `calc((100% - ${iconWidth} - ${actionWidth}) / 4)`;\n\n    return {\n      icon: {\n        title: \"\",\n        width: iconWidth,\n        type: \"icon\",\n        template: (entry) => html`\n          <ha-state-icon\n            title=${ifDefined(entry.entityState?.state)}\n            slot=\"item-icon\"\n            .state=${entry.entityState}\n          ></ha-state-icon>\n        `,\n      },\n      friendly_name: {\n        filterable: true,\n        sortable: true,\n        title: \"Friendly Name\",\n        width: textColumnWith,\n        template: (entry) => entry.entityState?.attributes.friendly_name ?? \"\",\n      },\n      entity_id: {\n        filterable: true,\n        sortable: true,\n        title: \"Entity ID\",\n        width: textColumnWith,\n        // template: (entry) => entry.entity_id,\n      },\n      device: {\n        filterable: true,\n        sortable: true,\n        title: \"Device\",\n        width: textColumnWith,\n        template: (entry) =>\n          entry.device_id ? (this.hass.devices[entry.device_id].name ?? \"\") : \"\",\n      },\n      device_id: {\n        hidden: true, // for filtering only\n        title: \"Device ID\",\n        filterable: true,\n        template: (entry) => entry.device_id ?? \"\",\n      },\n      area: {\n        title: \"Area\",\n        sortable: true,\n        filterable: true,\n        width: textColumnWith,\n        template: (entry) => entry.area?.name ?? \"\",\n      },\n      actions: {\n        title: \"\",\n        width: actionWidth,\n        type: \"icon-button\",\n        template: (entry) => html`\n          <ha-icon-button\n            .label=${\"More info\"}\n            .path=${mdiInformationSlabCircleOutline}\n            .entityEntry=${entry}\n            @click=${this._entityMoreInfo}\n          ></ha-icon-button>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.common.edit\")}\n            .path=${mdiPencilOutline}\n            .entityEntry=${entry}\n            @click=${this._entityEdit}\n          ></ha-icon-button>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.common.delete\")}\n            .path=${mdiDelete}\n            .entityEntry=${entry}\n            @click=${this._entityDelete}\n          ></ha-icon-button>\n        `,\n      },\n    };\n  });\n\n  private _entityEdit = (ev: Event) => {\n    ev.stopPropagation();\n    const entry = ev.target.entityEntry as EntityRow;\n    navigate(\"/knx/entities/edit/\" + entry.entity_id);\n  };\n\n  private _entityMoreInfo = (ev: Event) => {\n    ev.stopPropagation();\n    const entry = ev.target.entityEntry as EntityRow;\n    fireEvent(mainWindow.document.querySelector(\"home-assistant\")!, \"hass-more-info\", {\n      entityId: entry.entity_id,\n    });\n  };\n\n  private _entityDelete = (ev: Event) => {\n    ev.stopPropagation();\n    const entry = ev.target.entityEntry as EntityRow;\n    showConfirmationDialog(this, {\n      text: `${this.hass.localize(\"ui.common.delete\")} ${entry.entity_id}?`,\n    }).then((confirmed) => {\n      if (confirmed) {\n        deleteEntity(this.hass, entry.entity_id)\n          .then(() => {\n            logger.debug(\"entity deleted\", entry.entity_id);\n            this._fetchEntities();\n          })\n          .catch((err: any) => {\n            showAlertDialog(this, {\n              title: \"Deletion failed\",\n              text: err,\n            });\n          });\n      }\n    });\n  };\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.knx_entities) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow!}\n        .route=${this.route!}\n        .tabs=${this.tabs}\n        .localizeFunc=${this.knx.localize}\n      >\n        <div class=\"sections\">\n          <ha-data-table\n            class=\"entity-table\"\n            .hass=${this.hass}\n            .columns=${this._columns(this.narrow, this.hass.language)}\n            .data=${this.knx_entities}\n            .hasFab=${true}\n            .searchLabel=${this.hass.localize(\"ui.components.data-table.search\")}\n            .clickable=${false}\n            .filter=${this.filterDevice}\n          ></ha-data-table>\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.common.add\")}\n          extended\n          @click=${this._entityCreate}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _entityCreate() {\n    navigate(\"/knx/entities/create\");\n  }\n\n  static get styles() {\n    return css`\n      hass-loading-screen {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n      }\n      .sections {\n        display: flex;\n        flex-direction: row;\n        height: 100%;\n      }\n\n      .entity-table {\n        flex: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-entities-view\": KNXEntitiesView;\n  }\n}\n"],"names":[],"sourceRoot":""}