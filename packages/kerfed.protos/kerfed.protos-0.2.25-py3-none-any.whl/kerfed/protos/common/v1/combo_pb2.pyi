"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
combos.proto

Functions and messages supporting an e-commerce
workflow for things like invoices, shipping labels,
etc.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Combo(google.protobuf.message.Message):
    """
    A data structure which implements "aluminum-6061 comes
    in 0.25" or 0.5" thick and can be anodized these three colors"

    This is translated into the front-end inteface dropdown boxes.
    and should be transmitted to the client-side unredacted.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEYS_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """the combination of config.PartConfiguration keys
        Note that this is a nested data structure and in
        order to flatten it into a flat list keys alternate:
        `[material_id, steel_hrs, finish_id]`
        i.e. `material_id`, `finish_id`, etc.
        and thus *only an odd number of keys is valid.*
        """
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """i.e. `key=['material_id', 'steel_hrs', 'thickness']`
        then `values=[.0125, 0.25, 0.5, 1.0, 2.0]`
        """
    def __init__(
        self,
        *,
        keys: collections.abc.Iterable[builtins.str] | None = ...,
        values: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["keys", b"keys", "values", b"values"]) -> None: ...

global___Combo = Combo

@typing_extensions.final
class ComboDescription(google.protobuf.message.Message):
    """"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIG_ID_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    BLURB_FIELD_NUMBER: builtins.int
    COLOR_HEX_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    config_id: builtins.str
    """i.e. 'material_id'"""
    key: builtins.str
    """i.e. 'steel_hrs'"""
    label: builtins.str
    """a display name for this config key
    i.e. 'Steel Hot Rolled Sheet'
    """
    blurb: builtins.str
    """a note about more detail for this config option"""
    color_hex: builtins.str
    """a hex string for the color if applicable"""
    link: builtins.str
    """a web link for more information"""
    def __init__(
        self,
        *,
        config_id: builtins.str = ...,
        key: builtins.str = ...,
        label: builtins.str = ...,
        blurb: builtins.str = ...,
        color_hex: builtins.str = ...,
        link: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["blurb", b"blurb", "color_hex", b"color_hex", "config_id", b"config_id", "key", b"key", "label", b"label", "link", b"link"]) -> None: ...

global___ComboDescription = ComboDescription

@typing_extensions.final
class Combos(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMBOS_FIELD_NUMBER: builtins.int
    DESCRIPTIONS_FIELD_NUMBER: builtins.int
    @property
    def combos(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Combo]:
        """allowable configuration options"""
    @property
    def descriptions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ComboDescription]:
        """details about each configuration option"""
    def __init__(
        self,
        *,
        combos: collections.abc.Iterable[global___Combo] | None = ...,
        descriptions: collections.abc.Iterable[global___ComboDescription] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["combos", b"combos", "descriptions", b"descriptions"]) -> None: ...

global___Combos = Combos
