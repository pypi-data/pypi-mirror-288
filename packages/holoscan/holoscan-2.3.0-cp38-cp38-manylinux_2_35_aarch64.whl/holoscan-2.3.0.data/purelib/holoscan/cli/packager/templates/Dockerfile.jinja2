{#
    SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
    SPDX-License-Identifier: Apache-2.0

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
#}

{% if application_type == 'CppCMake' %}
FROM {{ build_image }} AS builder
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y jq

WORKDIR /src
COPY ./app/* /src

RUN mkdir -p /install/.cmake/api/v1/query/ && \
    touch /install/.cmake/api/v1/query/codemodel-v2
RUN cd /src && \
    cmake -S . -DHOLOHUB_DOWNLOAD_DATASETS=OFF {{ cmake_args }} -B /install && \
    cmake --build /install -j && \
    export OUTNAME=$(cat $(find /install/.cmake/api/v1/reply -type f | xargs grep -l "nameOnDisk") | jq -r '.nameOnDisk') && \
    cd /install && \
    if [ "${OUTNAME}" != "{{ command_filename }}" ]; then mv ./${OUTNAME} ./{{ command_filename }}; fi

RUN rm /install/CMakeCache.txt /install/Makefile /install/cmake_install.cmake && \
    rm -r /install/CMakeFiles/ /install/.cmake/
{% endif %}

FROM {{ base_image }}

ENV DEBIAN_FRONTEND=noninteractive
ENV TERM=xterm-256color

ARG UNAME
ARG UID
ARG GID

RUN mkdir -p /etc/holoscan/ \
        && mkdir -p /opt/holoscan/ \
        && mkdir -p {{ working_dir }} \
        && mkdir -p {{ app_dir }} \
        && mkdir -p {{ full_input_path }} \
        && mkdir -p {{ full_output_path }}

LABEL base="{{ base_image }}"
LABEL tag="{{ tag }}"
LABEL org.opencontainers.image.title="{{ title }}"
LABEL org.opencontainers.image.version="{{ version }}"
LABEL org.nvidia.holoscan="{{ holoscan_sdk_version }}"
{% if sdk_type == 'monai-deploy' %}
LABEL org.monai.deploy.app-sdk="{{ monai_deploy_app_sdk_version }}"
{% endif %}


ENV HOLOSCAN_ENABLE_HEALTH_CHECK=true
ENV HOLOSCAN_INPUT_PATH={{ full_input_path }}
ENV HOLOSCAN_OUTPUT_PATH={{ full_output_path }}
ENV HOLOSCAN_WORKDIR={{ working_dir }}
ENV HOLOSCAN_APPLICATION={{ app_dir }}
ENV HOLOSCAN_TIMEOUT={{ timeout }}
ENV HOLOSCAN_MODEL_PATH={{ models_dir }}
ENV HOLOSCAN_DOCS_PATH={{ docs_dir }}
ENV HOLOSCAN_CONFIG_PATH={{ config_file_path }}
ENV HOLOSCAN_APP_MANIFEST_PATH={{ app_json }}
ENV HOLOSCAN_PKG_MANIFEST_PATH={{ pkg_json }}
ENV HOLOSCAN_LOGS_PATH={{ logs_dir }}
ENV PATH=/root/.local/bin:/opt/nvidia/holoscan:$PATH
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/libtorch/1.13.1/lib/:/opt/nvidia/holoscan/lib

RUN apt-get update \
    && apt-get install -y curl jq \
    && rm -rf /var/lib/apt/lists/*

{% if application_type == 'PythonModule' or application_type == 'PythonFile' %}
ENV PYTHONPATH="{{ app_dir }}:$PYTHONPATH"
{% endif %}

{% if application_type == 'CppCMake' or application_type == 'Binary' %}
    {% if custom_base_image == True or custom_holoscan_sdk == True %}
# Update NV GPG repo key
# https://developer.nvidia.com/blog/updating-the-cuda-linux-gpg-repository-key/
RUN if [ $(uname -m) = "aarch64" ]; then ARCH=sbsa; else ARCH=x86_64; fi \
    && curl -OL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/$ARCH/cuda-keyring_1.0-1_all.deb \
    && dpkg -i cuda-keyring_1.0-1_all.deb

# Use user-specified Holoscan SDK Debian Package
COPY ./{{ holoscan_sdk_filename }} /tmp/{{ holoscan_sdk_filename }}
RUN apt-get update \
    && apt-get install -y /tmp/{{ holoscan_sdk_filename }} \
    && rm -rf /var/lib/apt/lists/*
    {% else %}
# Use embedded Holoscan SDK
{# no op here #}
    {% endif %}
{% endif %}

RUN groupadd -f -g $GID $UNAME
RUN useradd -rm -d /home/$UNAME -s /bin/bash -g $GID -G sudo -u $UID $UNAME
RUN chown -R holoscan {{ working_dir }}
RUN chown -R holoscan {{ full_input_path }}
RUN chown -R holoscan {{ full_output_path }}

# Set the working directory
WORKDIR {{ working_dir }}

# Copy HAP/MAP tool script
COPY ./tools {{ working_dir }}/tools
RUN chmod +x {{ working_dir }}/tools


# Copy gRPC health probe
{% if health_probe is defined %}

RUN curl -L -o /bin/grpc_health_probe {{ health_probe | pprint }} \
    && chmod +x /bin/grpc_health_probe && ls -l /bin/grpc_health_probe

HEALTHCHECK --interval=10s --timeout=1s \
    CMD /bin/grpc_health_probe -addr=:8777 || exit 1
{% endif %}

USER $UNAME

ENV PATH=/root/.local/bin:/home/holoscan/.local/bin:/opt/nvidia/holoscan:$PATH

{% if application_type == 'PythonModule' or application_type == 'PythonFile' %}
COPY ./pip/requirements.txt /tmp/requirements.txt

RUN pip install --upgrade pip
RUN pip install --no-cache-dir --user -r /tmp/requirements.txt

{#  Use Holoscan SDK in the image unless specified by the user.
For MONAI Deploy, the APP SDK will install it unless user specifies the Holoscan SDK file. #}
{% if sdk_type == 'holoscan' %}

    {% if custom_holoscan_sdk == True %}
# Copy user-specified Holoscan SDK wheel file
COPY ./{{ holoscan_sdk_filename }} /tmp/{{ holoscan_sdk_filename }}
RUN pip install /tmp/{{ holoscan_sdk_filename }}
    {% elif custom_base_image == True %}
# Install Holoscan SDK wheel from PyPI
RUN pip install holoscan=={{ holoscan_sdk_version }}
    {% else %}
# Use embedded Holoscan SDK
{# no op here #}
    {% endif %}
{% else %}
# MONAI Deploy

    {% if custom_monai_deploy_sdk %}
# Copy user-specified MONAI Deploy SDK file
COPY ./{{ monai_deploy_sdk_filename }} /tmp/{{ monai_deploy_sdk_filename }}
RUN pip install /tmp/{{ monai_deploy_sdk_filename }}
    {% else %}
# Install MONAI Deploy from PyPI org
RUN pip install monai-deploy-app-sdk=={{ monai_deploy_app_sdk_version }}
    {% endif %}

{% endif %}
{% endif %}

{% if models is defined %}
COPY ./models  {{ models_dir }}
{% endif %}

{%- if docs is defined %}
COPY ./docs  {{ docs_dir }}
{% endif %}

COPY ./map/app.json {{ app_json }}
COPY ./app.config {{ config_file_path }}
COPY ./map/pkg.json {{ pkg_json }}

{% if application_type == 'CppCMake' %}
COPY --from=builder /install {{ app_dir }}
{% else %}
COPY ./app {{ app_dir }}
{% endif %}

ENTRYPOINT ["/var/holoscan/tools"]
