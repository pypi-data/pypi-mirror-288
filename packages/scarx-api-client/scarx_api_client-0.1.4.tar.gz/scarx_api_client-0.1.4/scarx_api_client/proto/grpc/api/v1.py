# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: IpService.proto, LakGatewayService.proto, LakConfigurationService.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import AsyncGenerator, Dict, List, Optional

import betterproto
import grpclib


@dataclass
class SelfIpRequest(betterproto.Message):
    pass


@dataclass
class IpRequest(betterproto.Message):
    ip: str = betterproto.string_field(1)


@dataclass
class IpDetails(betterproto.Message):
    ip: str = betterproto.string_field(1)
    region: str = betterproto.string_field(2)
    country: str = betterproto.string_field(3)
    location: str = betterproto.string_field(4)
    postal: str = betterproto.string_field(5)
    country_name: str = betterproto.string_field(6)
    organization: str = betterproto.string_field(7)
    timezone: str = betterproto.string_field(8)


@dataclass
class LakGatewayInputMetadata(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    email: str = betterproto.string_field(2)
    password: str = betterproto.string_field(3)
    ip_id: str = betterproto.string_field(4)


@dataclass
class LakGatewayStatus(betterproto.Message):
    is_finished: bool = betterproto.bool_field(1)
    status: str = betterproto.string_field(2)
    progress: int = betterproto.int32_field(3)
    data: bytes = betterproto.bytes_field(4)


@dataclass
class LakGatewayInputEmpty(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)


@dataclass
class LakUnitIdToCount(betterproto.Message):
    lak_unit_id_to_count_mapping: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )


@dataclass
class LakPrimaryKeys(betterproto.Message):
    primary_key: List[int] = betterproto.int32_field(1)


@dataclass
class LakResourcesAndUnits(betterproto.Message):
    resources: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )
    units: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )


@dataclass
class LakGatewayInputHabitatActionUpgradeBuilding(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_granted: bool = betterproto.bool_field(2)
    habitat_id: int = betterproto.int32_field(3)
    primary_key: int = betterproto.int32_field(4)


@dataclass
class LakGatewayInputHabitatActionUpgradeBuildings(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_amount: int = betterproto.int32_field(2)
    habitat_ids_to_building_primary_keys: Dict[int, "LakPrimaryKeys"] = (
        betterproto.map_field(3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass
class LakGatewayInputHabitatActionResearchKnowledge(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_granted: bool = betterproto.bool_field(2)
    habitat_id: int = betterproto.int32_field(3)
    primary_key: int = betterproto.int32_field(4)


@dataclass
class LakGatewayInputHabitatActionBatchUnitOrder(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_amount: int = betterproto.int32_field(2)
    habitat_ids_to_unit_id_to_count: Dict[int, "LakUnitIdToCount"] = (
        betterproto.map_field(3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass
class LakGatewayInputMarketActionTradeResourcesForHabitatDictionary(
    betterproto.Message
):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    wanted_resource_id: int = betterproto.int32_field(2)
    habitat_ids_to_resource_and_units: Dict[int, "LakResourcesAndUnits"] = (
        betterproto.map_field(3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass
class ConfigurationInput(betterproto.Message):
    email: str = betterproto.string_field(1)
    salt: str = betterproto.string_field(2)


@dataclass
class LakIosDeviceConfiguration(betterproto.Message):
    email: str = betterproto.string_field(1)
    salt: str = betterproto.string_field(2)
    device_id: str = betterproto.string_field(3)
    device_group: str = betterproto.string_field(4)
    device_model: str = betterproto.string_field(5)
    ios_version: str = betterproto.string_field(6)
    tos_acceptance_date: datetime = betterproto.message_field(7)
    client_cache_version: str = betterproto.string_field(8)


@dataclass
class LakAndroidDeviceConfiguration(betterproto.Message):
    email: str = betterproto.string_field(1)
    salt: str = betterproto.string_field(2)
    device_id: str = betterproto.string_field(3)
    google_ad_id: str = betterproto.string_field(4)
    device_model: str = betterproto.string_field(5)
    android_version: str = betterproto.string_field(6)
    tos_acceptance_date: datetime = betterproto.message_field(7)
    client_cache_version: str = betterproto.string_field(8)


class IpServiceStub(betterproto.ServiceStub):
    async def get_self_ip_details(self) -> IpDetails:
        request = SelfIpRequest()

        return await self._unary_unary(
            "/grpc.api.v1.IpService/GetSelfIpDetails",
            request,
            IpDetails,
        )

    async def get_ip_details(self, *, ip: str = "") -> IpDetails:
        request = IpRequest()
        request.ip = ip

        return await self._unary_unary(
            "/grpc.api.v1.IpService/GetIpDetails",
            request,
            IpDetails,
        )


class LakGatewayServiceStub(betterproto.ServiceStub):
    async def session_action__update(
        self, *, metadata: Optional["LakGatewayInputMetadata"] = None
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputEmpty()
        if metadata is not None:
            request.metadata = metadata

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/SessionAction_Update",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def habitat_action__upgrade_building(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        payment_granted: bool = False,
        habitat_id: int = 0,
        primary_key: int = 0,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputHabitatActionUpgradeBuilding()
        if metadata is not None:
            request.metadata = metadata
        request.payment_granted = payment_granted
        request.habitat_id = habitat_id
        request.primary_key = primary_key

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_UpgradeBuilding",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def habitat_action__upgrade_buildings(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        payment_amount: int = 0,
        habitat_ids_to_building_primary_keys: Optional[
            Dict[int, "LakPrimaryKeys"]
        ] = None,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputHabitatActionUpgradeBuildings()
        if metadata is not None:
            request.metadata = metadata
        request.payment_amount = payment_amount
        request.habitat_ids_to_building_primary_keys = (
            habitat_ids_to_building_primary_keys
        )

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_UpgradeBuildings",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def habitat_action__research_knowledge(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        payment_granted: bool = False,
        habitat_id: int = 0,
        primary_key: int = 0,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputHabitatActionResearchKnowledge()
        if metadata is not None:
            request.metadata = metadata
        request.payment_granted = payment_granted
        request.habitat_id = habitat_id
        request.primary_key = primary_key

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_ResearchKnowledge",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def habitat_action__batch_unit_order(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        payment_amount: int = 0,
        habitat_ids_to_unit_id_to_count: Optional[Dict[int, "LakUnitIdToCount"]] = None,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputHabitatActionBatchUnitOrder()
        if metadata is not None:
            request.metadata = metadata
        request.payment_amount = payment_amount
        request.habitat_ids_to_unit_id_to_count = habitat_ids_to_unit_id_to_count

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_BatchUnitOrder",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def market_action__trade_resources_for_habitat_dictionary(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        wanted_resource_id: int = 0,
        habitat_ids_to_resource_and_units: Optional[
            Dict[int, "LakResourcesAndUnits"]
        ] = None,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputMarketActionTradeResourcesForHabitatDictionary()
        if metadata is not None:
            request.metadata = metadata
        request.wanted_resource_id = wanted_resource_id
        request.habitat_ids_to_resource_and_units = habitat_ids_to_resource_and_units

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/MarketAction_TradeResourcesForHabitatDictionary",
            request,
            LakGatewayStatus,
        ):
            yield response


class LakConfigurationServiceStub(betterproto.ServiceStub):
    async def get_ios_configuration(
        self, *, email: str = "", salt: str = ""
    ) -> LakIosDeviceConfiguration:
        request = ConfigurationInput()
        request.email = email
        request.salt = salt

        return await self._unary_unary(
            "/grpc.api.v1.LakConfigurationService/GetIosConfiguration",
            request,
            LakIosDeviceConfiguration,
        )

    async def get_android_configuration(
        self, *, email: str = "", salt: str = ""
    ) -> LakAndroidDeviceConfiguration:
        request = ConfigurationInput()
        request.email = email
        request.salt = salt

        return await self._unary_unary(
            "/grpc.api.v1.LakConfigurationService/GetAndroidConfiguration",
            request,
            LakAndroidDeviceConfiguration,
        )
