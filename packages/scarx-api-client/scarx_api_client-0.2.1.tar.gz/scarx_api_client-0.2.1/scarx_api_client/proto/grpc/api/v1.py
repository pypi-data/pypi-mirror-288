# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: IpService.proto, LakGatewayService.proto, LakConfigurationService.proto, LakDataService.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import AsyncGenerator, Dict, List, Optional

import betterproto
import grpclib


@dataclass
class SelfIpRequest(betterproto.Message):
    pass


@dataclass
class IpRequest(betterproto.Message):
    ip: str = betterproto.string_field(1)


@dataclass
class IpDetails(betterproto.Message):
    ip: str = betterproto.string_field(1)
    region: str = betterproto.string_field(2)
    country: str = betterproto.string_field(3)
    location: str = betterproto.string_field(4)
    postal: str = betterproto.string_field(5)
    country_name: str = betterproto.string_field(6)
    organization: str = betterproto.string_field(7)
    timezone: str = betterproto.string_field(8)


@dataclass
class LakGatewayInputMetadata(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    email: str = betterproto.string_field(2)
    password: str = betterproto.string_field(3)
    ip_id: str = betterproto.string_field(4)


@dataclass
class LakGatewayStatus(betterproto.Message):
    is_finished: bool = betterproto.bool_field(1)
    status: str = betterproto.string_field(2)
    progress: int = betterproto.int32_field(3)
    data: bytes = betterproto.bytes_field(4)


@dataclass
class LakGatewayInputEmpty(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)


@dataclass
class LakUnitIdToCount(betterproto.Message):
    lak_unit_id_to_count_mapping: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )


@dataclass
class LakPrimaryKeys(betterproto.Message):
    primary_key: List[int] = betterproto.int32_field(1)


@dataclass
class LakResourcesAndUnits(betterproto.Message):
    resources: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )
    units: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )


@dataclass
class LakGatewayInputHabitatActionUpgradeBuilding(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_granted: bool = betterproto.bool_field(2)
    habitat_id: int = betterproto.int32_field(3)
    primary_key: int = betterproto.int32_field(4)


@dataclass
class LakGatewayInputHabitatActionUpgradeBuildings(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_amount: int = betterproto.int32_field(2)
    habitat_ids_to_building_primary_keys: Dict[int, "LakPrimaryKeys"] = (
        betterproto.map_field(3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass
class LakGatewayInputHabitatActionResearchKnowledge(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_granted: bool = betterproto.bool_field(2)
    habitat_id: int = betterproto.int32_field(3)
    primary_key: int = betterproto.int32_field(4)


@dataclass
class LakGatewayInputHabitatActionBatchUnitOrder(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_amount: int = betterproto.int32_field(2)
    habitat_ids_to_unit_id_to_count: Dict[int, "LakUnitIdToCount"] = (
        betterproto.map_field(3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass
class LakGatewayInputMarketActionTradeResourcesForHabitatDictionary(
    betterproto.Message
):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    wanted_resource_id: int = betterproto.int32_field(2)
    habitat_ids_to_resource_and_units: Dict[int, "LakResourcesAndUnits"] = (
        betterproto.map_field(3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass
class ConfigurationInput(betterproto.Message):
    email: str = betterproto.string_field(1)
    salt: str = betterproto.string_field(2)


@dataclass
class LakIosDeviceConfiguration(betterproto.Message):
    email: str = betterproto.string_field(1)
    salt: str = betterproto.string_field(2)
    device_id: str = betterproto.string_field(3)
    device_group: str = betterproto.string_field(4)
    device_model: str = betterproto.string_field(5)
    ios_version: str = betterproto.string_field(6)
    tos_acceptance_date: datetime = betterproto.message_field(7)
    client_cache_version: str = betterproto.string_field(8)


@dataclass
class LakAndroidDeviceConfiguration(betterproto.Message):
    email: str = betterproto.string_field(1)
    salt: str = betterproto.string_field(2)
    device_id: str = betterproto.string_field(3)
    google_ad_id: str = betterproto.string_field(4)
    device_model: str = betterproto.string_field(5)
    android_version: str = betterproto.string_field(6)
    tos_acceptance_date: datetime = betterproto.message_field(7)
    client_cache_version: str = betterproto.string_field(8)


@dataclass
class Empty(betterproto.Message):
    pass


@dataclass
class Date(betterproto.Message):
    # Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
    # year.
    year: int = betterproto.int32_field(1)
    # Month of a year. Must be from 1 to 12, or 0 to specify a year without a
    # month and day.
    month: int = betterproto.int32_field(2)
    # Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
    # to specify a year by itself or a year and month where the day isn't
    # significant.
    day: int = betterproto.int32_field(3)


@dataclass
class AllLakRegions(betterproto.Message):
    regions: List["LakRegion"] = betterproto.message_field(1)


@dataclass
class LakRegion(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    maximum_modifiers: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    direction: str = betterproto.string_field(4)


@dataclass
class ServerQuery(betterproto.Message):
    world_id: int = betterproto.int32_field(1)


@dataclass
class ServerQueryWithObjectId(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    object_id: int = betterproto.int32_field(2)


@dataclass
class ServerQueryWithDate(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    date: "Date" = betterproto.message_field(2)


@dataclass
class ServerQueryWithDateAndObjectId(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    object_id: int = betterproto.int32_field(2)
    date: "Date" = betterproto.message_field(3)


@dataclass
class AllLakWorlds(betterproto.Message):
    worlds: List["LakWorldMetadata"] = betterproto.message_field(1)


@dataclass
class LakWorldMetadata(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    features: str = betterproto.string_field(3)
    country: str = betterproto.string_field(4)
    language: str = betterproto.string_field(5)
    url: str = betterproto.string_field(6)
    name_in_short_form: str = betterproto.string_field(7)
    name_in_url: str = betterproto.string_field(8)
    features_array: List[str] = betterproto.string_field(9)


@dataclass
class LakApplicationVersion(betterproto.Message):
    application_version: str = betterproto.string_field(1)


@dataclass
class LakHabitatCount(betterproto.Message):
    castles: int = betterproto.int32_field(1)
    fortresses: int = betterproto.int32_field(2)
    cities: int = betterproto.int32_field(3)
    metropolis: int = betterproto.int32_field(4)


@dataclass
class LakPublicDataAlliance(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    rank: int = betterproto.int32_field(5)
    points: int = betterproto.int32_field(6)
    points_average: int = betterproto.int32_field(7)
    members: List[int] = betterproto.int32_field(8)
    habitat_count: "LakHabitatCount" = betterproto.message_field(9)
    member_count: int = betterproto.int32_field(10)
    points_maxed: int = betterproto.int32_field(11)
    points_available: int = betterproto.int32_field(12)
    maxed_percent: float = betterproto.double_field(13)
    link: str = betterproto.string_field(14)


@dataclass
class LakPublicDataPlayer(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    name: str = betterproto.string_field(3)
    alliance_id: int = betterproto.int32_field(4)
    alliance_permission: int = betterproto.int32_field(5)
    under_attack_protection: bool = betterproto.bool_field(6)
    on_vacation: bool = betterproto.bool_field(7)
    points: int = betterproto.int32_field(8)
    rank: int = betterproto.int32_field(9)
    habitat_count: "LakHabitatCount" = betterproto.message_field(10)
    points_maxed: int = betterproto.int32_field(11)
    points_available: int = betterproto.int32_field(12)
    maxed_percent: float = betterproto.double_field(13)
    link: str = betterproto.string_field(14)


@dataclass
class LakPublicDataHabitat(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    name: str = betterproto.string_field(3)
    map_x: int = betterproto.int32_field(4)
    map_y: int = betterproto.int32_field(5)
    points: int = betterproto.int32_field(6)
    creation_date: datetime = betterproto.message_field(7)
    player_id: int = betterproto.int32_field(8)
    type: int = betterproto.int32_field(9)
    owned: bool = betterproto.bool_field(10)
    alliance_id: int = betterproto.int32_field(11)
    region_id: int = betterproto.int32_field(12)
    region_name: str = betterproto.string_field(13)
    type_name: str = betterproto.string_field(14)
    link: str = betterproto.string_field(15)


@dataclass
class LakPublicDataMetadata(betterproto.Message):
    world: "LakWorldMetadata" = betterproto.message_field(1)
    timestamp: datetime = betterproto.message_field(2)
    raw_size: int = betterproto.int64_field(3)
    time_took_for_download_in_ms: int = betterproto.int64_field(4)


@dataclass
class LakPublicDataAll(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    habitats: Dict[int, "LakPublicDataHabitat"] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )
    alliances: Dict[int, "LakPublicDataAlliance"] = betterproto.map_field(
        3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )
    players: Dict[int, "LakPublicDataPlayer"] = betterproto.map_field(
        4, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )


@dataclass
class LakPublicDataAllHabitats(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    habitats: Dict[int, "LakPublicDataHabitat"] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )


@dataclass
class LakPublicDataAllAlliances(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    alliances: Dict[int, "LakPublicDataAlliance"] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )


@dataclass
class LakPublicDataAllPlayers(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    players: Dict[int, "LakPublicDataPlayer"] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )


@dataclass
class LakPublicDataSingleHabitat(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    habitat: "LakPublicDataHabitat" = betterproto.message_field(2)


@dataclass
class LakPublicDataSingleAlliance(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    alliance: "LakPublicDataAlliance" = betterproto.message_field(2)


@dataclass
class LakPublicDataSinglePlayer(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    player: "LakPublicDataPlayer" = betterproto.message_field(2)


@dataclass
class LakPublicDataSingleHabitatComplex(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    habitat: "LakPublicDataHabitat" = betterproto.message_field(2)
    player: "LakPublicDataPlayer" = betterproto.message_field(3)
    alliance: "LakPublicDataAlliance" = betterproto.message_field(4)


@dataclass
class LakPublicDataHistory(betterproto.Message):
    history: List["Date"] = betterproto.message_field(1)


class IpServiceStub(betterproto.ServiceStub):
    async def get_self_ip_details(self) -> IpDetails:
        request = SelfIpRequest()

        return await self._unary_unary(
            "/grpc.api.v1.IpService/GetSelfIpDetails",
            request,
            IpDetails,
        )

    async def get_ip_details(self, *, ip: str = "") -> IpDetails:
        request = IpRequest()
        request.ip = ip

        return await self._unary_unary(
            "/grpc.api.v1.IpService/GetIpDetails",
            request,
            IpDetails,
        )


class LakGatewayServiceStub(betterproto.ServiceStub):
    async def session_action__update(
        self, *, metadata: Optional["LakGatewayInputMetadata"] = None
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputEmpty()
        if metadata is not None:
            request.metadata = metadata

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/SessionAction_Update",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def habitat_action__upgrade_building(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        payment_granted: bool = False,
        habitat_id: int = 0,
        primary_key: int = 0,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputHabitatActionUpgradeBuilding()
        if metadata is not None:
            request.metadata = metadata
        request.payment_granted = payment_granted
        request.habitat_id = habitat_id
        request.primary_key = primary_key

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_UpgradeBuilding",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def habitat_action__upgrade_buildings(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        payment_amount: int = 0,
        habitat_ids_to_building_primary_keys: Optional[
            Dict[int, "LakPrimaryKeys"]
        ] = None,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputHabitatActionUpgradeBuildings()
        if metadata is not None:
            request.metadata = metadata
        request.payment_amount = payment_amount
        request.habitat_ids_to_building_primary_keys = (
            habitat_ids_to_building_primary_keys
        )

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_UpgradeBuildings",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def habitat_action__research_knowledge(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        payment_granted: bool = False,
        habitat_id: int = 0,
        primary_key: int = 0,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputHabitatActionResearchKnowledge()
        if metadata is not None:
            request.metadata = metadata
        request.payment_granted = payment_granted
        request.habitat_id = habitat_id
        request.primary_key = primary_key

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_ResearchKnowledge",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def habitat_action__batch_unit_order(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        payment_amount: int = 0,
        habitat_ids_to_unit_id_to_count: Optional[Dict[int, "LakUnitIdToCount"]] = None,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputHabitatActionBatchUnitOrder()
        if metadata is not None:
            request.metadata = metadata
        request.payment_amount = payment_amount
        request.habitat_ids_to_unit_id_to_count = habitat_ids_to_unit_id_to_count

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_BatchUnitOrder",
            request,
            LakGatewayStatus,
        ):
            yield response

    async def market_action__trade_resources_for_habitat_dictionary(
        self,
        *,
        metadata: Optional["LakGatewayInputMetadata"] = None,
        wanted_resource_id: int = 0,
        habitat_ids_to_resource_and_units: Optional[
            Dict[int, "LakResourcesAndUnits"]
        ] = None,
    ) -> AsyncGenerator[LakGatewayStatus, None]:
        request = LakGatewayInputMarketActionTradeResourcesForHabitatDictionary()
        if metadata is not None:
            request.metadata = metadata
        request.wanted_resource_id = wanted_resource_id
        request.habitat_ids_to_resource_and_units = habitat_ids_to_resource_and_units

        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/MarketAction_TradeResourcesForHabitatDictionary",
            request,
            LakGatewayStatus,
        ):
            yield response


class LakConfigurationServiceStub(betterproto.ServiceStub):
    async def get_ios_configuration(
        self, *, email: str = "", salt: str = ""
    ) -> LakIosDeviceConfiguration:
        request = ConfigurationInput()
        request.email = email
        request.salt = salt

        return await self._unary_unary(
            "/grpc.api.v1.LakConfigurationService/GetIosConfiguration",
            request,
            LakIosDeviceConfiguration,
        )

    async def get_android_configuration(
        self, *, email: str = "", salt: str = ""
    ) -> LakAndroidDeviceConfiguration:
        request = ConfigurationInput()
        request.email = email
        request.salt = salt

        return await self._unary_unary(
            "/grpc.api.v1.LakConfigurationService/GetAndroidConfiguration",
            request,
            LakAndroidDeviceConfiguration,
        )


class LakDataServiceStub(betterproto.ServiceStub):
    async def get_all_regions(self) -> AllLakRegions:
        request = Empty()

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetAllRegions",
            request,
            AllLakRegions,
        )

    async def get_all_worlds(self) -> AllLakWorlds:
        request = Empty()

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetAllWorlds",
            request,
            AllLakWorlds,
        )

    async def get_world(self, *, world_id: int = 0) -> LakWorldMetadata:
        request = ServerQuery()
        request.world_id = world_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetWorld",
            request,
            LakWorldMetadata,
        )

    async def get_application_version(self) -> LakApplicationVersion:
        request = Empty()

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetApplicationVersion",
            request,
            LakApplicationVersion,
        )

    async def get_public_data_all(self, *, world_id: int = 0) -> LakPublicDataAll:
        request = ServerQuery()
        request.world_id = world_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAll",
            request,
            LakPublicDataAll,
        )

    async def get_public_data_all_alliances(
        self, *, world_id: int = 0
    ) -> LakPublicDataAllAlliances:
        request = ServerQuery()
        request.world_id = world_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAllAlliances",
            request,
            LakPublicDataAllAlliances,
        )

    async def get_public_data_all_players(
        self, *, world_id: int = 0
    ) -> LakPublicDataAllPlayers:
        request = ServerQuery()
        request.world_id = world_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAllPlayers",
            request,
            LakPublicDataAllPlayers,
        )

    async def get_public_data_all_habitats(
        self, *, world_id: int = 0
    ) -> LakPublicDataAllHabitats:
        request = ServerQuery()
        request.world_id = world_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAllHabitats",
            request,
            LakPublicDataAllHabitats,
        )

    async def get_public_data_alliance(
        self, *, world_id: int = 0, object_id: int = 0
    ) -> LakPublicDataSingleAlliance:
        request = ServerQueryWithObjectId()
        request.world_id = world_id
        request.object_id = object_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAlliance",
            request,
            LakPublicDataSingleAlliance,
        )

    async def get_public_data_player(
        self, *, world_id: int = 0, object_id: int = 0
    ) -> LakPublicDataSinglePlayer:
        request = ServerQueryWithObjectId()
        request.world_id = world_id
        request.object_id = object_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataPlayer",
            request,
            LakPublicDataSinglePlayer,
        )

    async def get_public_data_habitat(
        self, *, world_id: int = 0, object_id: int = 0
    ) -> LakPublicDataSingleHabitat:
        request = ServerQueryWithObjectId()
        request.world_id = world_id
        request.object_id = object_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHabitat",
            request,
            LakPublicDataSingleHabitat,
        )

    async def get_public_data_habitat_complex(
        self, *, world_id: int = 0, object_id: int = 0
    ) -> LakPublicDataSingleHabitatComplex:
        request = ServerQueryWithObjectId()
        request.world_id = world_id
        request.object_id = object_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHabitatComplex",
            request,
            LakPublicDataSingleHabitatComplex,
        )

    async def get_public_data_history(
        self, *, world_id: int = 0
    ) -> LakPublicDataHistory:
        request = ServerQuery()
        request.world_id = world_id

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistory",
            request,
            LakPublicDataHistory,
        )

    async def get_public_data_historical_all(
        self, *, world_id: int = 0, date: Optional["Date"] = None
    ) -> LakPublicDataAll:
        request = ServerQueryWithDate()
        request.world_id = world_id
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAll",
            request,
            LakPublicDataAll,
        )

    async def get_public_data_historical_all_alliances(
        self, *, world_id: int = 0, date: Optional["Date"] = None
    ) -> LakPublicDataAllAlliances:
        request = ServerQueryWithDate()
        request.world_id = world_id
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAllAlliances",
            request,
            LakPublicDataAllAlliances,
        )

    async def get_public_data_historical_all_players(
        self, *, world_id: int = 0, date: Optional["Date"] = None
    ) -> LakPublicDataAllPlayers:
        request = ServerQueryWithDate()
        request.world_id = world_id
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAllPlayers",
            request,
            LakPublicDataAllPlayers,
        )

    async def get_public_data_historical_all_habitats(
        self, *, world_id: int = 0, date: Optional["Date"] = None
    ) -> LakPublicDataAllHabitats:
        request = ServerQueryWithDate()
        request.world_id = world_id
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAllHabitats",
            request,
            LakPublicDataAllHabitats,
        )

    async def get_public_data_historical_alliance(
        self, *, world_id: int = 0, object_id: int = 0, date: Optional["Date"] = None
    ) -> LakPublicDataSingleAlliance:
        request = ServerQueryWithDateAndObjectId()
        request.world_id = world_id
        request.object_id = object_id
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAlliance",
            request,
            LakPublicDataSingleAlliance,
        )

    async def get_public_data_historical_player(
        self, *, world_id: int = 0, object_id: int = 0, date: Optional["Date"] = None
    ) -> LakPublicDataSinglePlayer:
        request = ServerQueryWithDateAndObjectId()
        request.world_id = world_id
        request.object_id = object_id
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalPlayer",
            request,
            LakPublicDataSinglePlayer,
        )

    async def get_public_data_historical_habitat(
        self, *, world_id: int = 0, object_id: int = 0, date: Optional["Date"] = None
    ) -> LakPublicDataSingleHabitat:
        request = ServerQueryWithDateAndObjectId()
        request.world_id = world_id
        request.object_id = object_id
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalHabitat",
            request,
            LakPublicDataSingleHabitat,
        )

    async def get_public_data_historical_habitat_complex(
        self, *, world_id: int = 0, object_id: int = 0, date: Optional["Date"] = None
    ) -> LakPublicDataSingleHabitatComplex:
        request = ServerQueryWithDateAndObjectId()
        request.world_id = world_id
        request.object_id = object_id
        if date is not None:
            request.date = date

        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalHabitatComplex",
            request,
            LakPublicDataSingleHabitatComplex,
        )
