Metadata-Version: 2.1
Name: bellande_robot_step
Version: 0.3.1
Summary: Robots Step
Home-page: UNKNOWN
Author: RonaldsonBellande
Author-email: ronaldsonbellande@gmail.com
License: UNKNOWN
Project-URL: Home, https://github.com/RonaldsonBellande/bellande_step
Project-URL: Homepage, https://github.com/RonaldsonBellande/bellande_step
Project-URL: documentation, https://github.com/RonaldsonBellande/bellande_step
Project-URL: repository, https://github.com/RonaldsonBellande/bellande_step
Description: # üì¶ Bellande Step (Infinite Dimensions)
        
        ## üßô Organization Website
        - [![Organization Website](https://img.shields.io/badge/Explore%20Our-Website-0099cc?style=for-the-badge)](https://robotics-sensors.github.io)
        
        
        ## üßô Organization Github
        - [![Organization Github ](https://img.shields.io/badge/Explore%20Our-Github-0099cc?style=for-the-badge)](https://github.com/Robotics-Sensors)
        
        
        # API Usability
        ```
        {
          "url": "https://bellanderoboticssensorsresearchinnovationcenter-kot42qxp.b4a.run",
          "endpoint_path": {
            "bellande_step": "/api/Bellande_Step/bellande_step_nd"
          },
          "Bellande_Framework_Access_Key": "bellande_web_api_opensource"
        }
        ```
        # API Payload Example
        ```
        {
            "node0": [0, 0, 0],
            "node1": [100, 100, 100],
            "limit": 75,
            "dimensions": 3,
            "auth": {
              "authorization_key": "bellande_web_api_opensource"
            }
        }
        ```
        
        # Quick API Testing
        ```
        curl -X 'POST' \
          'https://bellanderoboticssensorsresearchinnovationcenterwebsite-kot42qxp.b4a.run/api/Bellande_Step/bellande_step_nd' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -d '{
            "node0": [0, 0, 0],
            "node1": [100, 100, 100],
            "limit": 75,
            "dimensions": 3,
            "auth": {
              "authorization_key": "bellande_web_api_opensource"
            }
          }'
        ```
        
        # BS(Bellande Step) Algorithm API
        ## Experiment 1 -- Limit = 1
        
        | ![2D](graphs_charts/graph_charts_1/2D_Space.png) *Figure 2D* | ![3D](graphs_charts/graph_charts_1/3D_Space.png) *Figure 3D* | ![4D](graphs_charts/graph_charts_1/4D_Space.png) *Figure 4D* |
        |:------------------------------------------------------------:|:------------------------------------------------------------:|:------------------------------------------------------------:|
        | ![5D](graphs_charts/graph_charts_1/5D_Space.png) *Figure 5D* | ![6D](graphs_charts/graph_charts_1/6D_Space.png) *Figure 6D* | ![7D](graphs_charts/graph_charts_1/7D_Space.png) *Figure 7D* |
        | ![8D](graphs_charts/graph_charts_1/8D_Space.png) *Figure 8D* | ![9D](graphs_charts/graph_charts_1/9D_Space.png) *Figure 9D* | ![10D](graphs_charts/graph_charts_1/10D_Space.png) *Figure 10D* |
        
        
        ## Experiment 2 -- Limit = 25
        
        | ![2D](graphs_charts/graph_charts_25/2D_Space.png) *Figure 2D* | ![3D](graphs_charts/graph_charts_25/3D_Space.png) *Figure 3D* | ![4D](graphs_charts/graph_charts_25/4D_Space.png) *Figure 4D* |
        |:-------------------------------------------------------------:|:-------------------------------------------------------------:|:-------------------------------------------------------------:|
        | ![5D](graphs_charts/graph_charts_25/5D_Space.png) *Figure 5D* | ![6D](graphs_charts/graph_charts_25/6D_Space.png) *Figure 6D* | ![7D](graphs_charts/graph_charts_25/7D_Space.png) *Figure 7D* |
        | ![8D](graphs_charts/graph_charts_25/8D_Space.png) *Figure 8D* | ![9D](graphs_charts/graph_charts_25/9D_Space.png) *Figure 9D* | ![10D](graphs_charts/graph_charts_25/10D_Space.png) *Figure 10D* |
        
        
        ## Experiment 3 -- Limit = 50
        
        | ![2D](graphs_charts/graph_charts_50/2D_Space.png) *Figure 2D* | ![3D](graphs_charts/graph_charts_50/3D_Space.png) *Figure 3D* | ![4D](graphs_charts/graph_charts_50/4D_Space.png) *Figure 4D* |
        |:-------------------------------------------------------------:|:-------------------------------------------------------------:|:-------------------------------------------------------------:|
        | ![5D](graphs_charts/graph_charts_50/5D_Space.png) *Figure 5D* | ![6D](graphs_charts/graph_charts_50/6D_Space.png) *Figure 6D* | ![7D](graphs_charts/graph_charts_50/7D_Space.png) *Figure 7D* |
        | ![8D](graphs_charts/graph_charts_50/8D_Space.png) *Figure 8D* | ![9D](graphs_charts/graph_charts_50/9D_Space.png) *Figure 9D* | ![10D](graphs_charts/graph_charts_50/10D_Space.png) *Figure 10D* |
        
        
        ## Experiment 4 -- Limit = 75
        
        | ![2D](graphs_charts/graph_charts_75/2D_Space.png) *Figure 2D* | ![3D](graphs_charts/graph_charts_75/3D_Space.png) *Figure 3D* | ![4D](graphs_charts/graph_charts_75/4D_Space.png) *Figure 4D* |
        |:-------------------------------------------------------------:|:-------------------------------------------------------------:|:-------------------------------------------------------------:|
        | ![5D](graphs_charts/graph_charts_75/5D_Space.png) *Figure 5D* | ![6D](graphs_charts/graph_charts_75/6D_Space.png) *Figure 6D* | ![7D](graphs_charts/graph_charts_75/7D_Space.png) *Figure 7D* |
        | ![8D](graphs_charts/graph_charts_75/8D_Space.png) *Figure 8D* | ![9D](graphs_charts/graph_charts_75/9D_Space.png) *Figure 9D* | ![10D](graphs_charts/graph_charts_75/10D_Space.png) *Figure 10D* |
        
        
        ## Experiment 5 -- Limit = 100
        
        | ![2D](graphs_charts/graph_charts_100/2D_Space.png) *Figure 2D* | ![3D](graphs_charts/graph_charts_100/3D_Space.png) *Figure 3D* | ![4D](graphs_charts/graph_charts_100/4D_Space.png) *Figure 4D* |
        |:--------------------------------------------------------------:|:--------------------------------------------------------------:|:--------------------------------------------------------------:|
        | ![5D](graphs_charts/graph_charts_100/5D_Space.png) *Figure 5D* | ![6D](graphs_charts/graph_charts_100/6D_Space.png) *Figure 6D* | ![7D](graphs_charts/graph_charts_100/7D_Space.png) *Figure 7D* |
        | ![8D](graphs_charts/graph_charts_100/8D_Space.png) *Figure 8D* | ![9D](graphs_charts/graph_charts_100/9D_Space.png) *Figure 9D* | ![10D](graphs_charts/graph_charts_100/10D_Space.png) *Figure 10D* |
        
        
        
        # Check Out Research Organization for open-source/semi-open-source API
        - https://robotics-sensors.github.io
        - Check out website for more information avaliable open-source API 
        
        # API in api_docs
        - Temporarily Enabled for OpenSource
        - 2D Space
        - 3D Space
        - 4D Space
        - 5D Space
        - 6D Space
        - 7D Space
        - 8D Space
        - 9D Space
        - 10D Space
        
        
        # Can also checkout portion of the docs at [Portion API DOCS](https://github.com/Robotics-Sensors/bellande_robots_step/blob/main/api_docs.md)
        ### ‚úîÔ∏è confirmed versions
        - `The step function efficiently computes the next step towards a target node within a specified distance limit.`
        
        ## Usage 2D Space
        
        Suppose you have two nodes representing positions in a 2D space:
        - `node0` at coordinates `(0, 0)`
        - `node1` at coordinates `(5, 5)`
        
        You want to compute the next step from `node0` towards `node1` while limiting the maximum distance to 3 units.
        
        ```python
        # Define Import 
        from bellande_robot_step.bellande_robot_step_2d import bellande_step_2d, Node2D
        
        # Define the nodes
        node0 = Node2D(0, 0)
        node1 = Node2D(5, 5)
        
        # Compute the next step within a distance limit of 3 units
        next_step = bellande_step_2d(node0, node1, limit=3)
        
        # Output the coordinates of the next step
        print("Next Step Coordinates:", next_step.coord) 
        ```
        
        ## Usage 3D Space
        
        Suppose you have two nodes representing positions in a 3D space:
        - `node0` at coordinates `(0, 0, 0)`
        - `node1` at coordinates `(5, 5, 5)`
        
        You want to compute the next step from `node0` towards `node1` while limiting the maximum distance to 3 units.
        
        ```python
        # Define Import 
        from bellande_robot_step.bellande_robot_step_3d import bellande_step_3d, Node3D 
        
        # Define the nodes
        node0 = Node3D(0, 0, 0)
        node1 = Node3D(5, 5, 5)
        
        # Compute the next step within a distance limit of 3 units
        next_step = bellande_step_3d(node0, node1, limit=3)
        
        # Output the coordinates of the next step
        print("Next Step Coordinates:", next_step.coord)
        ```
        
        ### Avaliable
        - 2D Space
        - 3D Space
        - 4D Space
        - 5D Space
        - 6D Space
        - 7D Space
        - 8D Space
        - 9D Space
        - 10D Space
        
        
        ## Website PYPI
        - https://pypi.org/project/bellande_robot_step
        
        ### Installation
        - `$ pip install bellande_robot_step`
        
        ### Upgrade (if not upgraded)
        - `$ pip install --upgrade bellande_robot_step`
        
        ```
        Name: bellande_robot_step
        Version: 0.3.0
        Summary: Computes the next step towards a target node
        Home-page: github.com/RonaldsonBellande/bellande_robot_step
        Author: Ronaldson Bellande
        Author-email: ronaldsonbellande@gmail.com
        License: GNU General Public License v3.0
        Requires: numpy
        Required-by:
        ```
        
        ## Published Paper
        ```
        Coming Soon
        ```
        
        ## License
        This Algorithm or Models is distributed under the [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/), see [LICENSE](https://github.com/RonaldsonBellande/bellande_robots_step/blob/main/LICENSE) and [NOTICE](https://github.com/RonaldsonBellande/bellande_robots_step/blob/main/LICENSE) for more information.
        
Keywords: package,setuptools
Platform: UNKNOWN
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Programming Language :: Python
Requires-Python: >=3.0
Description-Content-Type: text/markdown
Provides-Extra: dev
