"""
Django settings for ei_signals project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os, yaml

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
CREDENTIALS_DIR = os.path.join(BASE_DIR,'credentials')

try:
    with open(os.path.join(BASE_DIR,'signals.yaml'), 'r') as f:
        signals_yaml = yaml.load(f, Loader=yaml.SafeLoader)
except:
    with open('/home/ei/signals.yaml','r') as f:
        signals_yaml = yaml.load(f, Loader=yaml.SafeLoader)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zgts5pbf1#fi8f*g(==@e6hrnu46@a4ip964i%!lp=r7426-h#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = signals_yaml['DEBUG']

ALLOWED_HOSTS = ["*","127.0.0.1"]

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'guardian',
    'db',
    'user',
    'v1',
    'frontend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'user.shopifyAuthMiddleware.ShopifyAuthMiddleware',
]

AUTHENTICATION_BACKENDS = ["user.auth.AuthBackend","django.contrib.auth.backends.ModelBackend", "guardian.backends.ObjectPermissionBackend"]

ROOT_URLCONF = 'ei_signals.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ei_signals.wsgi.application'
AUTH_USER_MODEL = "user.User"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': signals_yaml['DB_NAME'],
        'USER': signals_yaml['DB_USER'],
        'PASSWORD': signals_yaml['DB_PASSWORD'],
        'HOST': signals_yaml['DB_HOST'],
        'PORT': signals_yaml['DB_PORT'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

GOOGLEOPENID_CLIENT = signals_yaml['GOOGLEOPENID_CLIENT']
GOOGLEOPENID_CLIENT_SECRET = signals_yaml['GOOGLEOPENID_CLIENT_SECRET']
OAUTH2_CODE_EXCHANGE = signals_yaml['OAUTH2_CODE_EXCHANGE']
FB_CLIENT = signals_yaml['FB_CLIENT']
FB_APP_SECRET = signals_yaml['FB_APP_SECRET']

if signals_yaml['LOG_DIR']:
    LOG_DIR = signals_yaml['LOG_DIR'] 
else:
    LOG_DIR = os.path.join(BASE_DIR,'logs')

DEFAULT_EXCEPTION_REPORTER = 'ei_signals.log.CustomExceptionReporter'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'debug_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'DEBUG',
            'formatter': 'simple',
            'filename': os.path.join(LOG_DIR,'debug.log'),
            'maxBytes': 1000000,
            'backupCount': 3
        },
        'info_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'INFO',
            'formatter': 'simple',
            'filename': os.path.join(LOG_DIR,'info.log'),
            'maxBytes': 1000000,
            'backupCount': 3
        },
        'error_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'ERROR',
            'formatter': 'simple',
            'filename': os.path.join(LOG_DIR,'error.log'),
            'maxBytes': 1000000,
            'backupCount': 3
        },
        'application_error_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'ERROR',
            'formatter': 'simple',
            'filename': os.path.join(LOG_DIR,'application_error.log'),
            'maxBytes': 1000000,
            'backupCount': 3
        },
    },
    'loggers': {
        'v1': {
            'level': 'DEBUG',
            'handlers': ['debug_file', 'info_file', 'error_file'],
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['application_error_file'],
        'level': 'WARNING',
    },
}


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

import json
try:
    with open(os.path.join(CREDENTIALS_DIR,"config_email.json"),"r") as f:
        email_credentials = json.load(f)
except:
    with open('/home/ei/config_email.json','r') as f:
        email_credentials = json.load(f)

EMAIL_HOST = email_credentials['EMAIL_HOST']
EMAIL_HOST_USER = email_credentials['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = email_credentials['EMAIL_HOST_PASSWORD']
EMAIL_PORT = 587
EMAIL_USE_TLS = True
SERVER_EMAIL = 'server@api.easymetrics.in'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
SHOPIFY_SECRET_KEY = signals_yaml['SHOPIFY_SECRET_KEY']
DEFAULT_DESTINATION_ID = signals_yaml['DEFAULT_DESTINATION_ID']