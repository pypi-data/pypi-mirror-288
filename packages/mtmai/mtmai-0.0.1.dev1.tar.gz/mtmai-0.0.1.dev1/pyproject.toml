[tool.poetry]
name = "mtmai"
version = "0.0.1.dev1"
description = ""
authors = ["John Smith <john@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "mtmai" }]


[tool.poetry-dynamic-versioning]
enable = false
style = "pep440"
vcs = "git"
bump = true
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- else -%}
        {{ serialize_pep440(base, stage, revision, dev=distance) }}
    {%- endif -%}
"""

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
environs = "^11.0.0"
datashaper = "^0.0.49"
beautifulsoup4 = ">=4.12.2"
colorama = ">=0.4.6"
md2pdf = ">=1.0.1"
openai = ">=1.3.3"
playwright = ">=1.39.0"
python-dotenv = ">=1.0.0"
pyyaml = ">=6.0.1"
uvicorn = ">=0.24.0.post1"
pydantic = ">=2.5.1"
fastapi = ">=0.104.1"
python-multipart = ">=0.0.6"
markdown = ">=3.5.1"
langgraph = ">=0.1.17"
langchain_community = "^0.2"
langchain-openai = "^0.1"
langchain-google-genai = "^1"
tavily-python = ">=0.2.8"
permchain = ">=0.0.6"
arxiv = ">=2.0.0"
PyMuPDF = ">=1.23.6"
requests = ">=2.31.0"
jinja2 = ">=3.1.2"
aiofiles = ">=23.2.1"
newspaper3k = ">=0.2.8"
SQLAlchemy = ">=2.0.28"
mistune = "^3.0.2"
htmldocx = "^0.0.6"
python-docx = "^1.1.0"
lxml = { version = ">=4.9.2", extras = ["html_clean"] }
unstructured = "^0.15.0"
tiktoken = ">=0.7.0"
json-repair = "^0.25.3"
json5 = "^0.9.25"
datasets = "^2.20.0"
transformers = "^4.42.4"
scikit-learn = "^1.5.1"
langchain-huggingface = "^0.0.3"
optimum = {extras = ["onnxruntime-gpu"], version = "^1.21.2"}
groq = "^0.9.0"
ollama = "^0.3.0"
langchain-groq = "^0.1.6"
langchain-together = "^0.1.4"
langchain-anthropic = "^0.1.20"
langchain-core = "^0.2.22"
langchain-mistralai = "^0.1.10"
duckduckgo-search = "^6.2.1"
torch = "^2.3.1"
accelerate = "^0.32.1"
bitsandbytes = "^0.43.1"
litserve = "^0.1.3"
# graphrag = "^0.2.0"
plotly = "^5.22.0"
together = "^1.2.3"
langchainhub = "^0.1.20"
sqlmodel = "^0.0.21"
psycopg = {extras = ["binary"], version = "^3.2.1"}
nanoid = "^2.0.0"
httpx = "^0.27.0"

inngest = "^0.4.8"
langchain = "^0.2.11"
langserve = {extras = ["all"], version = "^0.2.2"}
numexpr = "^2.10.1"
wikipedia = "^1.4.0"
crewai = "^0.41.1"
crewai-tools = "^0.4.26"
scrapegraphai = "^1.11.3"
[tool.poetry.group.dev.dependencies]
flake8 = "^7.1.0"
build = "^1.2.1"
twine = "^5.1.1"
debugpy = "^1.8.2"
pylint = "^3.2.6"
pytest-asyncio = "^0.23.8"
coverage = "^7.6.0"
ipykernel = "^6.29.4"
jupyter = "^1.0.0"
nbconvert = "^7.16.3"
poethepoet = "^0.26.0"
pyright = "^1.1.371"
pytest = "^8.3.2"
pytest-timeout = "^2.3.1"
ruff = "^0.5.2"
semversioner = "^2.0.3"

update-toml = "^0.2.1"


[build-system]
# requires = ["poetry-core"]
# build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.poe.tasks]
_sort_imports = "ruff check --select I --fix . --preview"
_format_code = "ruff format  . --preview"
_ruff_check = 'ruff check . --preview'
_pyright = "pyright"
_convert_local_search_nb = 'jupyter nbconvert --output-dir=docsite/posts/query/notebooks/ --output="{notebook_name}_nb" --template=docsite/nbdocsite_template --to markdown examples_notebooks/local_search.ipynb'
_convert_global_search_nb = 'jupyter nbconvert --output-dir=docsite/posts/query/notebooks/ --output="{notebook_name}_nb" --template=docsite/nbdocsite_template --to markdown examples_notebooks/global_search.ipynb'
_semversioner_release = "semversioner release"
_semversioner_changelog = "semversioner changelog > CHANGELOG.md"
_semversioner_update_toml_version = "update-toml update --path tool.poetry.version --value \"$(semversioner current-version)\" pyproject.toml"
coverage_report = 'coverage report --omit "**/tests/**" --show-missing'
check_format = 'ruff format . --check --preview'
fix = "ruff  --preview check --fix ."
fix_unsafe = "ruff check --preview --fix --unsafe-fixes ."

_test_all = "coverage run -m pytest ./tests"
test_unit = "pytest ./tests/unit"
test_integration = "pytest ./tests/integration"
test_smoke = "pytest ./tests/smoke"
index = "python -m graphrag.index"
query = "python -m graphrag.query"
prompt_tune = "python -m graphrag.prompt_tune"
# Pass in a test pattern
test_only = "pytest -s -k"


[[tool.poe.tasks.release]]
sequence = [
    '_semversioner_release',
    '_semversioner_changelog',
    '_semversioner_update_toml_version',
]
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.convert_docsite_notebooks]]
sequence = ['_convert_local_search_nb', '_convert_global_search_nb']
ignore_fail = 'return_non_zero'



[[tool.poe.tasks.format]]
sequence = ['_sort_imports', '_format_code']
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.check]]
sequence = ['check_format', '_ruff_check', '_pyright']
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.test]]
sequence = ['_test_all', 'coverage_report']
ignore_fail = 'return_non_zero'

# optional-dependencies = {dev = [
#     "build",
#     "mypy",
#     "pre-commit",
#     "pytest",
#     "ruff",
#     "tox",
#     "tuna",
#     "twine",
#     "debugpy",
#     "pylint",
#     "watchdog[watchmedo]",
#     "jupyter",
#     "ipywidgets",
# ], docs = [
#     "pdoc3",
# ], readme = [
#     "pytest-codeblocks",
# ]}



[tool.ruff]
target-version = "py310"
extend-include = ["*.ipynb"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 20

[tool.ruff.lint]
select = [
    "E4",
    "E7",
    "E9",
    "W291",
    "YTT",
    "T10",
    "ICN",
    "INP",
    "Q",
    "RSE",
    "SLOT",
    "INT",
    "FLY",
    "LOG",
    "C90",
    "T20",
    "D",
    "RET",
    "PD",
    "N",
    "PIE",
    "SIM",
    "S",
    "G",
    "ERA",
    "ASYNC",
    "TID",
    "UP",
    "SLF",
    "BLE",
    "C4",
    "I",
    "F",
    "A",
    "ARG",
    "PTH",
    "RUF",
    "B",
    "TCH",
    "DTZ",
    "PYI",
    "PT",
    "EM",
    "TRY",
    "PERF",
    "CPY",
    # "FBT", # use named arguments for boolean flags
    # "TD", # todos
    # "FIX", # fixme
    # "FURB" # preview rules
    # ANN # Type annotations, re-enable when we get bandwidth
]
ignore = [
    # Deprecated Rules
    "ANN101",
    "ANN102",
    # Conflicts with interface argument checking
    "ARG002",
    "ANN204",
    # TODO: Inspect these pandas rules for validity
    "PD002", # prevents inplace=True
    # TODO RE-Enable when we get bandwidth
    "PERF203", # Needs restructuring of errors, we should bail-out on first error
    "C901",    # needs refactoring to remove cyclomatic complexity
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "ERA001",  # 允许临时注释的代码块,
    "RET504",
]


[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S", "D", "ANN", "T201", "ASYNC", "ARG", "PTH", "TRY"]
"examples/*" = ["S", "D", "ANN", "T201", "PTH", "TRY", "PERF"]
"graphrag/index/config/*" = ["TCH"]
"*.ipynb" = ["T201"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["input", "id", "bytes"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"


# https://github.com/microsoft/pyright/blob/9f81564a4685ff5c55edd3959f9b39030f590b2f/docs/configuration.md#sample-pyprojecttoml-file
[tool.pyright]
include = ["graphrag", "tests", "examples", "examples_notebooks"]
exclude = ["**/node_modules", "**/__pycache__"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
timeout = 600
# log_cli = true
# log_cli_level = "INFO"
