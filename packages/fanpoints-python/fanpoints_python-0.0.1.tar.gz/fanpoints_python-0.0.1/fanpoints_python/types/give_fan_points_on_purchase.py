# Generated by ariadne-codegen
# Source: fanpoints_python/queries

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import Currency, FanPointsTransactionType


class GiveFanPointsOnPurchase(BaseModel):
    give_fan_points_on_purchase: "GiveFanPointsOnPurchaseGiveFanPointsOnPurchase" = (
        Field(alias="giveFanPointsOnPurchase")
    )


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchase(BaseModel):
    errors: Optional["GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrors"]
    result: Optional["GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseResult"]


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrors(BaseModel):
    unknown_user_error: Optional[
        "GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsUnknownUserError"
    ] = Field(alias="unknownUserError")
    invalid_reward_amount_error: Optional[
        "GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsInvalidRewardAmountError"
    ] = Field(alias="invalidRewardAmountError")
    too_few_available_error: Optional[
        "GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsTooFewAvailableError"
    ] = Field(alias="tooFewAvailableError")
    invalid_transaction_id_error: Optional[
        "GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsInvalidTransactionIdError"
    ] = Field(alias="invalidTransactionIdError")
    invalid_rate_label_error: Optional[
        "GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsInvalidRateLabelError"
    ] = Field(alias="invalidRateLabelError")
    already_executed_error: Optional[
        "GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsAlreadyExecutedError"
    ] = Field(alias="alreadyExecutedError")
    non_unique_purchase_item_ids_error: Optional[
        "GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsNonUniquePurchaseItemIdsError"
    ] = Field(alias="nonUniquePurchaseItemIdsError")


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsUnknownUserError(BaseModel):
    empty: Optional[str] = Field(alias="_empty")


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsInvalidRewardAmountError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsTooFewAvailableError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsInvalidTransactionIdError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsInvalidRateLabelError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsAlreadyExecutedError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrorsNonUniquePurchaseItemIdsError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseResult(BaseModel):
    purchase_id: str = Field(alias="purchaseId")
    user_id: str = Field(alias="userId")
    transaction_type: FanPointsTransactionType = Field(alias="transactionType")
    purchase_items: List[
        "GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseResultPurchaseItems"
    ] = Field(alias="purchaseItems")


class GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseResultPurchaseItems(BaseModel):
    purchase_item_id: str = Field(alias="purchaseItemId")
    partner_id: str = Field(alias="partnerId")
    title: str
    description: str
    price: float
    currency: Currency
    amount: int
    rate_label: Optional[str] = Field(alias="rateLabel")
    date: str
    has_been_undone: bool = Field(alias="hasBeenUndone")
    has_been_settled: bool = Field(alias="hasBeenSettled")


GiveFanPointsOnPurchase.model_rebuild()
GiveFanPointsOnPurchaseGiveFanPointsOnPurchase.model_rebuild()
GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseErrors.model_rebuild()
GiveFanPointsOnPurchaseGiveFanPointsOnPurchaseResult.model_rebuild()
