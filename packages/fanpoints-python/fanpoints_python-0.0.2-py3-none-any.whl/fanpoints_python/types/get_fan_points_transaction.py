# Generated by ariadne-codegen
# Source: fanpoints_python/queries

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import Currency, FanPointsTransactionType


class GetFanPointsTransaction(BaseModel):
    get_fan_points_transaction: "GetFanPointsTransactionGetFanPointsTransaction" = (
        Field(alias="getFanPointsTransaction")
    )


class GetFanPointsTransactionGetFanPointsTransaction(BaseModel):
    result: Optional["GetFanPointsTransactionGetFanPointsTransactionResult"]
    errors: Optional["GetFanPointsTransactionGetFanPointsTransactionErrors"]


class GetFanPointsTransactionGetFanPointsTransactionResult(BaseModel):
    purchase_id: str = Field(alias="purchaseId")
    user_id: str = Field(alias="userId")
    transaction_type: FanPointsTransactionType = Field(alias="transactionType")
    purchase_items: List[
        "GetFanPointsTransactionGetFanPointsTransactionResultPurchaseItems"
    ] = Field(alias="purchaseItems")


class GetFanPointsTransactionGetFanPointsTransactionResultPurchaseItems(BaseModel):
    purchase_item_id: str = Field(alias="purchaseItemId")
    partner_id: str = Field(alias="partnerId")
    title: str
    description: str
    price: float
    currency: Currency
    amount: int
    rate_label: Optional[str] = Field(alias="rateLabel")
    date: str
    has_been_undone: bool = Field(alias="hasBeenUndone")
    has_been_settled: bool = Field(alias="hasBeenSettled")


class GetFanPointsTransactionGetFanPointsTransactionErrors(BaseModel):
    unknown_user_error: Optional[
        "GetFanPointsTransactionGetFanPointsTransactionErrorsUnknownUserError"
    ] = Field(alias="unknownUserError")
    transaction_not_found_error: Optional[
        "GetFanPointsTransactionGetFanPointsTransactionErrorsTransactionNotFoundError"
    ] = Field(alias="transactionNotFoundError")


class GetFanPointsTransactionGetFanPointsTransactionErrorsUnknownUserError(BaseModel):
    empty: Optional[str] = Field(alias="_empty")


class GetFanPointsTransactionGetFanPointsTransactionErrorsTransactionNotFoundError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


GetFanPointsTransaction.model_rebuild()
GetFanPointsTransactionGetFanPointsTransaction.model_rebuild()
GetFanPointsTransactionGetFanPointsTransactionResult.model_rebuild()
GetFanPointsTransactionGetFanPointsTransactionErrors.model_rebuild()
