# Generated by ariadne-codegen
# Source: https://jdb5iouccjaatkttxjgrrph2by.appsync-api.eu-central-1.amazonaws.com/graphql

from enum import Enum


class AggregateType(str, Enum):
    basic = "basic"
    numerical = "numerical"
    list = "list"


class AchievementCategory(str, Enum):
    general = "general"
    social = "social"
    collection = "collection"
    exploration = "exploration"
    esports = "esports"
    rare = "rare"


class ScopeType(str, Enum):
    partner = "partner"
    project = "project"


class Currency(str, Enum):
    chf = "chf"
    eur = "eur"
    usd = "usd"
    fp = "fp"


class Role(str, Enum):
    owner = "owner"
    admin = "admin"
    user = "user"
    content_manager = "content_manager"
    unauthorized = "unauthorized"


class Period(str, Enum):
    day = "day"
    day_cumulative = "day_cumulative"


class PartyType(str, Enum):
    project = "project"
    partner = "partner"


class QrCodeVersion(str, Enum):
    deep_link_distribute = "deep_link_distribute"
    json_v1 = "json_v1"


class FanPointsTransactionType(str, Enum):
    distributed_on_purchase = "distributed_on_purchase"
    purchased_with_fanpoints = "purchased_with_fanpoints"
    undo_distributed_on_purchase = "undo_distributed_on_purchase"
    undo_purchased_with_fanpoints = "undo_purchased_with_fanpoints"


class FanPointsRateType(str, Enum):
    relative = "relative"
    absolute = "absolute"


class ProductCategory(str, Enum):
    product = "product"
    experience = "experience"
    memorabilia = "memorabilia"


class DeliveryStatus(str, Enum):
    not_delivered = "not_delivered"
    delivered = "delivered"


class TransactionType(str, Enum):
    daily_draw = "daily_draw"
    daily_lootbox = "daily_lootbox"
    lootbox_reveal = "lootbox_reveal"
    lootbox_reward = "lootbox_reward"
    card_level_purchase = "card_level_purchase"
    card_trade = "card_trade"
    points_gift = "points_gift"
    revoke_reservation = "revoke_reservation"
    coupon_redemption = "coupon_redemption"
    coupon_claim = "coupon_claim"
    general_claim = "general_claim"
    achievement = "achievement"
    issue_partner_reward = "issue_partner_reward"
    issue_in_season_reward = "issue_in_season_reward"
    issue_end_season_lootbox = "issue_end_season_lootbox"
    default_skin_distribution = "default_skin_distribution"
    card_progress_lootbox = "card_progress_lootbox"
    shop_purchase = "shop_purchase"
    fan_points_collection = "fan_points_collection"
    fan_points_distribution = "fan_points_distribution"
    undo_transaction = "undo_transaction"


class ApprovalStatus(str, Enum):
    pending = "pending"
    approved = "approved"
    rejected = "rejected"


class AuctionResultStatus(str, Enum):
    not_yet_distributed = "not_yet_distributed"
    distributed = "distributed"
    too_few_available = "too_few_available"
    too_few_bids = "too_few_bids"


class LotteryDrawStatus(str, Enum):
    not_yet_drawn = "not_yet_drawn"
    drawn = "drawn"
    too_few_tickets = "too_few_tickets"
    too_few_available = "too_few_available"
    partially_drawn = "partially_drawn"


class RewardPurpose(str, Enum):
    shop = "shop"
    lootbox_rewards = "lootbox_rewards"


class LootboxFrequency(str, Enum):
    daily = "daily"
    weekly = "weekly"


class InvoicePeriod(str, Enum):
    weekly = "weekly"
    biweekly = "biweekly"
    monthly = "monthly"


class ProductApprovalStatus(str, Enum):
    approved = "approved"
    rejected = "rejected"
    pending = "pending"


class ShopItemDistributionType(str, Enum):
    purchase = "purchase"
    lottery = "lottery"
    bidding = "bidding"
