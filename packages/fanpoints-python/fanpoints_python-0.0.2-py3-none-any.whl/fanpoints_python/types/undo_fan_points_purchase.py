# Generated by ariadne-codegen
# Source: fanpoints_python/queries

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import Currency, FanPointsTransactionType


class UndoFanPointsPurchase(BaseModel):
    undo_fan_points_purchase: "UndoFanPointsPurchaseUndoFanPointsPurchase" = Field(
        alias="undoFanPointsPurchase"
    )


class UndoFanPointsPurchaseUndoFanPointsPurchase(BaseModel):
    result: Optional["UndoFanPointsPurchaseUndoFanPointsPurchaseResult"]
    errors: Optional["UndoFanPointsPurchaseUndoFanPointsPurchaseErrors"]


class UndoFanPointsPurchaseUndoFanPointsPurchaseResult(BaseModel):
    purchase_id: str = Field(alias="purchaseId")
    user_id: str = Field(alias="userId")
    transaction_type: FanPointsTransactionType = Field(alias="transactionType")
    purchase_items: List[
        "UndoFanPointsPurchaseUndoFanPointsPurchaseResultPurchaseItems"
    ] = Field(alias="purchaseItems")


class UndoFanPointsPurchaseUndoFanPointsPurchaseResultPurchaseItems(BaseModel):
    purchase_item_id: str = Field(alias="purchaseItemId")
    partner_id: str = Field(alias="partnerId")
    title: str
    description: str
    price: float
    currency: Currency
    amount: int
    rate_label: Optional[str] = Field(alias="rateLabel")
    date: str
    has_been_undone: bool = Field(alias="hasBeenUndone")
    has_been_settled: bool = Field(alias="hasBeenSettled")


class UndoFanPointsPurchaseUndoFanPointsPurchaseErrors(BaseModel):
    unknown_user_error: Optional[
        "UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsUnknownUserError"
    ] = Field(alias="unknownUserError")
    invalid_reward_amount_error: Optional[
        "UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsInvalidRewardAmountError"
    ] = Field(alias="invalidRewardAmountError")
    too_few_available_error: Optional[
        "UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsTooFewAvailableError"
    ] = Field(alias="tooFewAvailableError")
    transaction_not_found_error: Optional[
        "UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsTransactionNotFoundError"
    ] = Field(alias="transactionNotFoundError")
    invalid_transaction_id_error: Optional[
        "UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsInvalidTransactionIdError"
    ] = Field(alias="invalidTransactionIdError")
    already_executed_error: Optional[
        "UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsAlreadyExecutedError"
    ] = Field(alias="alreadyExecutedError")


class UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsUnknownUserError(BaseModel):
    empty: Optional[str] = Field(alias="_empty")


class UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsInvalidRewardAmountError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsTooFewAvailableError(BaseModel):
    empty: Optional[str] = Field(alias="_empty")


class UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsTransactionNotFoundError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsInvalidTransactionIdError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class UndoFanPointsPurchaseUndoFanPointsPurchaseErrorsAlreadyExecutedError(BaseModel):
    empty: Optional[str] = Field(alias="_empty")


UndoFanPointsPurchase.model_rebuild()
UndoFanPointsPurchaseUndoFanPointsPurchase.model_rebuild()
UndoFanPointsPurchaseUndoFanPointsPurchaseResult.model_rebuild()
UndoFanPointsPurchaseUndoFanPointsPurchaseErrors.model_rebuild()
