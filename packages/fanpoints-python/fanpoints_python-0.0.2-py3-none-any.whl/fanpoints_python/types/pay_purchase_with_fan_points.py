# Generated by ariadne-codegen
# Source: fanpoints_python/queries

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import Currency, FanPointsTransactionType


class PayPurchaseWithFanPoints(BaseModel):
    pay_purchase_with_fan_points: "PayPurchaseWithFanPointsPayPurchaseWithFanPoints" = (
        Field(alias="payPurchaseWithFanPoints")
    )


class PayPurchaseWithFanPointsPayPurchaseWithFanPoints(BaseModel):
    errors: Optional["PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrors"]
    result: Optional["PayPurchaseWithFanPointsPayPurchaseWithFanPointsResult"]


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrors(BaseModel):
    unknown_user_error: Optional[
        "PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsUnknownUserError"
    ] = Field(alias="unknownUserError")
    invalid_reward_amount_error: Optional[
        "PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsInvalidRewardAmountError"
    ] = Field(alias="invalidRewardAmountError")
    too_few_available_error: Optional[
        "PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsTooFewAvailableError"
    ] = Field(alias="tooFewAvailableError")
    invalid_transaction_id_error: Optional[
        "PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsInvalidTransactionIdError"
    ] = Field(alias="invalidTransactionIdError")
    invalid_rate_label_error: Optional[
        "PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsInvalidRateLabelError"
    ] = Field(alias="invalidRateLabelError")
    already_executed_error: Optional[
        "PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsAlreadyExecutedError"
    ] = Field(alias="alreadyExecutedError")
    non_unique_purchase_item_ids_error: Optional[
        "PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsNonUniquePurchaseItemIdsError"
    ] = Field(alias="nonUniquePurchaseItemIdsError")


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsUnknownUserError(BaseModel):
    empty: Optional[str] = Field(alias="_empty")


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsInvalidRewardAmountError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsTooFewAvailableError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsInvalidTransactionIdError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsInvalidRateLabelError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsAlreadyExecutedError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrorsNonUniquePurchaseItemIdsError(
    BaseModel
):
    empty: Optional[str] = Field(alias="_empty")


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsResult(BaseModel):
    purchase_id: str = Field(alias="purchaseId")
    user_id: str = Field(alias="userId")
    transaction_type: FanPointsTransactionType = Field(alias="transactionType")
    purchase_items: List[
        "PayPurchaseWithFanPointsPayPurchaseWithFanPointsResultPurchaseItems"
    ] = Field(alias="purchaseItems")


class PayPurchaseWithFanPointsPayPurchaseWithFanPointsResultPurchaseItems(BaseModel):
    purchase_item_id: str = Field(alias="purchaseItemId")
    partner_id: str = Field(alias="partnerId")
    title: str
    description: str
    price: float
    currency: Currency
    amount: int
    rate_label: Optional[str] = Field(alias="rateLabel")
    date: str
    has_been_undone: bool = Field(alias="hasBeenUndone")
    has_been_settled: bool = Field(alias="hasBeenSettled")


PayPurchaseWithFanPoints.model_rebuild()
PayPurchaseWithFanPointsPayPurchaseWithFanPoints.model_rebuild()
PayPurchaseWithFanPointsPayPurchaseWithFanPointsErrors.model_rebuild()
PayPurchaseWithFanPointsPayPurchaseWithFanPointsResult.model_rebuild()
