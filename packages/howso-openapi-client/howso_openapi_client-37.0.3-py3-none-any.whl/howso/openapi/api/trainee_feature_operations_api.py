# coding: utf-8

"""
Howso API

OpenAPI implementation for interacting with the Howso API. 
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from howso.openapi.api_client import ApiClient
from howso.openapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TraineeFeatureOperationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_feature(self, trainee_id, feature_add_request, **kwargs):  # noqa: E501
        """Add a feature to a trainee.  # noqa: E501

        Add a feature to a trainee or overwrite a feature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_feature(trainee_id, feature_add_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param feature_add_request: The feature add request (required)
        :type feature_add_request: FeatureAddRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.add_feature_with_http_info(trainee_id, feature_add_request, **kwargs)  # noqa: E501

    def add_feature_with_http_info(self, trainee_id, feature_add_request, **kwargs):  # noqa: E501
        """Add a feature to a trainee.  # noqa: E501

        Add a feature to a trainee or overwrite a feature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_feature_with_http_info(trainee_id, feature_add_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param feature_add_request: The feature add request (required)
        :type feature_add_request: FeatureAddRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'feature_add_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_feature" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `add_feature`")  # noqa: E501
        # verify the required parameter 'feature_add_request' is set
        if self.api_client.client_side_validation and local_var_params.get('feature_add_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `feature_add_request` when calling `add_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_add_request' in local_var_params:
            body_params = local_var_params['feature_add_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/feature/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_extreme_cases(self, trainee_id, extreme_cases_request, **kwargs):  # noqa: E501
        """Get extreme top or bottom cases for specified feature(s) from a trainee  # noqa: E501

        Retrieve the top or bottom number of cases for specified features, sorted top to bottom for top, and bottom to top for bottom.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_extreme_cases(trainee_id, extreme_cases_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param extreme_cases_request: (required)
        :type extreme_cases_request: ExtremeCasesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cases
        """
        kwargs['_return_http_data_only'] = True
        return self.get_extreme_cases_with_http_info(trainee_id, extreme_cases_request, **kwargs)  # noqa: E501

    def get_extreme_cases_with_http_info(self, trainee_id, extreme_cases_request, **kwargs):  # noqa: E501
        """Get extreme top or bottom cases for specified feature(s) from a trainee  # noqa: E501

        Retrieve the top or bottom number of cases for specified features, sorted top to bottom for top, and bottom to top for bottom.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_extreme_cases_with_http_info(trainee_id, extreme_cases_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param extreme_cases_request: (required)
        :type extreme_cases_request: ExtremeCasesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cases, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'extreme_cases_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_extreme_cases" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `get_extreme_cases`")  # noqa: E501
        # verify the required parameter 'extreme_cases_request' is set
        if self.api_client.client_side_validation and local_var_params.get('extreme_cases_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `extreme_cases_request` when calling `get_extreme_cases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'extreme_cases_request' in local_var_params:
            body_params = local_var_params['extreme_cases_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "Cases",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/cases/extreme', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_feature_attributes(self, trainee_id, **kwargs):  # noqa: E501
        """Get trainee feature attributes  # noqa: E501

        Get feature attributes for given trainee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_feature_attributes(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: dict[str, FeatureAttributes]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_feature_attributes_with_http_info(trainee_id, **kwargs)  # noqa: E501

    def get_feature_attributes_with_http_info(self, trainee_id, **kwargs):  # noqa: E501
        """Get trainee feature attributes  # noqa: E501

        Get feature attributes for given trainee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_feature_attributes_with_http_info(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(dict[str, FeatureAttributes], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `get_feature_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "dict[str, FeatureAttributes]",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/feature/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_feature_conviction(self, trainee_id, feature_conviction_request, **kwargs):  # noqa: E501
        """Retrieve conviction for features in the model.  # noqa: E501

        Retrieve the familiarity and/or prediction conviction for features in the model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_feature_conviction(trainee_id, feature_conviction_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param feature_conviction_request: (required)
        :type feature_conviction_request: FeatureConvictionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FeatureConviction
        """
        kwargs['_return_http_data_only'] = True
        return self.get_feature_conviction_with_http_info(trainee_id, feature_conviction_request, **kwargs)  # noqa: E501

    def get_feature_conviction_with_http_info(self, trainee_id, feature_conviction_request, **kwargs):  # noqa: E501
        """Retrieve conviction for features in the model.  # noqa: E501

        Retrieve the familiarity and/or prediction conviction for features in the model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_feature_conviction_with_http_info(trainee_id, feature_conviction_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param feature_conviction_request: (required)
        :type feature_conviction_request: FeatureConvictionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FeatureConviction, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'feature_conviction_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_conviction" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `get_feature_conviction`")  # noqa: E501
        # verify the required parameter 'feature_conviction_request' is set
        if self.api_client.client_side_validation and local_var_params.get('feature_conviction_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `feature_conviction_request` when calling `get_feature_conviction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_conviction_request' in local_var_params:
            body_params = local_var_params['feature_conviction_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "FeatureConviction",
            202: "AsyncActionAccepted",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/feature/conviction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_marginal_stats(self, trainee_id, feature_marginal_stats_request, **kwargs):  # noqa: E501
        """Get marginal stats for features  # noqa: E501

        Returns marginal stats (e.g., mean, max, mode, count) for all features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_marginal_stats(trainee_id, feature_marginal_stats_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param feature_marginal_stats_request: (required)
        :type feature_marginal_stats_request: FeatureMarginalStatsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FeatureMarginalStats
        """
        kwargs['_return_http_data_only'] = True
        return self.get_marginal_stats_with_http_info(trainee_id, feature_marginal_stats_request, **kwargs)  # noqa: E501

    def get_marginal_stats_with_http_info(self, trainee_id, feature_marginal_stats_request, **kwargs):  # noqa: E501
        """Get marginal stats for features  # noqa: E501

        Returns marginal stats (e.g., mean, max, mode, count) for all features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_marginal_stats_with_http_info(trainee_id, feature_marginal_stats_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param feature_marginal_stats_request: (required)
        :type feature_marginal_stats_request: FeatureMarginalStatsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FeatureMarginalStats, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'feature_marginal_stats_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_marginal_stats" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `get_marginal_stats`")  # noqa: E501
        # verify the required parameter 'feature_marginal_stats_request' is set
        if self.api_client.client_side_validation and local_var_params.get('feature_marginal_stats_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `feature_marginal_stats_request` when calling `get_marginal_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_marginal_stats_request' in local_var_params:
            body_params = local_var_params['feature_marginal_stats_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "FeatureMarginalStats",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/feature/stats/marginal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_substitution_map(self, trainee_id, **kwargs):  # noqa: E501
        """get_substitution_map  # noqa: E501

        Get the trainee's substitution map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_substitution_map(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: dict[str, object]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_substitution_map_with_http_info(trainee_id, **kwargs)  # noqa: E501

    def get_substitution_map_with_http_info(self, trainee_id, **kwargs):  # noqa: E501
        """get_substitution_map  # noqa: E501

        Get the trainee's substitution map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_substitution_map_with_http_info(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(dict[str, object], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_substitution_map" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `get_substitution_map`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "dict[str, object]",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/substitution-map', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def remove_feature(self, trainee_id, feature_remove_request, **kwargs):  # noqa: E501
        """Remove a feature from a trainee.  # noqa: E501

        Remove a feature from a trainee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_feature(trainee_id, feature_remove_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param feature_remove_request: The feature remove request. (required)
        :type feature_remove_request: FeatureRemoveRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.remove_feature_with_http_info(trainee_id, feature_remove_request, **kwargs)  # noqa: E501

    def remove_feature_with_http_info(self, trainee_id, feature_remove_request, **kwargs):  # noqa: E501
        """Remove a feature from a trainee.  # noqa: E501

        Remove a feature from a trainee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_feature_with_http_info(trainee_id, feature_remove_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param feature_remove_request: The feature remove request. (required)
        :type feature_remove_request: FeatureRemoveRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'feature_remove_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_feature" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `remove_feature`")  # noqa: E501
        # verify the required parameter 'feature_remove_request' is set
        if self.api_client.client_side_validation and local_var_params.get('feature_remove_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `feature_remove_request` when calling `remove_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_remove_request' in local_var_params:
            body_params = local_var_params['feature_remove_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/feature/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_feature_attributes(self, trainee_id, request_body, **kwargs):  # noqa: E501
        """Set all trainee feature attributes  # noqa: E501

        Set all feature attributes for given trainee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_feature_attributes(trainee_id, request_body, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param request_body: (required)
        :type request_body: dict[str, FeatureAttributes]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: dict[str, FeatureAttributes]
        """
        kwargs['_return_http_data_only'] = True
        return self.set_feature_attributes_with_http_info(trainee_id, request_body, **kwargs)  # noqa: E501

    def set_feature_attributes_with_http_info(self, trainee_id, request_body, **kwargs):  # noqa: E501
        """Set all trainee feature attributes  # noqa: E501

        Set all feature attributes for given trainee.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_feature_attributes_with_http_info(trainee_id, request_body, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param request_body: (required)
        :type request_body: dict[str, FeatureAttributes]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(dict[str, FeatureAttributes], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_feature_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `set_feature_attributes`")  # noqa: E501
        # verify the required parameter 'request_body' is set
        if self.api_client.client_side_validation and local_var_params.get('request_body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `request_body` when calling `set_feature_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "dict[str, FeatureAttributes]",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/feature/attributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_substitution_map(self, trainee_id, request_body, **kwargs):  # noqa: E501
        """set_substitution_map  # noqa: E501

        Set the trainee's substitution map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_substitution_map(trainee_id, request_body, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param request_body: A map of feature name to a map of feature value to substitute feature value. If this map is null, all substitutions will be disabled and cleared. If any feature in this map has a missing or null features mapping, substitution values will immediately be generated for that feature.  (required)
        :type request_body: dict[str, object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.set_substitution_map_with_http_info(trainee_id, request_body, **kwargs)  # noqa: E501

    def set_substitution_map_with_http_info(self, trainee_id, request_body, **kwargs):  # noqa: E501
        """set_substitution_map  # noqa: E501

        Set the trainee's substitution map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_substitution_map_with_http_info(trainee_id, request_body, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param request_body: A map of feature name to a map of feature value to substitute feature value. If this map is null, all substitutions will be disabled and cleared. If any feature in this map has a missing or null features mapping, substitution values will immediately be generated for that feature.  (required)
        :type request_body: dict[str, object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_substitution_map" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `set_substitution_map`")  # noqa: E501
        # verify the required parameter 'request_body' is set
        if self.api_client.client_side_validation and local_var_params.get('request_body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `request_body` when calling `set_substitution_map`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PUT', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/substitution-map', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
