# coding: utf-8

"""
Howso API

OpenAPI implementation for interacting with the Howso API. 
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from howso.openapi.api_client import ApiClient
from howso.openapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TraineeCaseOperationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def edit_cases(self, trainee_id, case_edit_request, **kwargs):  # noqa: E501
        """Edit one or more cases in a trainee.  # noqa: E501

        Edits the specified cases from the model.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edit_cases(trainee_id, case_edit_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param case_edit_request: The cases to be edited and the values to change. (required)
        :type case_edit_request: CaseEditRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CaseCountResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.edit_cases_with_http_info(trainee_id, case_edit_request, **kwargs)  # noqa: E501

    def edit_cases_with_http_info(self, trainee_id, case_edit_request, **kwargs):  # noqa: E501
        """Edit one or more cases in a trainee.  # noqa: E501

        Edits the specified cases from the model.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edit_cases_with_http_info(trainee_id, case_edit_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param case_edit_request: The cases to be edited and the values to change. (required)
        :type case_edit_request: CaseEditRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CaseCountResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'case_edit_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_cases" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `edit_cases`")  # noqa: E501
        # verify the required parameter 'case_edit_request' is set
        if self.api_client.client_side_validation and local_var_params.get('case_edit_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `case_edit_request` when calling `edit_cases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'case_edit_request' in local_var_params:
            body_params = local_var_params['case_edit_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "CaseCountResponse",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/cases/edit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_cases(self, trainee_id, **kwargs):  # noqa: E501
        """Get case data from a trainee  # noqa: E501

        Get the case data from a trainee.  If session id is supplied, only data from the specified session will be returned in the order it was trained. If session id is not provided, retrieves all feature values for cases for all (unordered) sessions in the order they were trained within each session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cases(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param cases_request:
        :type cases_request: CasesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cases
        """
        kwargs['_return_http_data_only'] = True
        return self.get_cases_with_http_info(trainee_id, **kwargs)  # noqa: E501

    def get_cases_with_http_info(self, trainee_id, **kwargs):  # noqa: E501
        """Get case data from a trainee  # noqa: E501

        Get the case data from a trainee.  If session id is supplied, only data from the specified session will be returned in the order it was trained. If session id is not provided, retrieves all feature values for cases for all (unordered) sessions in the order they were trained within each session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cases_with_http_info(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param cases_request:
        :type cases_request: CasesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cases, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'cases_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cases" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `get_cases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cases_request' in local_var_params:
            body_params = local_var_params['cases_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "Cases",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/cases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_num_training_cases(self, trainee_id, **kwargs):  # noqa: E501
        """Get the number of cases for a trainee  # noqa: E501

        Return the number of cases in a trainee.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_num_training_cases(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CaseCountResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_num_training_cases_with_http_info(trainee_id, **kwargs)  # noqa: E501

    def get_num_training_cases_with_http_info(self, trainee_id, **kwargs):  # noqa: E501
        """Get the number of cases for a trainee  # noqa: E501

        Return the number of cases in a trainee.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_num_training_cases_with_http_info(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CaseCountResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_num_training_cases" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `get_num_training_cases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "CaseCountResponse",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/cases/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def remove_cases(self, trainee_id, case_remove_request, **kwargs):  # noqa: E501
        """Remove one or more cases from a trainee  # noqa: E501

        Remove the specified cases from the model.  WARNING -- if the number of cases to be removed meets or exceeds the number of cases in the trainee, all training cases will be removed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_cases(trainee_id, case_remove_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param case_remove_request: The cases to be removed (required)
        :type case_remove_request: CaseRemoveRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CaseCountResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.remove_cases_with_http_info(trainee_id, case_remove_request, **kwargs)  # noqa: E501

    def remove_cases_with_http_info(self, trainee_id, case_remove_request, **kwargs):  # noqa: E501
        """Remove one or more cases from a trainee  # noqa: E501

        Remove the specified cases from the model.  WARNING -- if the number of cases to be removed meets or exceeds the number of cases in the trainee, all training cases will be removed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_cases_with_http_info(trainee_id, case_remove_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param case_remove_request: The cases to be removed (required)
        :type case_remove_request: CaseRemoveRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CaseCountResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'case_remove_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_cases" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `remove_cases`")  # noqa: E501
        # verify the required parameter 'case_remove_request' is set
        if self.api_client.client_side_validation and local_var_params.get('case_remove_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `case_remove_request` when calling `remove_cases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'case_remove_request' in local_var_params:
            body_params = local_var_params['case_remove_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "CaseCountResponse",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/cases/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
