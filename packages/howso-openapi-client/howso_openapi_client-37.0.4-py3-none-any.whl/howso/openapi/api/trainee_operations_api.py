# coding: utf-8

"""
Howso API

OpenAPI implementation for interacting with the Howso API. 
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from howso.openapi.api_client import ApiClient
from howso.openapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TraineeOperationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def analyze(self, trainee_id, analyze_request, **kwargs):  # noqa: E501
        """Analyze the trainee  # noqa: E501

        Analyzes the data to compute the appropriate statistics, uncertainties, and select parameters as appropriate. Note: this is an asynchronous call and may take a non-trivial amount of time. While this operation is in progress, the trainee will not be available.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.analyze(trainee_id, analyze_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param analyze_request: The features to analyze. (required)
        :type analyze_request: AnalyzeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AsyncActionAccepted
        """
        kwargs['_return_http_data_only'] = True
        return self.analyze_with_http_info(trainee_id, analyze_request, **kwargs)  # noqa: E501

    def analyze_with_http_info(self, trainee_id, analyze_request, **kwargs):  # noqa: E501
        """Analyze the trainee  # noqa: E501

        Analyzes the data to compute the appropriate statistics, uncertainties, and select parameters as appropriate. Note: this is an asynchronous call and may take a non-trivial amount of time. While this operation is in progress, the trainee will not be available.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.analyze_with_http_info(trainee_id, analyze_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param analyze_request: The features to analyze. (required)
        :type analyze_request: AnalyzeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AsyncActionAccepted, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'analyze_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyze" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `analyze`")  # noqa: E501
        # verify the required parameter 'analyze_request' is set
        if self.api_client.client_side_validation and local_var_params.get('analyze_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `analyze_request` when calling `analyze`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analyze_request' in local_var_params:
            body_params = local_var_params['analyze_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            202: "AsyncActionAccepted",
            204: None,
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/analyze', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def append_to_series_store(self, trainee_id, append_to_series_store_request, **kwargs):  # noqa: E501
        """Append contexts to series store  # noqa: E501

        Append the given contexts to a series store.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.append_to_series_store(trainee_id, append_to_series_store_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param append_to_series_store_request: The contexts to be appended. (required)
        :type append_to_series_store_request: AppendToSeriesStoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.append_to_series_store_with_http_info(trainee_id, append_to_series_store_request, **kwargs)  # noqa: E501

    def append_to_series_store_with_http_info(self, trainee_id, append_to_series_store_request, **kwargs):  # noqa: E501
        """Append contexts to series store  # noqa: E501

        Append the given contexts to a series store.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.append_to_series_store_with_http_info(trainee_id, append_to_series_store_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param append_to_series_store_request: The contexts to be appended. (required)
        :type append_to_series_store_request: AppendToSeriesStoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'append_to_series_store_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method append_to_series_store" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `append_to_series_store`")  # noqa: E501
        # verify the required parameter 'append_to_series_store_request' is set
        if self.api_client.client_side_validation and local_var_params.get('append_to_series_store_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `append_to_series_store_request` when calling `append_to_series_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'append_to_series_store_request' in local_var_params:
            body_params = local_var_params['append_to_series_store_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/series/append', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def auto_analyze(self, trainee_id, **kwargs):  # noqa: E501
        """Automatically analyze the trainee  # noqa: E501

        Auto-analyze the trainee model re-using all parameters from the previous analyze or set_auto_analyze_params call. If analyze or set_auto_analyze_params has not been previously called, auto_analyze will default to a robust and versatile analysis.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auto_analyze(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AsyncActionAccepted
        """
        kwargs['_return_http_data_only'] = True
        return self.auto_analyze_with_http_info(trainee_id, **kwargs)  # noqa: E501

    def auto_analyze_with_http_info(self, trainee_id, **kwargs):  # noqa: E501
        """Automatically analyze the trainee  # noqa: E501

        Auto-analyze the trainee model re-using all parameters from the previous analyze or set_auto_analyze_params call. If analyze or set_auto_analyze_params has not been previously called, auto_analyze will default to a robust and versatile analysis.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auto_analyze_with_http_info(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AsyncActionAccepted, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auto_analyze" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `auto_analyze`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            202: "AsyncActionAccepted",
            204: None,
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/analyze/auto', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def evaluate(self, trainee_id, evaluate_request, **kwargs):  # noqa: E501
        """Evaluate custom code on cases within a trainee  # noqa: E501

        Evaluate custom code on cases within a trainee   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluate(trainee_id, evaluate_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param evaluate_request: The evaluate request body. (required)
        :type evaluate_request: EvaluateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EvaluateResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.evaluate_with_http_info(trainee_id, evaluate_request, **kwargs)  # noqa: E501

    def evaluate_with_http_info(self, trainee_id, evaluate_request, **kwargs):  # noqa: E501
        """Evaluate custom code on cases within a trainee  # noqa: E501

        Evaluate custom code on cases within a trainee   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluate_with_http_info(trainee_id, evaluate_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param evaluate_request: The evaluate request body. (required)
        :type evaluate_request: EvaluateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EvaluateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'evaluate_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluate" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `evaluate`")  # noqa: E501
        # verify the required parameter 'evaluate_request' is set
        if self.api_client.client_side_validation and local_var_params.get('evaluate_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `evaluate_request` when calling `evaluate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'evaluate_request' in local_var_params:
            body_params = local_var_params['evaluate_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "EvaluateResponse",
            202: "AsyncActionAccepted",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/evaluate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_auto_ablation_params(self, trainee_id, **kwargs):  # noqa: E501
        """Get trainee parameters for auto ablation.  # noqa: E501

        Return the trainee parameters for auto ablation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_ablation_params(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AutoAblationParams
        """
        kwargs['_return_http_data_only'] = True
        return self.get_auto_ablation_params_with_http_info(trainee_id, **kwargs)  # noqa: E501

    def get_auto_ablation_params_with_http_info(self, trainee_id, **kwargs):  # noqa: E501
        """Get trainee parameters for auto ablation.  # noqa: E501

        Return the trainee parameters for auto ablation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_ablation_params_with_http_info(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AutoAblationParams, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_ablation_params" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `get_auto_ablation_params`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "AutoAblationParams",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/ablation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_workflow_attributes(self, trainee_id, trainee_workflow_attributes_request, **kwargs):  # noqa: E501
        """Get trainee workflow attributes  # noqa: E501

        Get trainee workflow attributes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_attributes(trainee_id, trainee_workflow_attributes_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param trainee_workflow_attributes_request: The workflow attributes request body. (required)
        :type trainee_workflow_attributes_request: TraineeWorkflowAttributesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TraineeWorkflowAttributes
        """
        kwargs['_return_http_data_only'] = True
        return self.get_workflow_attributes_with_http_info(trainee_id, trainee_workflow_attributes_request, **kwargs)  # noqa: E501

    def get_workflow_attributes_with_http_info(self, trainee_id, trainee_workflow_attributes_request, **kwargs):  # noqa: E501
        """Get trainee workflow attributes  # noqa: E501

        Get trainee workflow attributes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_attributes_with_http_info(trainee_id, trainee_workflow_attributes_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param trainee_workflow_attributes_request: The workflow attributes request body. (required)
        :type trainee_workflow_attributes_request: TraineeWorkflowAttributesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TraineeWorkflowAttributes, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'trainee_workflow_attributes_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `get_workflow_attributes`")  # noqa: E501
        # verify the required parameter 'trainee_workflow_attributes_request' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_workflow_attributes_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_workflow_attributes_request` when calling `get_workflow_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'trainee_workflow_attributes_request' in local_var_params:
            body_params = local_var_params['trainee_workflow_attributes_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "TraineeWorkflowAttributes",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/attributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def impute(self, trainee_id, **kwargs):  # noqa: E501
        """Impute  # noqa: E501

        Impute the specified features.  If no features are specified, impute the whole trainee.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.impute(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param impute_request: The features to impute
        :type impute_request: ImputeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AsyncActionAccepted
        """
        kwargs['_return_http_data_only'] = True
        return self.impute_with_http_info(trainee_id, **kwargs)  # noqa: E501

    def impute_with_http_info(self, trainee_id, **kwargs):  # noqa: E501
        """Impute  # noqa: E501

        Impute the specified features.  If no features are specified, impute the whole trainee.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.impute_with_http_info(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param impute_request: The features to impute
        :type impute_request: ImputeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AsyncActionAccepted, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'impute_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method impute" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `impute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'impute_request' in local_var_params:
            body_params = local_var_params['impute_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            202: "AsyncActionAccepted",
            204: None,
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/impute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def react(self, trainee_id, react_request, **kwargs):  # noqa: E501
        """React to one or more contexts  # noqa: E501

        React to one or more contexts.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react(trainee_id, react_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_request: The react request body. (required)
        :type react_request: ReactRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReactResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.react_with_http_info(trainee_id, react_request, **kwargs)  # noqa: E501

    def react_with_http_info(self, trainee_id, react_request, **kwargs):  # noqa: E501
        """React to one or more contexts  # noqa: E501

        React to one or more contexts.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_with_http_info(trainee_id, react_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_request: The react request body. (required)
        :type react_request: ReactRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReactResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'react_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method react" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `react`")  # noqa: E501
        # verify the required parameter 'react_request' is set
        if self.api_client.client_side_validation and local_var_params.get('react_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `react_request` when calling `react`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'react_request' in local_var_params:
            body_params = local_var_params['react_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "ReactResponse",
            202: "AsyncActionAccepted",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/react', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def react_aggregate(self, trainee_id, react_aggregate_request, **kwargs):  # noqa: E501
        """React Aggregate  # noqa: E501

        Compute, store, and/or return specified feature prediction stats such as Mean Decrease in Accuracy (MDA) and feature residuals into the trainee.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_aggregate(trainee_id, react_aggregate_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_aggregate_request: The react into trainee request body. (required)
        :type react_aggregate_request: ReactAggregateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReactAggregateResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.react_aggregate_with_http_info(trainee_id, react_aggregate_request, **kwargs)  # noqa: E501

    def react_aggregate_with_http_info(self, trainee_id, react_aggregate_request, **kwargs):  # noqa: E501
        """React Aggregate  # noqa: E501

        Compute, store, and/or return specified feature prediction stats such as Mean Decrease in Accuracy (MDA) and feature residuals into the trainee.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_aggregate_with_http_info(trainee_id, react_aggregate_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_aggregate_request: The react into trainee request body. (required)
        :type react_aggregate_request: ReactAggregateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReactAggregateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'react_aggregate_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method react_aggregate" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `react_aggregate`")  # noqa: E501
        # verify the required parameter 'react_aggregate_request' is set
        if self.api_client.client_side_validation and local_var_params.get('react_aggregate_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `react_aggregate_request` when calling `react_aggregate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'react_aggregate_request' in local_var_params:
            body_params = local_var_params['react_aggregate_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "ReactAggregateResponse",
            202: "AsyncActionAccepted",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/react/aggregate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def react_group(self, trainee_id, react_group_request, **kwargs):  # noqa: E501
        """React to a grouping of cases.  # noqa: E501

        Computes specified data for a grouping of cases either from another trainee or explicitly provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_group(trainee_id, react_group_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_group_request: The react group request body. (required)
        :type react_group_request: ReactGroupRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReactGroupResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.react_group_with_http_info(trainee_id, react_group_request, **kwargs)  # noqa: E501

    def react_group_with_http_info(self, trainee_id, react_group_request, **kwargs):  # noqa: E501
        """React to a grouping of cases.  # noqa: E501

        Computes specified data for a grouping of cases either from another trainee or explicitly provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_group_with_http_info(trainee_id, react_group_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_group_request: The react group request body. (required)
        :type react_group_request: ReactGroupRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReactGroupResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'react_group_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method react_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `react_group`")  # noqa: E501
        # verify the required parameter 'react_group_request' is set
        if self.api_client.client_side_validation and local_var_params.get('react_group_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `react_group_request` when calling `react_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'react_group_request' in local_var_params:
            body_params = local_var_params['react_group_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "ReactGroupResponse",
            202: "AsyncActionAccepted",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/react/group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def react_into_features(self, trainee_id, react_into_features_request, **kwargs):  # noqa: E501
        """React into features  # noqa: E501

        Calculate conviction and other data and stores them in the model to the specified features.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_into_features(trainee_id, react_into_features_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_into_features_request: The react into features request body. (required)
        :type react_into_features_request: ReactIntoFeaturesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReactIntoFeaturesResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.react_into_features_with_http_info(trainee_id, react_into_features_request, **kwargs)  # noqa: E501

    def react_into_features_with_http_info(self, trainee_id, react_into_features_request, **kwargs):  # noqa: E501
        """React into features  # noqa: E501

        Calculate conviction and other data and stores them in the model to the specified features.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_into_features_with_http_info(trainee_id, react_into_features_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_into_features_request: The react into features request body. (required)
        :type react_into_features_request: ReactIntoFeaturesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReactIntoFeaturesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'react_into_features_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method react_into_features" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `react_into_features`")  # noqa: E501
        # verify the required parameter 'react_into_features_request' is set
        if self.api_client.client_side_validation and local_var_params.get('react_into_features_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `react_into_features_request` when calling `react_into_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'react_into_features_request' in local_var_params:
            body_params = local_var_params['react_into_features_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "ReactIntoFeaturesResponse",
            202: "AsyncActionAccepted",
            204: None,
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/react/into-features', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def react_series(self, trainee_id, react_series_request, **kwargs):  # noqa: E501
        """React to one or more contexts in series  # noqa: E501

        React to one or more contexts in series.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_series(trainee_id, react_series_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_series_request: The react series request body. (required)
        :type react_series_request: ReactSeriesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReactSeriesResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.react_series_with_http_info(trainee_id, react_series_request, **kwargs)  # noqa: E501

    def react_series_with_http_info(self, trainee_id, react_series_request, **kwargs):  # noqa: E501
        """React to one or more contexts in series  # noqa: E501

        React to one or more contexts in series.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.react_series_with_http_info(trainee_id, react_series_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param react_series_request: The react series request body. (required)
        :type react_series_request: ReactSeriesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReactSeriesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'react_series_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method react_series" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `react_series`")  # noqa: E501
        # verify the required parameter 'react_series_request' is set
        if self.api_client.client_side_validation and local_var_params.get('react_series_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `react_series_request` when calling `react_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'react_series_request' in local_var_params:
            body_params = local_var_params['react_series_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "ReactSeriesResponse",
            202: "AsyncActionAccepted",
            400: "Error",
            401: "Error",
            403: "Error",
            404: "Error",
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/react/series', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def reduce_data(self, trainee_id, reduce_data_params, **kwargs):  # noqa: E501
        """Reduce trained data via influence weight entropy thresholds.  # noqa: E501

        Reduce trained data via influence weight entropy thresholds.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reduce_data(trainee_id, reduce_data_params, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param reduce_data_params: (required)
        :type reduce_data_params: ReduceDataParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.reduce_data_with_http_info(trainee_id, reduce_data_params, **kwargs)  # noqa: E501

    def reduce_data_with_http_info(self, trainee_id, reduce_data_params, **kwargs):  # noqa: E501
        """Reduce trained data via influence weight entropy thresholds.  # noqa: E501

        Reduce trained data via influence weight entropy thresholds.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reduce_data_with_http_info(trainee_id, reduce_data_params, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param reduce_data_params: (required)
        :type reduce_data_params: ReduceDataParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'reduce_data_params'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reduce_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `reduce_data`")  # noqa: E501
        # verify the required parameter 'reduce_data_params' is set
        if self.api_client.client_side_validation and local_var_params.get('reduce_data_params') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `reduce_data_params` when calling `reduce_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reduce_data_params' in local_var_params:
            body_params = local_var_params['reduce_data_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/ablation/reduce_data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def remove_series_store(self, trainee_id, remove_series_store_request, **kwargs):  # noqa: E501
        """Clear stored series from trainee  # noqa: E501

        Removes one or all of the series stored in the trainee.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_series_store(trainee_id, remove_series_store_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param remove_series_store_request: The series to be removed. (required)
        :type remove_series_store_request: RemoveSeriesStoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.remove_series_store_with_http_info(trainee_id, remove_series_store_request, **kwargs)  # noqa: E501

    def remove_series_store_with_http_info(self, trainee_id, remove_series_store_request, **kwargs):  # noqa: E501
        """Clear stored series from trainee  # noqa: E501

        Removes one or all of the series stored in the trainee.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_series_store_with_http_info(trainee_id, remove_series_store_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param remove_series_store_request: The series to be removed. (required)
        :type remove_series_store_request: RemoveSeriesStoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'remove_series_store_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_series_store" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `remove_series_store`")  # noqa: E501
        # verify the required parameter 'remove_series_store_request' is set
        if self.api_client.client_side_validation and local_var_params.get('remove_series_store_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `remove_series_store_request` when calling `remove_series_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_series_store_request' in local_var_params:
            body_params = local_var_params['remove_series_store_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/series/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_auto_ablation_params(self, trainee_id, auto_ablation_params, **kwargs):  # noqa: E501
        """Set trainee parameters for auto ablation.  # noqa: E501

        Set the trainee parameters for auto ablation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_auto_ablation_params(trainee_id, auto_ablation_params, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param auto_ablation_params: (required)
        :type auto_ablation_params: AutoAblationParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.set_auto_ablation_params_with_http_info(trainee_id, auto_ablation_params, **kwargs)  # noqa: E501

    def set_auto_ablation_params_with_http_info(self, trainee_id, auto_ablation_params, **kwargs):  # noqa: E501
        """Set trainee parameters for auto ablation.  # noqa: E501

        Set the trainee parameters for auto ablation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_auto_ablation_params_with_http_info(trainee_id, auto_ablation_params, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param auto_ablation_params: (required)
        :type auto_ablation_params: AutoAblationParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'auto_ablation_params'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_auto_ablation_params" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `set_auto_ablation_params`")  # noqa: E501
        # verify the required parameter 'auto_ablation_params' is set
        if self.api_client.client_side_validation and local_var_params.get('auto_ablation_params') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `auto_ablation_params` when calling `set_auto_ablation_params`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auto_ablation_params' in local_var_params:
            body_params = local_var_params['auto_ablation_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/ablation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_auto_analyze_params(self, trainee_id, set_auto_analyze_params_request, **kwargs):  # noqa: E501
        """Set trainee parameters for auto analysis  # noqa: E501

        Set trainee parameters for auto analysis. Auto-analysis is disabled if this is called without specifying an analyze_threshold.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_auto_analyze_params(trainee_id, set_auto_analyze_params_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param set_auto_analyze_params_request: (required)
        :type set_auto_analyze_params_request: SetAutoAnalyzeParamsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.set_auto_analyze_params_with_http_info(trainee_id, set_auto_analyze_params_request, **kwargs)  # noqa: E501

    def set_auto_analyze_params_with_http_info(self, trainee_id, set_auto_analyze_params_request, **kwargs):  # noqa: E501
        """Set trainee parameters for auto analysis  # noqa: E501

        Set trainee parameters for auto analysis. Auto-analysis is disabled if this is called without specifying an analyze_threshold.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_auto_analyze_params_with_http_info(trainee_id, set_auto_analyze_params_request, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param set_auto_analyze_params_request: (required)
        :type set_auto_analyze_params_request: SetAutoAnalyzeParamsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'set_auto_analyze_params_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_auto_analyze_params" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `set_auto_analyze_params`")  # noqa: E501
        # verify the required parameter 'set_auto_analyze_params_request' is set
        if self.api_client.client_side_validation and local_var_params.get('set_auto_analyze_params_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `set_auto_analyze_params_request` when calling `set_auto_analyze_params`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_auto_analyze_params_request' in local_var_params:
            body_params = local_var_params['set_auto_analyze_params_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PUT', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/analyze/auto/params', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_workflow_attributes(self, trainee_id, trainee_workflow_attributes, **kwargs):  # noqa: E501
        """Set the trainee workflow attributes  # noqa: E501

        Set the trainee workflow attributes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_workflow_attributes(trainee_id, trainee_workflow_attributes, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param trainee_workflow_attributes: (required)
        :type trainee_workflow_attributes: TraineeWorkflowAttributes
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.set_workflow_attributes_with_http_info(trainee_id, trainee_workflow_attributes, **kwargs)  # noqa: E501

    def set_workflow_attributes_with_http_info(self, trainee_id, trainee_workflow_attributes, **kwargs):  # noqa: E501
        """Set the trainee workflow attributes  # noqa: E501

        Set the trainee workflow attributes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_workflow_attributes_with_http_info(trainee_id, trainee_workflow_attributes, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee. (required)
        :type trainee_id: str
        :param trainee_workflow_attributes: (required)
        :type trainee_workflow_attributes: TraineeWorkflowAttributes
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'trainee_workflow_attributes'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_workflow_attributes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `set_workflow_attributes`")  # noqa: E501
        # verify the required parameter 'trainee_workflow_attributes' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_workflow_attributes') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_workflow_attributes` when calling `set_workflow_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'trainee_workflow_attributes' in local_var_params:
            body_params = local_var_params['trainee_workflow_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PUT', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/attributes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def train(self, trainee_id, **kwargs):  # noqa: E501
        """Train a model  # noqa: E501

        Supply one or more cases to a model.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.train(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee to train. (required)
        :type trainee_id: str
        :param train_request:
        :type train_request: TrainRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TrainResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.train_with_http_info(trainee_id, **kwargs)  # noqa: E501

    def train_with_http_info(self, trainee_id, **kwargs):  # noqa: E501
        """Train a model  # noqa: E501

        Supply one or more cases to a model.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.train_with_http_info(trainee_id, async_req=True)
        >>> result = thread.get()

        :param trainee_id: The id of the trainee to train. (required)
        :type trainee_id: str
        :param train_request:
        :type train_request: TrainRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TrainResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'trainee_id',
            'train_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method train" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trainee_id' is set
        if self.api_client.client_side_validation and local_var_params.get('trainee_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `trainee_id` when calling `train`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trainee_id' in local_var_params:
            path_params['trainee_id'] = local_var_params['trainee_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'train_request' in local_var_params:
            body_params = local_var_params['train_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['oauth_ums']  # noqa: E501

        response_types_map = {
            200: "TrainResponse",
            202: "AsyncActionAccepted",
            401: "Error",
            403: "Error",
            404: None,
        }

        return self.api_client.call_api(
            '/v2/trainee/{trainee_id}/train', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
