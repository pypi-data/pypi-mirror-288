"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSequenceDataOfResidue = void 0;
var structure_1 = require("../../mol-model/structure");
var types_1 = require("../../mol-model/structure/model/types");
var constant_1 = require("./constant");
var loci_1 = require("./loci");
var mapToKind = function (assignment) {
    if (types_1.SecondaryStructureType.is(assignment, 2)
    // assignment === SecondaryStructureType.SecondaryStructureDssp.H ||
    // assignment === SecondaryStructureType.SecondaryStructureDssp.G ||
    // assignment === SecondaryStructureType.SecondaryStructureDssp.I
    ) {
        return 'helix';
    }
    if (types_1.SecondaryStructureType.is(assignment, 4)
    // assignment === SecondaryStructureType.SecondaryStructureDssp.B ||
    // assignment === SecondaryStructureType.SecondaryStructureDssp.E
    ) {
        return 'sheet';
    }
    if (types_1.SecondaryStructureType.is(assignment, 16)
    // assignment === SecondaryStructureType.SecondaryStructureDssp.T
    ) {
        return 'turn';
    }
    if (types_1.SecondaryStructureType.is(assignment, 8)
    // assignment === SecondaryStructureType.SecondaryStructureDssp.S
    ) {
        return 'bend';
    }
    return 'none';
};
var getSequenceDataOfResidue = function (structure, residue, index) {
    var _a = residue[0], residueName = _a.residueName, residueId = _a.residueId, isEutectic = _a.isEutectic;
    var elementIds = residue.map(function (item) { return item.elementId; });
    var loci = (0, loci_1.getLoci)(structure, elementIds);
    var stats = structure_1.StructureElement.Stats.ofLoci(loci);
    var location;
    if (stats.elementCount > 0) {
        location = stats.firstElementLoc;
    }
    else if (stats.residueCount > 0) {
        location = stats.firstResidueLoc;
    }
    else if (stats.chainCount > 0) {
        location = stats.firstChainLoc;
    }
    else if (stats.unitCount > 0) {
        location = stats.firstUnitLoc;
    }
    else if (stats.conformationCount > 0) {
        location = stats.firstConformationLoc;
    }
    else {
        location = stats.firstStructureLoc;
    }
    var secondaryStructureType = mapToKind(structure_1.StructureProperties.residue.secondary_structure_type(location));
    return {
        residueNum: residueId,
        residueName: residueName.toUpperCase(),
        standardResidueName: constant_1.residueSubstitutions[residueName.toUpperCase()],
        oneLetter: isEutectic
            ? 'X'
            : constant_1.ResidueAbbrMap[constant_1.residueSubstitutions[residueName.toUpperCase()]] ||
                constant_1.residueSubstitutions[residueName.toUpperCase()] ||
                'X',
        elementIds: residue.map(function (item) { return item.elementId; }),
        secondaryStructureType: secondaryStructureType,
        secondaryStructureTypeInfo: structure_1.StructureProperties.residue.secondary_structure_type(location),
        secondaryStructureTypeKey: structure_1.StructureProperties.residue.secondary_structure_key(location),
        insCode: structure_1.StructureProperties.residue.pdbx_PDB_ins_code(location),
        index: index,
    };
};
exports.getSequenceDataOfResidue = getSequenceDataOfResidue;
//# sourceMappingURL=sequence.js.map