import { LightPlugin, RepresentationType } from '../index';
import { Asset, Cell, CellItem, RepresentationCell, SurfaceOrLabelHierarchyData, Theme, ThemeC, ThemeItem, TransparencyItem } from '../types';
import { Structure } from '../../mol-model/structure/structure/structure';
import { UUID } from '../../mol-util';
import { Loci } from '../../mol-model/structure/structure/element/loci';
import { Trajectory } from '../../mol-model/structure/trajectory';
export declare class CellManager {
    plugin: LightPlugin;
    idleCellSet: Set<UUID>;
    constructor(plugin: LightPlugin);
    get(ref: UUID): Cell;
    getHierarchy(ref: UUID): {
        data: {
            polymer: {};
            water: {};
            otherSolvent: {};
            metal: {};
            ion: {};
            ligand: {};
            other: {};
        };
        extraData: {
            sequenceData: {};
        };
    } | {
        extraData: {
            label: SurfaceOrLabelHierarchyData[];
            surface: SurfaceOrLabelHierarchyData[];
            sequenceData: any;
        };
        data: {
            polymer: {
                [p: string]: {
                    [p: string]: import("../utils").AtomHierarchy[];
                };
            };
            water: {
                [p: string]: {
                    [p: string]: import("../utils").AtomHierarchy[];
                };
            };
            otherSolvent: {
                [p: string]: {
                    [p: string]: import("../utils").AtomHierarchy[];
                };
            };
            metal: {
                [p: string]: {
                    [p: string]: import("../utils").AtomHierarchy[];
                };
            };
            ion: {
                [p: string]: {
                    [p: string]: import("../utils").AtomHierarchy[];
                };
            };
            ligand: {
                [p: string]: {
                    [p: string]: import("../utils").AtomHierarchy[];
                };
            };
            other: {
                [p: string]: {
                    [p: string]: import("../utils").AtomHierarchy[];
                };
            };
        };
    };
    getSequence(ref: UUID): Promise<{
        [key: string]: {
            [key: string]: any;
        };
    } | undefined>;
    getStructure(ref: UUID): Promise<any>;
    getLoci(item: CellItem): Promise<Loci | {
        kind: "empty-loci";
    }>;
    getMolecularName(ref: UUID): string;
    isFromPdb(ref: UUID): boolean;
    getCellPdbId(ref: UUID): string;
    getMeasurementName(ref: UUID, type: RepresentationType): string | void;
    create(data: {
        representations: RepresentationCell[];
        model: {
            structure?: Structure;
            loci?: Loci[];
            trajectory?: {
                state: Trajectory;
                frameIndex: number;
            };
            other?: any;
        };
        assets?: Asset[];
        theme?: Theme;
        dependency?: {
            on?: CellItem[];
            by?: UUID[];
        };
        ref?: UUID;
    }): string;
    createEmptyMolecularCell(theme?: {
        [key in ThemeC]?: {
            color?: ThemeItem;
            size?: ThemeItem;
            transparency?: TransparencyItem;
        };
    }): Promise<string>;
    copyMolecular(items: CellItem[], data?: {
        isHidden?: boolean;
    }): Promise<string[]>;
    update(ref: UUID, newCell: {
        representations?: RepresentationCell[];
        model: {
            structure?: Structure;
            loci?: Loci[];
            trajectory?: {
                state: Trajectory;
                frameIndex: number;
            };
            other?: any;
        };
        theme?: Theme;
        assets?: Asset[];
        dependency?: {
            on?: CellItem[];
            by?: UUID[];
        };
    }): void;
    remove(items: CellItem[], dependency?: CellItem): Promise<void>;
    extractMolecular(items: CellItem[], data?: {
        isHidden?: boolean;
    }): Promise<string[]>;
    addDependency(ref: UUID, dependency: {
        on?: CellItem[];
        by?: UUID[];
    }): void;
    removeDependency(ref: UUID, dependency: {
        on?: CellItem[];
        by?: UUID[];
    }): void;
    query(condition: (cell: Cell, repr: RepresentationCell) => boolean): Cell[];
    traverse(callback: (cell: Cell, repr: RepresentationCell) => void): void;
    getAllDisplayedCellsRef(): string[];
    clearReprState(ref: UUID): void;
    recoveryCache(ref: UUID, cache?: any): Promise<void>;
    recoveryReprCache(cell: Cell, cache: any): Promise<void>;
    overlapLigands(targetLigandCref: string, elementIds: number[], ligandContext: string): Promise<{
        atoms: {
            x: number;
            y: number;
            z: number;
            type_symbol: string;
            charge: any;
        }[];
        bonds: {
            a: number;
            b: number;
            order: number;
        }[];
    }>;
}
