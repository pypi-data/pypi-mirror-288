"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CPKRepr = void 0;
var tslib_1 = require("tslib");
var spacefill_1 = require("../../../mol-repr/structure/representation/spacefill");
exports.CPKRepr = {
    create: function (structure, ctx, theme) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var representation;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        representation = spacefill_1.SpacefillRepresentationProvider.factory(ctx, spacefill_1.SpacefillRepresentationProvider.getParams);
                        representation.setTheme(theme !== null && theme !== void 0 ? theme : {
                            color: ctx.colorThemeRegistry.create('element-symbol', {
                                structure: structure
                            }),
                            size: ctx.sizeThemeRegistry.create('physical', {
                                structure: structure
                            })
                        });
                        return [4 /*yield*/, representation
                                .createOrUpdate((0, tslib_1.__assign)((0, tslib_1.__assign)({}, spacefill_1.SpacefillRepresentationProvider.defaultValues), { quality: 'auto' }), structure)
                                .run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, representation];
                }
            });
        });
    },
    update: function (representation, structure, ctx, theme) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        representation.setTheme(theme !== null && theme !== void 0 ? theme : {
                            color: ctx.colorThemeRegistry.create('element-symbol', {
                                structure: structure
                            }),
                            size: ctx.sizeThemeRegistry.create('physical', {
                                structure: structure
                            })
                        });
                        return [4 /*yield*/, representation.createOrUpdate({}, structure).run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
};
//# sourceMappingURL=cpk.js.map