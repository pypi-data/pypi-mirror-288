"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReprLabelToType = exports.molCountLineFormat = exports.molBondFormatCheck = exports.molAtomLineFormat = exports.pdbConectLineFormat = exports.pdbAnisouLineFormat = exports.pdbAtomLineFormat = exports.AcidClassName = exports.AcidOverall = exports.AcidSpecial = exports.AcidNegativelyCharged = exports.AcidPositivelyCharged = exports.AcidPolarUncharged = exports.AcidHydrophobic = exports.AcidWithProtonation = exports.Acid = exports.ResidueAbbrMap = exports.residueSubstitutions = void 0;
var types_1 = require("../types");
exports.residueSubstitutions = {
    HSE: 'SER',
    HSD: 'HIS',
    HSP: 'HIS',
    '2AS': 'ASP',
    '3AH': 'HIS',
    '5HP': 'GLU',
    ACL: 'ARG',
    AGM: 'ARG',
    AIB: 'ALA',
    ALM: 'ALA',
    ALO: 'THR',
    ALY: 'LYS',
    ARM: 'ARG',
    ASA: 'ASP',
    ASB: 'ASP',
    ASK: 'ASP',
    ASL: 'ASP',
    ASQ: 'ASP',
    AYA: 'ALA',
    BCS: 'CYS',
    BHD: 'ASP',
    BMT: 'THR',
    BNN: 'ALA',
    BUC: 'CYS',
    BUG: 'LEU',
    C5C: 'CYS',
    C6C: 'CYS',
    CAS: 'CYS',
    CCS: 'CYS',
    CEA: 'CYS',
    CGU: 'GLU',
    CHG: 'GLY',
    CLE: 'LEU',
    CME: 'CYS',
    CSD: 'CYS',
    CSO: 'CYS',
    CSP: 'CYS',
    CSS: 'CYS',
    CSW: 'CYS',
    CSX: 'CYS',
    CXM: 'MET',
    CY1: 'CYS',
    CY3: 'CYS',
    CYG: 'CYS',
    CYM: 'CYS',
    CYQ: 'CYS',
    DAH: 'PHE',
    DAL: 'ALA',
    DAR: 'ARG',
    DAS: 'ASP',
    DCY: 'CYS',
    DGL: 'GLU',
    DGN: 'GLN',
    DHA: 'ALA',
    DHI: 'HIS',
    DIL: 'ILE',
    DIV: 'VAL',
    DLE: 'LEU',
    DLY: 'LYS',
    DNP: 'ALA',
    DPN: 'PHE',
    DPR: 'PRO',
    DSN: 'SER',
    DSP: 'ASP',
    DTH: 'THR',
    DTR: 'TRP',
    DTY: 'TYR',
    DVA: 'VAL',
    EFC: 'CYS',
    FLA: 'ALA',
    FME: 'MET',
    GGL: 'GLU',
    GL3: 'GLY',
    GLZ: 'GLY',
    GMA: 'GLU',
    GSC: 'GLY',
    HAC: 'ALA',
    HAR: 'ARG',
    HIC: 'HIS',
    HIP: 'HIS',
    HMR: 'ARG',
    HPQ: 'PHE',
    HTR: 'TRP',
    HYP: 'PRO',
    IAS: 'ASP',
    IIL: 'ILE',
    IYR: 'TYR',
    KCX: 'LYS',
    LLP: 'LYS',
    LLY: 'LYS',
    LTR: 'TRP',
    LYM: 'LYS',
    LYZ: 'LYS',
    MAA: 'ALA',
    MEN: 'ASN',
    MHS: 'HIS',
    MIS: 'SER',
    MLE: 'LEU',
    MPQ: 'GLY',
    MSA: 'GLY',
    MSE: 'MET',
    MVA: 'VAL',
    NEM: 'HIS',
    NEP: 'HIS',
    NLE: 'LEU',
    NLN: 'LEU',
    NLP: 'LEU',
    NMC: 'GLY',
    OAS: 'SER',
    OCS: 'CYS',
    OMT: 'MET',
    PAQ: 'TYR',
    PCA: 'GLU',
    PEC: 'CYS',
    PHI: 'PHE',
    PHL: 'PHE',
    PR3: 'CYS',
    PRR: 'ALA',
    PTR: 'TYR',
    PYX: 'CYS',
    SAC: 'SER',
    SAR: 'GLY',
    SCH: 'CYS',
    SCS: 'CYS',
    SCY: 'CYS',
    SEL: 'SER',
    SEP: 'SER',
    SET: 'SER',
    SHC: 'CYS',
    SHR: 'LYS',
    SMC: 'CYS',
    SOC: 'CYS',
    STY: 'TYR',
    SVA: 'SER',
    TIH: 'ALA',
    TPL: 'TRP',
    TPO: 'THR',
    TPQ: 'ALA',
    TRG: 'LYS',
    TRO: 'TRP',
    TYB: 'TYR',
    TYI: 'TYR',
    TYQ: 'TYR',
    TYS: 'TYR',
    TYY: 'TYR',
    ALA: 'ALA',
    ASN: 'ASN',
    CYS: 'CYS',
    GLU: 'GLU',
    HIS: 'HIS',
    LEU: 'LEU',
    MET: 'MET',
    PRO: 'PRO',
    THR: 'THR',
    TYR: 'TYR',
    ARG: 'ARG',
    ASP: 'ASP',
    GLN: 'GLN',
    GLY: 'GLY',
    ILE: 'ILE',
    LYS: 'LYS',
    PHE: 'PHE',
    SER: 'SER',
    TRP: 'TRP',
    VAL: 'VAL',
    '0CS': 'ALA',
    '1AB': 'PRO',
    '1LU': 'LEU',
    '1PA': 'PHE',
    '1TQ': 'TRP',
    '1TY': 'TYR',
    '23F': 'PHE',
    '23S': 'TRP',
    '2BU': 'ALA',
    '2ML': 'LEU',
    '2MR': 'ARG',
    '2MT': 'PRO',
    '2OP': 'ALA',
    '2TY': 'TYR',
    '32S': 'TRP',
    '32T': 'TRP',
    '3MD': 'ASP',
    '3TY': 'TYR',
    '4DP': 'TRP',
    '4F3': 'ALA',
    '4FB': 'PRO',
    '4FW': 'TRP',
    '4HT': 'TRP',
    '4IN': 'TRP',
    '4PH': 'PHE',
    '5CS': 'CYS',
    '6CL': 'LYS',
    '6CW': 'TRP',
    A0A: 'ASP',
    AA4: 'ALA',
    AAR: 'ARG',
    AB7: 'GLU',
    ABA: 'ALA',
    ACB: 'ASP',
    ACY: 'GLY',
    AEI: 'THR',
    AFA: 'ASN',
    AGT: 'CYS',
    AHB: 'ASN',
    AHO: 'ALA',
    AHP: 'ALA',
    AKL: 'ASP',
    ALC: 'ALA',
    ALG: 'ARG',
    ALN: 'ALA',
    ALS: 'ALA',
    ALT: 'ALA',
    AME: 'MET',
    AP7: 'ALA',
    APH: 'ALA',
    API: 'LYS',
    APK: 'LYS',
    AR2: 'ARG',
    AR4: 'GLU',
    ARO: 'ARG',
    ASI: 'ASP',
    AYG: 'ALA',
    AZK: 'LYS',
    B2A: 'ALA',
    B2F: 'PHE',
    B2I: 'ILE',
    B2V: 'VAL',
    B3A: 'ALA',
    B3D: 'ASP',
    B3E: 'GLU',
    B3K: 'LYS',
    B3S: 'SER',
    B3X: 'ASN',
    B3Y: 'TYR',
    BAL: 'ALA',
    BBC: 'CYS',
    BCX: 'CYS',
    BFD: 'ASP',
    BG1: 'SER',
    BIF: 'PHE',
    BLE: 'LEU',
    BLY: 'LYS',
    BOR: 'ARG',
    BPE: 'CYS',
    BTR: 'TRP',
    C12: 'ALA',
    C1X: 'LYS',
    C3Y: 'CYS',
    C99: 'ALA',
    CAB: 'ALA',
    CAF: 'CYS',
    CH6: 'ALA',
    CH7: 'ALA',
    CHP: 'GLY',
    CHS: 'PHE',
    CIR: 'ARG',
    CLB: 'ALA',
    CLD: 'ALA',
    CLG: 'LYS',
    CLH: 'LYS',
    CLV: 'ALA',
    CML: 'CYS',
    CMT: 'CYS',
    CQR: 'ALA',
    CR2: 'ALA',
    CR5: 'ALA',
    CR7: 'ALA',
    CR8: 'ALA',
    CRK: 'ALA',
    CRO: 'THR',
    CRQ: 'TYR',
    CRW: 'ALA',
    CRX: 'ALA',
    CS1: 'CYS',
    CS3: 'CYS',
    CS4: 'CYS',
    CSA: 'CYS',
    CSB: 'CYS',
    CSE: 'CYS',
    CSI: 'ALA',
    CSR: 'CYS',
    CSU: 'CYS',
    CSY: 'ALA',
    CSZ: 'CYS',
    CTH: 'THR',
    CWR: 'ALA',
    CY0: 'CYS',
    CY4: 'CYS',
    CY7: 'CYS',
    CYD: 'CYS',
    CYF: 'CYS',
    CYJ: 'LYS',
    CYR: 'CYS',
    CYX: 'CYS',
    CZ2: 'CYS',
    CZZ: 'CYS',
    DA2: 'ARG',
    DAB: 'ALA',
    DAM: 'ALA',
    DBU: 'ALA',
    DBY: 'TYR',
    DBZ: 'ALA',
    DCL: 'LEU',
    DDE: 'HIS',
    DHL: 'SER',
    DLS: 'LYS',
    DMH: 'ASN',
    DMK: 'ASP',
    DNE: 'LEU',
    DNG: 'LEU',
    DNL: 'LYS',
    DNM: 'LEU',
    DPH: 'PHE',
    DPL: 'PRO',
    DPP: 'ALA',
    DPQ: 'TYR',
    DSE: 'SER',
    DSG: 'ASN',
    DYG: 'ALA',
    DYS: 'CYS',
    ESB: 'TYR',
    ESC: 'MET',
    FCL: 'PHE',
    FGL: 'ALA',
    FGP: 'SER',
    FHL: 'LYS',
    FLE: 'LEU',
    FLT: 'TYR',
    FOE: 'CYS',
    FOG: 'PHE',
    FOR: 'MET',
    FRF: 'PHE',
    FTR: 'TRP',
    FTY: 'TYR',
    GHG: 'GLN',
    GHP: 'GLY',
    GLH: 'GLN',
    GMU: 'ALA',
    GPL: 'LYS',
    GT9: 'CYS',
    GVL: 'SER',
    GYC: 'CYS',
    GYS: 'GLY',
    H5M: 'PRO',
    HHK: 'ALA',
    HIA: 'HIS',
    HID: 'HIS',
    HIE: 'HIS',
    HIQ: 'HIS',
    HLU: 'LEU',
    HMF: 'ALA',
    HPE: 'PHE',
    HPH: 'PHE',
    HRG: 'ARG',
    HSL: 'SER',
    HSO: 'HIS',
    HTI: 'CYS',
    HY3: 'PRO',
    IAM: 'ALA',
    IGL: 'ALA',
    ILG: 'GLU',
};
exports.ResidueAbbrMap = {
    ALA: 'A',
    CYS: 'C',
    ASP: 'D',
    GLU: 'E',
    PHE: 'F',
    GLY: 'G',
    HIS: 'H',
    ILE: 'I',
    LYS: 'K',
    LEU: 'L',
    MET: 'M',
    ASN: 'N',
    PRO: 'P',
    GLN: 'Q',
    ARG: 'R',
    SER: 'S',
    THR: 'T',
    VAL: 'V',
    TRP: 'W',
    TYR: 'Y',
    HID: 'H',
    HIE: 'H',
    HIP: 'H',
    ASH: 'B',
    GLH: 'E',
    LYN: 'K',
    CYM: 'CM',
};
exports.Acid = new Map([
    [
        'Hydrophobic',
        [
            ['Y', 'TYR'],
            ['A', 'ALA'],
            ['V', 'VAL'],
            ['L', 'LEU'],
            ['I', 'ILE'],
            ['F', 'PHE'],
            ['W', 'TRP'],
            ['M', 'MET'],
            ['C', 'CYS'],
            ['P', 'PRO'],
        ],
    ],
    [
        'Polar Uncharged',
        [
            ['N', 'ASN'],
            ['Q', 'GLN'],
            ['S', 'SER'],
            ['T', 'THR'],
        ],
    ],
    [
        'Positively Charged',
        [
            ['K', 'LYS'],
            ['H', 'HIS'],
            ['R', 'ARG'],
        ],
    ],
    [
        'Negatively Charged',
        [
            ['D', 'ASP'],
            ['E', 'GLU'],
        ],
    ],
    [
        'Special',
        [
            ['G', 'GLY'],
            // ['U', 'Sec'],
        ],
    ],
]);
exports.AcidWithProtonation = new Map([
    [
        'Hydrophobic',
        [
            ['Y', 'TYR', '0'],
            ['A', 'ALA', '0'],
            ['V', 'VAL', '0'],
            ['L', 'LEU', '0'],
            ['I', 'ILE', '0'],
            ['F', 'PHE', '0'],
            ['W', 'TRP', '0'],
            ['M', 'MET', '0'],
            ['C', 'CYS', '0'],
            ['P', 'PRO', '0'],
            ['H', 'HID', '0'],
            ['H', 'HIE', '0'],
        ],
    ],
    [
        'Polar Uncharged',
        [
            ['N', 'ASN', '0'],
            ['Q', 'GLN', '0'],
            ['S', 'SER', '0'],
            ['T', 'THR', '0'],
        ],
    ],
    [
        'Positively Charged(+1)',
        [
            ['K', 'LYS', '1'],
            ['H', 'HIP', '1'],
            ['R', 'ARG', '1'],
        ],
    ],
    [
        'Negatively Charged(-1)',
        [
            ['D', 'ASP', '-1'],
            ['E', 'GLU', '-1'],
        ],
    ],
    ['Special', [['G', 'GLY', '0']]],
    [
        'Atypical',
        [
            ['B', 'ASH', '0'],
            ['E', 'GLH', '0'],
            ['K', 'LYN', '0'],
            ['CM', 'CYM', '-1', '-1'],
        ],
    ],
]);
exports.AcidHydrophobic = new Set(['Y', 'A', 'V', 'L', 'I', 'F', 'W', 'M', 'C', 'P']);
exports.AcidPolarUncharged = new Set(['N', 'Q', 'S', 'T']);
exports.AcidPositivelyCharged = new Set(['K', 'H', 'R']);
exports.AcidNegativelyCharged = new Set(['D', 'E']);
exports.AcidSpecial = new Set([
    'G',
    // , 'U'
]);
exports.AcidOverall = {
    Y: exports.AcidHydrophobic,
    A: exports.AcidHydrophobic,
    V: exports.AcidHydrophobic,
    L: exports.AcidHydrophobic,
    I: exports.AcidHydrophobic,
    F: exports.AcidHydrophobic,
    W: exports.AcidHydrophobic,
    M: exports.AcidHydrophobic,
    C: exports.AcidHydrophobic,
    P: exports.AcidHydrophobic,
    N: exports.AcidPolarUncharged,
    Q: exports.AcidPolarUncharged,
    S: exports.AcidPolarUncharged,
    T: exports.AcidPolarUncharged,
    K: exports.AcidPositivelyCharged,
    H: exports.AcidPositivelyCharged,
    R: exports.AcidPositivelyCharged,
    D: exports.AcidNegativelyCharged,
    E: exports.AcidNegativelyCharged,
    G: exports.AcidSpecial,
    // U: AcidSpecial,
};
exports.AcidClassName = {
    Y: 'acid-hydrophobic',
    A: 'acid-hydrophobic',
    V: 'acid-hydrophobic',
    L: 'acid-hydrophobic',
    I: 'acid-hydrophobic',
    F: 'acid-hydrophobic',
    W: 'acid-hydrophobic',
    M: 'acid-hydrophobic',
    C: 'acid-hydrophobic',
    P: 'acid-hydrophobic',
    N: 'acid-polar-uncharged',
    Q: 'acid-polar-uncharged',
    S: 'acid-polar-uncharged',
    T: 'acid-polar-uncharged',
    K: 'acid-positively-charged',
    H: 'acid-positively-charged',
    R: 'acid-positively-charged',
    D: 'acid-negatively-charged',
    E: 'acid-negatively-charged',
    G: 'acid-special',
    U: 'acid-special',
};
exports.pdbAtomLineFormat = [
    {
        start: 6,
        end: 11,
        regular: /[\d\s]+/,
    },
    // {
    //     start: 11,
    //     end: 12,
    //     regular: /\s/,
    // },
    {
        start: 12,
        end: 16,
        regular: /\s*[A-Z0-9]+\s*/,
    },
    {
        start: 16,
        end: 17,
        regular: /[A-Z0-9 ]{1}/,
    },
    {
        start: 17,
        end: 20,
        regular: /\s*[A-Z0-9]+\s*/,
    },
    // {
    //     start: 20,
    //     end: 21,
    //     regular: /\s/,
    // },
    {
        start: 21,
        end: 22,
        regular: /[A-Za-z0-9 ]{1}/,
    },
    {
        start: 22,
        end: 26,
        regular: /\s*[\d-]+\s*/,
    },
    {
        start: 26,
        end: 27,
        regular: /[A-Z0-9 ]{1}/,
    },
    // {
    //     start: 27,
    //     end: 30,
    //     regular: /\s+/,
    // },
    {
        start: 30,
        end: 38,
        regular: /\s*[\d.-]+\s*/,
    },
    {
        start: 38,
        end: 46,
        regular: /\s*[\d.-]+\s*/,
    },
    {
        start: 46,
        end: 54,
        regular: /\s*[\d.-]+\s*/,
    },
    {
        start: 54,
        end: 60,
        regular: /\s*[\d.-]+\s*/,
    },
    // {
    //     start: 60,
    //     end: 66,
    //     regular: /\s*[\d.-]+\s*/,
    // },
    // {
    //     start: 66,
    //     end: 72,
    //     regular: /\s+/,
    // },
    // {
    //     start: 72,
    //     end: 76,
    //     regular: /[\sA-Z0-9\-+]+/,
    // },
    // {
    //     start: 76,
    //     end: 78,
    //     regular: /[\sA-Z0-9\-+]+/,
    // },
    // {
    //     start: 78,
    //     end: 82,
    //     regular: /[\sA-Z0-9\-+]+/,
    // },
    // {
    //     start: 82,
    //     end: 84,
    //     regular: /[\sA-Z0-9\-+]+/,
    // },
    // {
    //     start: 84,
    //     end: 90,
    //     regular: /[\sA-Z0-9\-+]+/,
    // },
];
exports.pdbAnisouLineFormat = [
    {
        start: 6,
        end: 11,
        regular: /[\d\s]+/,
    },
    // {
    //     start: 11,
    //     end: 12,
    //     regular: /\s/,
    // },
    {
        start: 12,
        end: 16,
        regular: /\s*[A-Z0-9]+\s*/,
    },
    {
        start: 16,
        end: 17,
        regular: /[A-Z0-9 ]{1}/,
    },
    {
        start: 17,
        end: 20,
        regular: /\s*[A-Z0-9]+\s*/,
    },
    // {
    //     start: 20,
    //     end: 21,
    //     regular: /\s/,
    // },
    {
        start: 21,
        end: 22,
        regular: /[A-Za-z0-9 ]{1}/,
    },
    {
        start: 22,
        end: 26,
        regular: /\s*[\d-]+\s*/,
    },
    {
        start: 26,
        end: 27,
        regular: /[A-Z0-9 ]{1}/,
    },
    // {
    //     start: 27,
    //     end: 28,
    //     regular: /\s+/,
    // },
    {
        start: 28,
        end: 35,
        regular: /\s*[\d.-]+\s*/,
    },
    {
        start: 35,
        end: 42,
        regular: /\s*[\d.-]+\s*/,
    },
    {
        start: 42,
        end: 49,
        regular: /\s*[\d.-]+\s*/,
    },
    {
        start: 49,
        end: 56,
        regular: /\s*[\d.-]+\s*/,
    },
    {
        start: 56,
        end: 63,
        regular: /\s*[\d.-]+\s*/,
    },
    {
        start: 63,
        end: 70,
        regular: /\s*[\d.-]+\s*/,
    },
    // {
    //     start: 70,
    //     end: 76,
    //     regular: /\s+/,
    // },
    // {
    //     start: 76,
    //     end: 78,
    //     regular: /[\sA-Z0-9\-+]+/,
    // },
    // {
    //     start: 78,
    //     end: 80,
    //     regular: /[\sA-Z0-9\-+]+/,
    // },
];
exports.pdbConectLineFormat = [
    {
        start: 6,
        end: 11,
        regular: /[\d\s]+/,
    },
    {
        start: 11,
        end: 16,
        regular: /[\d\s]+/,
    },
    {
        start: 16,
        end: 21,
        regular: /[\d\s]+/,
    },
    {
        start: 21,
        end: 26,
        regular: /[\d\s]+/,
    },
    {
        start: 26,
        end: 31,
        regular: /[\d\s]+/,
    },
];
exports.molAtomLineFormat = [
    {
        start: 0,
        end: 10,
        regular: /\s*[\d.-]+/,
    },
    {
        start: 10,
        end: 20,
        regular: /\s*[\d.-]+/,
    },
    {
        start: 20,
        end: 30,
        regular: /\s*[\d.-]+/,
    },
    // {
    //     start: 30,
    //     end: 31,
    //     regular: /\s/,
    // },
    {
        start: 31,
        end: 33,
        regular: /[\sA-Za-z]+/,
    },
];
exports.molBondFormatCheck = [
    {
        start: 0,
        end: 3,
        regular: /\s*[\d]+/,
    },
    {
        start: 3,
        end: 6,
        regular: /\s*[\d]+/,
    },
    {
        start: 6,
        end: 9,
        regular: /\s*[\d]+/,
    },
    // {
    //     start: 9,
    //     end: 12,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 12,
    //     end: 15,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 15,
    //     end: 18,
    //     regular: /[\d\s]+/,
    // },
];
exports.molCountLineFormat = [
    {
        start: 0,
        end: 3,
        regular: /\s*[\d]+/,
    },
    {
        start: 3,
        end: 6,
        regular: /\s*[\d]+/,
    },
    // {
    //     start: 6,
    //     end: 9,
    //     regular: /\s*[\d]+/,
    // },
    // {
    //     start: 9,
    //     end: 12,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 12,
    //     end: 15,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 15,
    //     end: 18,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 18,
    //     end: 21,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 21,
    //     end: 24,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 24,
    //     end: 27,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 27,
    //     end: 30,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 30,
    //     end: 33,
    //     regular: /[\d\s]+/,
    // },
    // {
    //     start: 33,
    //     end: 38,
    //     regular: /[\sA-Z0-9+]+/,
    // },
];
exports.ReprLabelToType = {
    Dihedral: types_1.RepresentationType.Dihedral,
    Distance: types_1.RepresentationType.Distance,
    Angle: types_1.RepresentationType.Angle,
    Label: types_1.RepresentationType.Label,
    'Molecular Surface': types_1.RepresentationType.Surface,
    'Ball & Stick': types_1.RepresentationType.BallAndStick,
    Line: types_1.RepresentationType.Line,
    Stick: types_1.RepresentationType.Stick,
    Spacefill: types_1.RepresentationType.CPK,
    Cartoon: types_1.RepresentationType.Ribbon,
};
//# sourceMappingURL=constant.js.map