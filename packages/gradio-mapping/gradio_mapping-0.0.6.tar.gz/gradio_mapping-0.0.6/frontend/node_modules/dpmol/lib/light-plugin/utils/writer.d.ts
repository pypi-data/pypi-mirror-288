import { Vec3 } from '../../mol-math/linear-algebra';
import { Structure } from '../../mol-model/structure';
import { MolecularFileFormatErrorLine, Format } from '../types';
export interface AtomData {
    elementId: number;
    group_PDB: string;
    atom_id: string;
    auth_atom_id: string;
    label_alt_id: string;
    auth_comp_id: string;
    auth_asym_id: string;
    auth_seq_id: string;
    pdbx_PDB_ins_code?: string;
    x: number;
    y: number;
    z: number;
    occupancy: string;
    B_iso_or_equiv: string;
    type_symbol: string;
    charge?: number;
    em_confidence?: number;
}
export interface BondData {
    a: number;
    b: number;
    order: number;
    atom_idA?: string;
    atom_idB?: string;
}
export declare enum MIME {
    PDB = "chemical/pdb",
    SDF = "chemical/x-mdl-sdf",
    MOL = "chemical/x-mdl-molfile",
    MOL2 = "chemical/x-mol2"
}
export declare const getPDBSectionLine: (structure: Structure, section: string[]) => any;
export declare function parseToPDB(structure: any, elementIds?: number[], isInternalTransfer?: boolean, editPDBFunc?: (atomList: AtomData[], bondList: BondData[]) => {
    editedAtomList: AtomData[];
    editedBondList: BondData[];
    affectedAtomIds?: number[];
}): string;
export declare function atomDataToPdb(atomList: AtomData[], bondList: BondData[], hasElectrostatic?: boolean, hasEmConfidence?: boolean): string;
export declare function parseToSdf(structure: any, elementIds?: number[], isFromRCSB?: boolean, editMolFunc?: (atomList: AtomData[], bondList: BondData[]) => {
    editedAtomList: AtomData[];
    editedBondList: BondData[];
    affectedAtomIds?: number[];
}, allowAromaticBondType?: boolean): string;
export declare const atomDataToSdf: (atomList: AtomData[], bondsList: BondData[], molecularName?: string | undefined) => string;
export declare const getDefaultAtomData: (atomId: string, elementType: string, position: Vec3, charge?: number | undefined) => {
    elementId: number;
    group_PDB: string;
    atom_id: string;
    auth_atom_id: string;
    label_alt_id: string;
    auth_comp_id: string;
    auth_asym_id: string;
    auth_seq_id: string;
    x: number;
    y: number;
    z: number;
    occupancy: string;
    B_iso_or_equiv: string;
    type_symbol: string;
    charge: number;
};
export declare const getMergedStructureContent: (structures: any[], newBondAtoms?: {
    index: number;
    elementId: number[];
}[] | undefined) => {
    format: string;
    type: MIME;
    content: string;
};
export declare const splitMolecularContent: (content: string, format: Format) => string[];
export declare const splitPdbContent: (content: string) => string[];
export declare const splitSdfContent: (content: string) => string[];
export declare const pdbValidate: (content: string) => MolecularFileFormatErrorLine[];
export declare const molValidate: (content: string) => MolecularFileFormatErrorLine[];
export declare const checkFileFormat: (content: string, foramt: Format) => MolecularFileFormatErrorLine[];
