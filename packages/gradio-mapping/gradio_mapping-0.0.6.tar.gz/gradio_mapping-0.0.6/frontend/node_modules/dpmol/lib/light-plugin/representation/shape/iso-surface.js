"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsoSurfaceRepr = void 0;
var tslib_1 = require("tslib");
var isosurface_1 = require("../../../mol-repr/volume/isosurface");
var ccp4_1 = require("../../model/ccp4");
exports.IsoSurfaceRepr = {
    createTheme: function (item, plugin, theme) {
        var _a, _b;
        if (!(theme === null || theme === void 0 ? void 0 : theme.color))
            return undefined;
        return {
            color: (_a = plugin.managers.representation.ctx) === null || _a === void 0 ? void 0 : _a.colorThemeRegistry.create(theme.color.name, { volume: item }, theme.color.props),
            size: (_b = plugin.managers.representation.ctx) === null || _b === void 0 ? void 0 : _b.colorThemeRegistry.create('uniform', {}, {})
        };
    },
    parse: function (file, plugin) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var arrayBuffer, res;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file.arrayBuffer()];
                    case 1:
                        arrayBuffer = _a.sent();
                        return [4 /*yield*/, ccp4_1.CCP4Model.parse(new Uint8Array(arrayBuffer))];
                    case 2:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    },
    create: function (data, ctx, theme, params) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var representation;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        representation = (0, isosurface_1.IsosurfaceRepresentation)(ctx, function () { return isosurface_1.IsosurfaceParams; });
                        if (theme) {
                            representation.setTheme(theme);
                        }
                        return [4 /*yield*/, representation.createOrUpdate(params !== null && params !== void 0 ? params : {}, data).run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, representation];
                }
            });
        });
    },
    update: function (representation, data, ctx, theme, params) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, representation.createOrUpdate(params !== null && params !== void 0 ? params : {}, data).run()];
                    case 1:
                        _a.sent();
                        if (theme) {
                            representation.setTheme(theme);
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
};
//# sourceMappingURL=iso-surface.js.map