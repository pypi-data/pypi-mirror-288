"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrawEditor = void 0;
var tslib_1 = require("tslib");
var loci_1 = require("../../../mol-model/structure/structure/element/loci");
var __1 = require("../..");
var structure_1 = require("../../../mol-model/structure");
var int_1 = require("../../../mol-data/int");
var rx_event_helper_1 = require("../../../mol-util/rx-event-helper");
var writer_1 = require("../../utils/writer");
var drawInitialState = {
    elementType: 'C',
    drawClickObserver: undefined,
    position: undefined,
    isDelete: false,
};
var DrawEditor = /** @class */ (function () {
    function DrawEditor(plugin) {
        this.ev = rx_event_helper_1.RxEventHelper.create();
        this.state = drawInitialState;
        this.event = {
            update: this.ev()
        };
        this.plugin = plugin;
    }
    DrawEditor.prototype.setElementType = function (elementType) {
        this.state.elementType = elementType;
    };
    DrawEditor.prototype.setPosition = function (position) {
        this.state.position = position;
    };
    DrawEditor.prototype.setIsDelete = function (isDelete) {
        this.state.isDelete = isDelete;
    };
    DrawEditor.prototype.start = function () {
        var _this = this;
        var _a, _b;
        this.plugin.managers.editor.disabledInteraction = ['click'];
        this.plugin.managers.selection.structure.setGranularity(__1.Granularity.Atom);
        this.state.drawClickObserver =
            (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.interaction.click.observers.pop();
        (_b = this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.interaction.click.subscribe(function (a) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
            var loci_2, indices, cRef_1, elementId, components, isEmpty, position_1, structure, atomId_1;
            var _this = this;
            var _a, _b, _c, _d;
            return (0, tslib_1.__generator)(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(a.current.loci && a.current.loci.kind === 'element-loci')) return [3 /*break*/, 6];
                        loci_2 = a.current.loci;
                        indices = int_1.OrderedSet.toArray(loci_2.elements[0].indices);
                        if (!(indices.length === 1)) return [3 /*break*/, 5];
                        this.plugin.cells.forEach(function (cell, ref) {
                            if (cell.model.structure &&
                                loci_1.Loci.isSubset(structure_1.Structure.toStructureElementLoci(cell.model.structure), loci_2)) {
                                cRef_1 = ref;
                            }
                        });
                        elementId = loci_2.elements[0].unit.elements[indices[0]];
                        if (!cRef_1)
                            return [2 /*return*/];
                        if (!!this.state.isDelete) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.plugin.managers.editor.editAtomType(this.state.elementType, [
                                { ref: cRef_1, elementIds: [elementId] }
                            ])];
                    case 1:
                        _e.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.plugin.managers.cell.remove([
                            { ref: cRef_1, elementIds: [elementId] }
                        ])];
                    case 3:
                        _e.sent();
                        _e.label = 4;
                    case 4:
                        this.event.update.next({ isUpdateHierarchy: true, cRef: cRef_1 });
                        _e.label = 5;
                    case 5: return [3 /*break*/, 9];
                    case 6:
                        if (!(a.current.loci && a.current.loci.kind === 'empty-loci' && !this.state.isDelete)) return [3 /*break*/, 9];
                        components = Array.from(this.plugin.cells.entries()).filter(function (_a) {
                            var ref = _a[0], cell = _a[1];
                            return cell.model.structure &&
                                (Array.from(cell.representations.values()).findIndex(function (repr) { return repr.isHidden === false; }) !== -1 || !cell.representations.size);
                        });
                        if (!components.length) {
                            this.event.update.next({ hasMultiRef: true });
                            return [2 /*return*/];
                        }
                        isEmpty = ((_a = components[0][1].model.structure) === null || _a === void 0 ? void 0 : _a.units.length) === 0;
                        position_1 = (((_b = this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.getPosition(a.page[0], a.page[1])) || { position: undefined }).position;
                        if (!position_1) return [3 /*break*/, 9];
                        if (!(components.length === 1)) return [3 /*break*/, 8];
                        structure = components[0][1].model.structure;
                        if (!structure)
                            return [2 /*return*/];
                        atomId_1 = "".concat(Math.max.apply(Math, (Array.from((_d = (_c = structure.model) === null || _c === void 0 ? void 0 : _c.atomicConformation.atomId.toArray()) !== null && _d !== void 0 ? _d : [0]))) + 1);
                        return [4 /*yield*/, this.plugin.managers.editor.executeEdit(components[0][0], function (atomList, bondList) {
                                var editedAtomList = (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], atomList, true), [
                                    (0, writer_1.getDefaultAtomData)(atomId_1, _this.state.elementType, position_1)
                                ], false);
                                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                                return {
                                    editedAtomList: editedAtomList,
                                    editedBondList: editedBondList,
                                    affectedAtomIds: [+atomId_1]
                                };
                            }, function (atomList, bondList) {
                                var editedAtomList = (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], atomList, true), [
                                    (0, writer_1.getDefaultAtomData)(atomId_1, _this.state.elementType, position_1)
                                ], false);
                                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                                return {
                                    editedAtomList: editedAtomList,
                                    editedBondList: editedBondList
                                };
                            })];
                    case 7:
                        _e.sent();
                        this.event.update.next({
                            isUpdateHierarchy: true,
                            cRef: components[0][0],
                            isEmpty: isEmpty
                        });
                        return [3 /*break*/, 9];
                    case 8:
                        this.setPosition(position_1);
                        this.event.update.next({ hasMultiRef: true, newAtom: (0, writer_1.getDefaultAtomData)('', this.state.elementType, position_1) });
                        _e.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        }); });
    };
    DrawEditor.prototype.end = function () {
        var _a, _b;
        (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.interaction.click.observers.pop();
        if (this.state.drawClickObserver) {
            (_b = this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.interaction.click.subscribe(this.state.drawClickObserver);
        }
        this.state.drawClickObserver = undefined;
    };
    DrawEditor.prototype.addAtomByRef = function (ref) {
        var _this = this;
        var _a, _b;
        if (!this.state.position)
            return;
        var cell = this.plugin.cells.get(ref);
        if (!cell)
            return;
        var structure = cell.model.structure;
        if (!structure)
            return;
        var atomId = "".concat(Math.max.apply(Math, (Array.from((_b = (_a = structure.model) === null || _a === void 0 ? void 0 : _a.atomicConformation.atomId.toArray()) !== null && _b !== void 0 ? _b : [0]))) + 1);
        this.plugin.managers.editor.executeEdit(ref, function (atomList, bondList) {
            var editedAtomList = (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], atomList, true), [
                (0, writer_1.getDefaultAtomData)(atomId, _this.state.elementType, _this.state.position)
            ], false);
            var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
            return {
                editedAtomList: editedAtomList,
                editedBondList: editedBondList,
                affectedAtomIds: [+atomId]
            };
        }, function (atomList, bondList) {
            var editedAtomList = (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], atomList, true), [
                (0, writer_1.getDefaultAtomData)(atomId, _this.state.elementType, _this.state.position)
            ], false);
            var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
            return {
                editedAtomList: editedAtomList,
                editedBondList: editedBondList
            };
        });
        this.setPosition();
    };
    return DrawEditor;
}());
exports.DrawEditor = DrawEditor;
//# sourceMappingURL=draw.js.map