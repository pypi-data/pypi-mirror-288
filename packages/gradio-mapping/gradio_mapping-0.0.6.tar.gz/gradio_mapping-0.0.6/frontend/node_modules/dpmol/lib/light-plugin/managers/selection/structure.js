"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructureSelectionManager = void 0;
var tslib_1 = require("tslib");
var marker_action_1 = require("../../../mol-util/marker-action");
var rx_event_helper_1 = require("../../../mol-util/rx-event-helper");
var index_1 = require("../../index");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var loci_1 = require("../../../mol-model/loci");
var loci_2 = require("../../../mol-model/structure/structure/element/loci");
var builder_1 = require("../../../mol-script/language/builder");
var structure_1 = require("../../../mol-model/structure");
var StructureSelectionManager = /** @class */ (function () {
    function StructureSelectionManager(plugin) {
        var _this = this;
        this.ev = rx_event_helper_1.RxEventHelper.create();
        this.lociGranularity = 'residue';
        this.prev = [];
        this.event = {
            change: this.ev(),
            add: this.ev(),
            remove: this.ev(),
            clear: this.ev()
        };
        this.plugin = plugin;
        this.selection = new Map();
        this.event.change.subscribe(function (a) {
            if (a.current.loci.kind === 'element-loci') {
                _this.plugin.cells.forEach(function (cell, ref) {
                    var _a;
                    if (((cell === null || cell === void 0 ? void 0 : cell.model.structure) &&
                        (0, utils_1.getStructureUniqueId)(cell === null || cell === void 0 ? void 0 : cell.model.structure) ===
                            (0, utils_1.getStructureUniqueId)(a.current.loci.structure)) ||
                        (cell.model.trajectory &&
                            (cell === null || cell === void 0 ? void 0 : cell.model.trajectory.state.getFrameAtIndex(cell.model.trajectory.frameIndex).id) === (0, utils_1.getStructureUniqueId)(a.current.loci.structure))) {
                        var cellStructure = (0, utils_1.getStructureByCell)(cell);
                        a.current.loci = loci_1.Loci.normalize((0, utils_1.getLoci)(cellStructure, (0, utils_1.getElementIdsByLoci)(a.current.loci)), _this.lociGranularity, true);
                        var elementIds = (0, utils_1.getElementIdsByLoci)(a.current.loci);
                        var selection_1 = new Set((_a = _this.selection.get(ref)) !== null && _a !== void 0 ? _a : []);
                        var newSelection = selection_1.size
                            ? elementIds.filter(function (elementId) { return !selection_1.has(elementId); })
                            : elementIds;
                        if (a.button !== 2 && newSelection.length === 0) {
                            _this.remove({ item: { ref: ref, elementIds: elementIds }, reprLoci: a.current });
                        }
                        else {
                            _this.add({
                                item: { ref: ref, elementIds: newSelection },
                                reprLoci: a.current
                            });
                        }
                    }
                });
            }
            if (a.current.loci.kind === 'bond-loci') {
                var bondLoci_1 = a.current.loci;
                a.current.loci = loci_1.Loci.normalize(a.current.loci, _this.lociGranularity, true);
                var elementSet_1 = new Set();
                bondLoci_1.bonds.forEach(function (bond) {
                    elementSet_1.add(bond.aUnit.elements[bond.aIndex]);
                    elementSet_1.add(bond.bUnit.elements[bond.bIndex]);
                });
                var elementIds_1 = (0, utils_1.getElementIdsByLoci)(a.current.loci);
                _this.plugin.cells.forEach(function (cell, ref) {
                    var _a;
                    if ((cell === null || cell === void 0 ? void 0 : cell.model.structure) &&
                        (0, utils_1.getStructureUniqueId)(cell === null || cell === void 0 ? void 0 : cell.model.structure) ===
                            (0, utils_1.getStructureUniqueId)(bondLoci_1.bonds[0].aStructure)) {
                        var selection_2 = new Set((_a = _this.selection.get(ref)) !== null && _a !== void 0 ? _a : []);
                        var newSelection = selection_2.size
                            ? elementIds_1.filter(function (elementId) { return !selection_2.has(elementId); })
                            : elementIds_1;
                        if (a.button !== 2 && newSelection.length === 0) {
                            _this.remove({ item: { ref: ref, elementIds: elementIds_1 }, reprLoci: a.current });
                        }
                        else {
                            _this.add({
                                item: { ref: ref, elementIds: newSelection },
                                reprLoci: a.current
                            });
                        }
                    }
                });
            }
            if (a.current.loci.kind === 'empty-loci') {
                _this.clear();
            }
        });
    }
    Object.defineProperty(StructureSelectionManager.prototype, "granularity", {
        get: function () {
            return index_1.LociGranularityToGranularity[this.lociGranularity];
        },
        enumerable: false,
        configurable: true
    });
    StructureSelectionManager.prototype.getSelectionCellItems = function (emptyIsAll) {
        if (emptyIsAll === void 0) { emptyIsAll = false; }
        var res = Array.from(this.selection).map(function (_a) {
            var ref = _a[0], elementIds = _a[1];
            return ({
                ref: ref,
                elementIds: elementIds
            });
        }).filter(function (item) { var _a; return (_a = item.elementIds) === null || _a === void 0 ? void 0 : _a.length; });
        if (emptyIsAll && !res.length) {
            return (0, utils_1.getGlobalCellItems)(this.plugin);
        }
        return res;
    };
    StructureSelectionManager.prototype.getSelection = function () {
        return Array.from(this.selection).reduce(function (total, item) {
            var _a;
            return ((0, tslib_1.__assign)((0, tslib_1.__assign)({}, total), (_a = {}, _a[item[0]] = item[1], _a)));
        }, {});
    };
    StructureSelectionManager.prototype.add = function (data, isNormalize, isRecurve) {
        var _this = this;
        var _a, _b;
        if (isNormalize === void 0) { isNormalize = true; }
        if (isRecurve === void 0) { isRecurve = false; }
        var _c = data.item, ref = _c.ref, elementIds = _c.elementIds;
        if (elementIds && !elementIds.length) {
            console.warn('add selection, elementIds is empty');
            return;
        }
        this.selection.set(ref, Array.from(new Set((0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], ((_a = this.selection.get(ref)) !== null && _a !== void 0 ? _a : []), true), (elementIds !== null && elementIds !== void 0 ? elementIds : []), true))));
        var cell = this.plugin.cells.get(ref);
        if (!cell)
            return;
        var structure = (0, utils_1.getStructureByCell)(cell);
        if (!structure)
            return;
        var elements = this.selection.get(ref);
        var activeReprLoci;
        cell === null || cell === void 0 ? void 0 : cell.representations.forEach(function (repr) {
            var _a;
            // Repr State Cache
            if (repr.isHidden || !repr.state)
                return;
            var loci = isNormalize
                ? loci_1.Loci.normalize(loci_2.Loci.intersect((0, utils_1.getLoci)((0, utils_1.getStructureFromRepresentation)(repr.state), elements), (0, utils_1.transformLociToElementLoci)(repr.state.getLoci())), _this.lociGranularity, true)
                : loci_2.Loci.intersect((0, utils_1.getLoci)((0, utils_1.getStructureFromRepresentation)(repr.state), elements), (0, utils_1.transformLociToElementLoci)(repr.state.getLoci()));
            activeReprLoci = {
                loci: loci,
                repr: repr.state
            };
            (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark(activeReprLoci, marker_action_1.MarkerAction.Select);
        });
        this.prev.push({ ref: ref, elementIds: elementIds });
        if (!isRecurve) {
            this.event.add.next({
                loci: (_b = data.reprLoci) !== null && _b !== void 0 ? _b : { loci: (0, utils_1.getLoci)(structure, elements) },
                item: data.item
            });
            this.plugin.managers.selection.event.changed.next({});
        }
    };
    StructureSelectionManager.prototype.remove = function (data, isNormalize, isRecurve) {
        var _this = this;
        var _a;
        if (isNormalize === void 0) { isNormalize = true; }
        if (isRecurve === void 0) { isRecurve = false; }
        var _b = data.item, ref = _b.ref, elementIds = _b.elementIds;
        if (elementIds && !elementIds.length) {
            console.warn('remove selection, elementIds is empty');
            return;
        }
        if (!this.selection.has(ref))
            return;
        var removeElementIds = new Set();
        var saveElementIds = [];
        var elementIdsSet = new Set(elementIds);
        this.selection.get(ref).forEach(function (elementId) {
            if (!elementIdsSet.has(elementId)) {
                saveElementIds.push(elementId);
                return;
            }
            removeElementIds.add(elementId);
        });
        if (saveElementIds.length) {
            this.selection.set(ref, saveElementIds);
        }
        else {
            this.selection.delete(ref);
        }
        var cell = this.plugin.cells.get(ref);
        var elements = (_a = this.selection.get(ref)) !== null && _a !== void 0 ? _a : [];
        var activeReprLoci;
        cell === null || cell === void 0 ? void 0 : cell.representations.forEach(function (repr) {
            var _a, _b;
            // Repr State Cache
            if (repr.isHidden || !repr.state)
                return;
            var loci = isNormalize
                ? loci_1.Loci.normalize(loci_2.Loci.intersect((0, utils_1.getLoci)((0, utils_1.getStructureFromRepresentation)(repr.state), elements), (0, utils_1.transformLociToElementLoci)(repr.state.getLoci())), _this.lociGranularity, true)
                : loci_2.Loci.intersect((0, utils_1.getLoci)((0, utils_1.getStructureFromRepresentation)(repr.state), elements), (0, utils_1.transformLociToElementLoci)(repr.state.getLoci()));
            (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark({
                loci: (0, utils_1.transformLociToElementLoci)(repr.state.getLoci()),
                repr: repr.state
            }, marker_action_1.MarkerAction.Deselect);
            activeReprLoci = {
                loci: loci,
                repr: repr.state
            };
            (_b = _this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.mark(activeReprLoci, marker_action_1.MarkerAction.Select);
        });
        var res = [];
        this.prev.forEach(function (item) {
            var prevRef = item.ref, prevElementIds = item.elementIds;
            if (prevRef !== ref)
                return;
            var elementIds = [];
            prevElementIds === null || prevElementIds === void 0 ? void 0 : prevElementIds.forEach(function (elementId) {
                if (!removeElementIds.has(elementId)) {
                    elementIds.push(elementId);
                }
            });
            if (elementIds.length) {
                res.push({
                    ref: prevRef,
                    elementIds: elementIds
                });
            }
        });
        this.prev = res;
        if (!isRecurve) {
            this.event.remove.next({ loci: activeReprLoci, item: data.item });
            this.plugin.managers.selection.event.changed.next({});
        }
    };
    StructureSelectionManager.prototype.clear = function () {
        var _this = this;
        Array.from(this.selection.keys()).forEach(function (ref) {
            var cell = _this.plugin.cells.get(ref);
            if (!cell)
                return;
            cell === null || cell === void 0 ? void 0 : cell.representations.forEach(function (repr) {
                var _a;
                // Repr State Cache
                if (repr.isHidden || !repr.state)
                    return;
                (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark({
                    loci: (0, utils_1.transformLociToElementLoci)(repr.state.getLoci()),
                    repr: repr.state
                }, marker_action_1.MarkerAction.Deselect);
            });
        });
        this.selection.clear();
        this.prev = [];
        this.event.clear.next({});
        this.plugin.managers.selection.event.changed.next({});
    };
    StructureSelectionManager.prototype.setGranularity = function (granularity) {
        this.lociGranularity = types_1.GranularityToLociGranularity[granularity];
    };
    StructureSelectionManager.prototype.expand = function (props, items) {
        var _this = this;
        // 获取当前选中部分
        var currentSelection = items !== null && items !== void 0 ? items : this.getSelectionCellItems();
        // 生成merge structure
        var refs = this.plugin.managers.cell.getAllDisplayedCellsRef();
        var refToUnitsMap = new Map();
        var unitIdToRefMap = new Map();
        var _a = (0, utils_1.getMergedStructure)(refs.map(function (ref) { return ({ ref: ref }); }), this.plugin), unitsMap = _a.unitsMap, structure = _a.structure;
        unitsMap.forEach(function (ids, index) {
            refToUnitsMap.set(refs[index], ids.map(function (id) { return structure.unitMap.get(id); }));
            ids.forEach(function (id) { return unitIdToRefMap.set(id, refs[index]); });
        });
        // 生成选中部分的expression
        var data = (0, utils_1.flattenDeep)(currentSelection.map(function (item) {
            var _a;
            var units = refToUnitsMap.get(item.ref);
            var elementIdsMap = new Map();
            var elements = new Map();
            units.forEach(function (unit, index) {
                elementIdsMap.set(index, new Set(unit.elements));
                elements.set(index, []);
            });
            (_a = item.elementIds) === null || _a === void 0 ? void 0 : _a.forEach(function (elementId) {
                elementIdsMap.forEach(function (elementSet, unitIndex) {
                    var _a;
                    if (elementSet.has(elementId)) {
                        (_a = elements
                            .get(unitIndex)) === null || _a === void 0 ? void 0 : _a.push(units[unitIndex].elements.indexOf(elementId));
                    }
                });
            });
            var res = Array.from(elements.entries())
                .filter(function (_a) {
                var _ = _a[0], indices = _a[1];
                return indices.length;
            })
                .map(function (_a) {
                var unitIndex = _a[0], indices = _a[1];
                return ({ unit: units[unitIndex], indices: indices });
            });
            return res;
        }));
        var selectionLoci = structure_1.StructureElement.Loci(structure, data);
        var selectionExpression = loci_2.Loci.toExpression(selectionLoci);
        // molql获取expand的数据
        var expandExpression = builder_1.MolScriptBuilder.struct.modifier.union([
            builder_1.MolScriptBuilder.struct.modifier.exceptBy({
                0: builder_1.MolScriptBuilder.struct.modifier.includeSurroundings({
                    0: selectionExpression,
                    radius: props.radius,
                    'as-whole-residues': props.asWholeResidue
                }),
                by: selectionExpression
            })
        ]);
        var expandStructure = (0, utils_1.getStructureByStructureQuery)((0, utils_1.getStructureQuery)(structure, expandExpression));
        var expandMap = new Map();
        expandStructure.units.forEach(function (unit) {
            var _a;
            var ref = unitIdToRefMap.get(unit.id);
            if (!ref)
                return;
            if (expandMap.has(ref)) {
                (_a = expandMap.get(ref)) === null || _a === void 0 ? void 0 : _a.push.apply(_a, unit.elements);
            }
            else {
                expandMap.set(ref, (0, tslib_1.__spreadArray)([], unit.elements, true));
            }
        });
        var expandCellItems = Array.from(expandMap.entries()).map(function (_a) {
            var ref = _a[0], elementIds = _a[1];
            return ({ ref: ref, elementIds: elementIds });
        });
        // 利用queryCellItems筛选数据
        var queriedCellItems = (0, utils_1.queryCellItemsByHierarchyType)(this.plugin, expandCellItems);
        var filterTypes = types_1.ExpandFilterToHierarchyTypes[props.filter];
        if (props.excludeSelectedAtoms) {
            this.clear();
        }
        // 选中
        Object.keys(queriedCellItems).forEach(function (ref) {
            var elementIds = [];
            filterTypes.forEach(function (type) {
                queriedCellItems[ref][type].forEach(function (item) {
                    return elementIds.push.apply(elementIds, item.elementIds);
                });
            });
            _this.add({
                item: {
                    ref: ref,
                    elementIds: elementIds
                }
            }, false);
        });
    };
    return StructureSelectionManager;
}());
exports.StructureSelectionManager = StructureSelectionManager;
//# sourceMappingURL=structure.js.map