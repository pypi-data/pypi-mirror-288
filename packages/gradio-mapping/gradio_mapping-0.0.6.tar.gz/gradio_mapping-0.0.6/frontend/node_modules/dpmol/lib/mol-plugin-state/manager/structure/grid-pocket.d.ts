/**
 * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { PluginContext } from '../../../mol-plugin/context';
import { StateTransform, StateTransformer, StateObjectCell } from '../../../mol-state';
import { StateTransforms } from '../../transforms';
import { PluginStateObject } from '../../objects';
import { StatefulPluginComponent } from '../../component';
import { Vec3 } from '../../../mol-math/linear-algebra';
export { StructureGridPocketManager };
export declare const GridPocketGroupTag = "grid-pocket-group";
export declare const GridPocketOrderLabelTag = "grid-pocket-order-label";
export declare type StructureGridPocket = StateObjectCell<PluginStateObject.Shape.Representation3D, StateTransform<StateTransformer<PluginStateObject.Molecule.Structure.Selections, PluginStateObject.Shape.Representation3D, any>>>;
export interface StructureGridPocketManagerState {
    boxes: StructureGridPocket[];
}
declare type StructureGridPocketManagerAddOptions = {
    customText?: string;
    selectionTags?: string | string[];
    reprTags?: string | string[];
};
declare class StructureGridPocketManager extends StatefulPluginComponent<StructureGridPocketManagerState> {
    private plugin;
    readonly behaviors: {
        state: import("rxjs").BehaviorSubject<StructureGridPocketManagerState>;
    };
    private stateUpdated;
    private getGroup;
    addBox(center: Vec3, x: number, y: number, z: number, cRef?: string, options?: StructureGridPocketManagerAddOptions & {
        visualParams?: Partial<StateTransformer.Params<typeof StateTransforms.Representation.StructureGridPocket3D>>;
    }): Promise<import("../../../mol-state/state/builder").StateBuilder.To<PluginStateObject.Shape.Representation3D, StateTransformer<PluginStateObject.Molecule.Structure.Selections, PluginStateObject.Shape.Representation3D, import("../../../mol-util/param-definition").ParamDefinition.Normalize<{
        alpha: number;
        ignoreLight: boolean;
        colorX: import("../../../mol-util").Color;
        colorY: import("../../../mol-util").Color;
        colorZ: import("../../../mol-util").Color;
        scale: number;
        doubleSided: boolean;
        flipSided: boolean;
        flatShaded: boolean;
        xrayShaded: boolean;
        bumpFrequency: number;
        bumpAmplitude: number;
        quality: "auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest";
        material: import("../../../mol-util/param-definition").ParamDefinition.Normalize<{
            metalness: number;
            roughness: number;
            bumpiness: number;
        }>;
        clip: import("../../../mol-util/param-definition").ParamDefinition.Normalize<{
            variant: any;
            objects: any;
        }>;
        pocketColor: import("../../../mol-util").Color;
        pocketScale: number;
        x: number;
        y: number;
        z: number;
        center: Vec3;
    }>>>>;
    private _empty;
    private getTransforms;
    private sync;
    constructor(plugin: PluginContext);
}
