"use strict";
/**
 * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelIndexColorThemeProvider = exports.ModelIndexColorTheme = exports.getModelIndexColorThemeParams = exports.ModelIndexColorThemeParams = void 0;
var tslib_1 = require("tslib");
var color_1 = require("../../mol-util/color");
var structure_1 = require("../../mol-model/structure");
var param_definition_1 = require("../../mol-util/param-definition");
var palette_1 = require("../../mol-util/color/palette");
var DefaultColor = (0, color_1.Color)(0xcccccc);
var Description = 'Gives every model a unique color based on the position (index) of the model in the list of models in the structure.';
exports.ModelIndexColorThemeParams = (0, tslib_1.__assign)({}, (0, palette_1.getPaletteParams)({ type: 'colors', colorList: 'purples' }));
function getModelIndexColorThemeParams(ctx) {
    return exports.ModelIndexColorThemeParams; // TODO return copy
}
exports.getModelIndexColorThemeParams = getModelIndexColorThemeParams;
function ModelIndexColorTheme(ctx, props) {
    var _a, _b;
    var color;
    var legend;
    if (ctx.structure) {
        var models = ctx.structure.root.models;
        var size = 0;
        for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {
            var m = models_1[_i];
            size = Math.max(size, ((_a = structure_1.Model.TrajectoryInfo.get(m)) === null || _a === void 0 ? void 0 : _a.size) || 0);
        }
        var palette = (0, palette_1.getPalette)(size, props);
        legend = palette.legend;
        var modelColor_1 = new Map();
        for (var i = 0, il = models.length; i < il; ++i) {
            var idx = ((_b = structure_1.Model.TrajectoryInfo.get(models[i])) === null || _b === void 0 ? void 0 : _b.index) || 0;
            modelColor_1.set(idx, palette.color(idx));
        }
        color = function (location) {
            if (structure_1.StructureElement.Location.is(location)) {
                return modelColor_1.get(structure_1.Model.TrajectoryInfo.get(location.unit.model).index);
            }
            else if (structure_1.Bond.isLocation(location)) {
                return modelColor_1.get(structure_1.Model.TrajectoryInfo.get(location.aUnit.model).index);
            }
            return DefaultColor;
        };
    }
    else {
        color = function () { return DefaultColor; };
    }
    return {
        factory: ModelIndexColorTheme,
        granularity: 'instance',
        color: color,
        props: props,
        description: Description,
        legend: legend
    };
}
exports.ModelIndexColorTheme = ModelIndexColorTheme;
exports.ModelIndexColorThemeProvider = {
    name: 'model-index',
    label: 'Model Index',
    category: "Chain Property" /* Chain */,
    factory: ModelIndexColorTheme,
    getParams: getModelIndexColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.ModelIndexColorThemeParams),
    isApplicable: function (ctx) {
        return !!ctx.structure &&
            ctx.structure.elementCount > 0 &&
            structure_1.Model.TrajectoryInfo.get(ctx.structure.models[0]).size > 1;
    }
};
//# sourceMappingURL=model-index.js.map