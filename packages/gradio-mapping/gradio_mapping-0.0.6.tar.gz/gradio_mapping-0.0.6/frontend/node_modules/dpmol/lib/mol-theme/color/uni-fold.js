"use strict";
/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniFoldProvider = exports.SequenceIdColorTheme = exports.getSequenceIdColorThemeParams = exports.SequenceIdColorThemeParams = void 0;
var structure_1 = require("../../mol-model/structure");
var color_1 = require("../../mol-util/color");
var param_definition_1 = require("../../mol-util/param-definition");
var DefaultColor = (0, color_1.Color)(0xcccccc);
var Description = 'Fold';
exports.SequenceIdColorThemeParams = {
    list: param_definition_1.ParamDefinition.ColorList('turbo', { presetKind: 'scale' })
};
function getSequenceIdColorThemeParams(ctx) {
    return exports.SequenceIdColorThemeParams; // TODO return copy
}
exports.getSequenceIdColorThemeParams = getSequenceIdColorThemeParams;
function SequenceIdColorTheme(ctx, props) {
    var scale = color_1.ColorScale.create({
        listOrName: props.list.colors,
        minLabel: 'Start',
        maxLabel: 'End'
    });
    var color = function (location) {
        if (structure_1.StructureElement.Location.is(location)) {
            if (structure_1.Unit.isAtomic(location.unit)) {
                var B_iso_or_equiv = location.unit.model.atomicHierarchy.atoms.B_iso_or_equiv;
                var plddt = B_iso_or_equiv.value(location.element);
                if (plddt >= 90) {
                    return color_1.Color.fromRgb(148, 164, 239);
                }
                else if (plddt < 90 && plddt >= 70) {
                    return color_1.Color.fromRgb(148, 225, 239);
                }
                else if (plddt < 70 && plddt >= 50) {
                    return color_1.Color.fromRgb(240, 193, 145);
                }
                else if (plddt < 50) {
                    return color_1.Color.fromRgb(239, 156, 156);
                }
            }
        }
        else if (structure_1.Bond.isLocation(location)) {
            if (structure_1.Unit.isAtomic(location.aUnit)) {
                var B_iso_or_equiv = location.aUnit.model.atomicHierarchy.atoms.B_iso_or_equiv;
                var plddt = B_iso_or_equiv.value(location.aUnit.elements[location.aIndex]);
                if (plddt >= 90) {
                    return color_1.Color.fromRgb(148, 164, 239);
                }
                else if (plddt < 90 && plddt >= 70) {
                    return color_1.Color.fromRgb(148, 225, 239);
                }
                else if (plddt < 70 && plddt >= 50) {
                    return color_1.Color.fromRgb(240, 193, 145);
                }
                else if (plddt < 50) {
                    return color_1.Color.fromRgb(239, 156, 156);
                }
            }
        }
        return DefaultColor;
    };
    return {
        factory: SequenceIdColorTheme,
        granularity: 'group',
        color: color,
        props: props,
        description: Description,
        legend: scale ? scale.legend : undefined
    };
}
exports.SequenceIdColorTheme = SequenceIdColorTheme;
exports.UniFoldProvider = {
    name: 'uni-fold',
    label: 'Uni-Fold',
    category: "Residue Property" /* Residue */,
    factory: SequenceIdColorTheme,
    getParams: getSequenceIdColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.SequenceIdColorThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure; }
};
//# sourceMappingURL=uni-fold.js.map