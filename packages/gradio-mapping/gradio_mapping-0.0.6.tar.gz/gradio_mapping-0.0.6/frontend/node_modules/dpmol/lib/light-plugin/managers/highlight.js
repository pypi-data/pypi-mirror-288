"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HighlightManager = void 0;
var tslib_1 = require("tslib");
var loci_1 = require("../../mol-model/loci");
var marker_action_1 = require("../../mol-util/marker-action");
var rx_event_helper_1 = require("../../mol-util/rx-event-helper");
var index_1 = require("../index");
var utils_1 = require("../utils");
var constant_1 = require("../utils/constant");
var HighlightManager = /** @class */ (function () {
    function HighlightManager(plugin) {
        this.ev = rx_event_helper_1.RxEventHelper.create();
        this.info = this.ev();
        this.handleHighlightLocis = [];
        this.plugin = plugin;
    }
    HighlightManager.prototype.setHoverSelection = function (reprLoci, isShowInfo) {
        var _this = this;
        var _a, _b, _c;
        if (isShowInfo === void 0) { isShowInfo = true; }
        if (this.hoverLoci) {
            (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark(this.hoverLoci, marker_action_1.MarkerAction.RemoveHighlight);
        }
        if ((_b = this.handleHighlightLocis) === null || _b === void 0 ? void 0 : _b.length) {
            this.handleHighlightLocis.forEach(function (loci) {
                var _a;
                (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark(loci, marker_action_1.MarkerAction.RemoveHighlight);
            });
        }
        if (!reprLoci) {
            this.info.next({});
            return;
        }
        var newReprLoci = {
            loci: loci_1.Loci.normalize(reprLoci.loci, this.plugin.managers.selection.structure.lociGranularity),
            repr: reprLoci.repr
        };
        (_c = this.plugin.canvas3d) === null || _c === void 0 ? void 0 : _c.mark(newReprLoci, marker_action_1.MarkerAction.Highlight);
        this.hoverLoci = newReprLoci;
        if (isShowInfo) {
            this.info.next({ loci: newReprLoci, info: this.createHighlightInfo(newReprLoci) });
        }
    };
    HighlightManager.prototype.addHighlightLocis = function (reprLocis, isCover) {
        var _a;
        var _this = this;
        if (isCover === void 0) { isCover = true; }
        if (isCover) {
            this.handleHighlightLocis.forEach(function (loci) {
                var _a;
                (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark(loci, marker_action_1.MarkerAction.RemoveHighlight);
            });
            this.handleHighlightLocis = [];
        }
        reprLocis.forEach(function (loci) {
            var _a;
            (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark(loci, marker_action_1.MarkerAction.Highlight);
        });
        (_a = this.handleHighlightLocis).push.apply(_a, reprLocis);
    };
    HighlightManager.prototype.createHighlightInfo = function (reprLoci) {
        // 结构
        if (reprLoci.loci.kind === 'element-loci') {
            var lociRef_1 = '';
            Array.from(this.plugin.cells.entries()).some(function (_a) {
                var ref = _a[0], cell = _a[1];
                if (!lociRef_1 && (0, utils_1.getStructureByCell)(cell) && (0, utils_1.getStructureUniqueId)((0, utils_1.getStructureByCell)(cell)) === (0, utils_1.getStructureUniqueId)(reprLoci.loci.structure)) {
                    lociRef_1 = ref;
                    return true;
                }
                return false;
            });
            if (!lociRef_1)
                return;
            var cell = this.plugin.cells.get(lociRef_1);
            var reprThemeC_1;
            var colorThemeName_1 = '';
            Object.entries(index_1.ReprCBasedTheme).forEach(function (_a) {
                var themeC = _a[0], typeList = _a[1];
                if (typeList.includes(constant_1.ReprLabelToType[reprLoci.repr.label])) {
                    reprThemeC_1 = themeC;
                }
            });
            if (reprThemeC_1 && cell.theme.color && cell.theme.color[reprThemeC_1]) {
                var themeList = cell.theme.color[reprThemeC_1];
                var highlightElementIds_1 = (0, utils_1.getElementIdsByLoci)(reprLoci.loci);
                themeList.forEach(function (theme) {
                    var elementSet = new Set(theme.elementIds);
                    if (highlightElementIds_1.filter(function (elementId) { return !elementSet.has(elementId); }).length === 0) {
                        colorThemeName_1 = theme.name;
                    }
                });
            }
            var res = (0, tslib_1.__assign)({ type: index_1.HighlightLabelType.Structure, ref: lociRef_1, colorThemeName: colorThemeName_1 }, (0, utils_1.getElementLociInfo)(reprLoci.loci, this.plugin.managers.selection.structure.granularity));
            return res;
        }
        // 相互作用力
        if (reprLoci.loci.kind === 'data-loci') {
            if (reprLoci.loci.tag === 'interactions') {
                var refA_1 = '';
                var refB_1 = '';
                var _a = reprLoci.loci.elements[0], unitA_1 = _a.unitA, unitB_1 = _a.unitB;
                Array.from(this.plugin.cells.entries()).some(function (_a) {
                    var ref = _a[0], cell = _a[1];
                    if (refA_1 && refB_1)
                        return true;
                    if (cell.model.structure) {
                        var cellStructureId = (0, utils_1.getStructureUniqueId)(cell.model.structure);
                        if (cellStructureId === unitA_1.model.id) {
                            refA_1 = ref;
                        }
                        if (cellStructureId === unitB_1.model.id) {
                            refB_1 = ref;
                        }
                    }
                    return false;
                });
                var res = (0, tslib_1.__assign)({ type: index_1.HighlightLabelType.Interaction }, (0, utils_1.getInteractionLociInfo)(reprLoci.loci));
                Object.assign(res.infoA, { ref: refA_1 });
                Object.assign(res.infoB, { ref: refB_1 });
                return res;
            }
        }
        // group-loci
        // 暂时不显示label
        if (reprLoci.loci.kind === 'group-loci') {
            return {};
        }
        // bond-loci
        if (reprLoci.loci.kind === 'bond-loci') {
            var lociRef_2 = '';
            Array.from(this.plugin.cells.entries()).some(function (_a) {
                var ref = _a[0], cell = _a[1];
                if (!lociRef_2 && cell.model.structure && (0, utils_1.getStructureUniqueId)(cell.model.structure) === (0, utils_1.getStructureUniqueId)(reprLoci.loci.structure)) {
                    lociRef_2 = ref;
                    return true;
                }
                return false;
            });
            var infoA = (0, utils_1.getAtomHierarchyByUnit)(reprLoci.loci.bonds[0].aUnit, reprLoci.loci.bonds[0].aUnit.elements[reprLoci.loci.bonds[0].aIndex]);
            var infoB = (0, utils_1.getAtomHierarchyByUnit)(reprLoci.loci.bonds[0].bUnit, reprLoci.loci.bonds[0].bUnit.elements[reprLoci.loci.bonds[0].bIndex]);
            var res = {
                infoA: infoA,
                infoB: infoB,
                ref: lociRef_2,
                type: index_1.HighlightLabelType.Bond,
            };
            return res;
        }
    };
    HighlightManager.prototype.clear = function () {
        this.hoverLoci = undefined;
    };
    return HighlightManager;
}());
exports.HighlightManager = HighlightManager;
//# sourceMappingURL=highlight.js.map