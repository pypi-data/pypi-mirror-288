/**
 * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { Loci } from '../../../mol-model/loci';
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { Representation, RepresentationParamsGetter, RepresentationContext } from '../../representation';
export interface InteractionLineData {
    pairs: Loci.Bundle<2>[];
}
export declare const InteractionLineParams: {
    visuals: PD.MultiSelect<"lines">;
    lineSizeAttenuation: PD.BooleanParam;
    linesColor: PD.Color;
    linesSize: PD.Numeric;
    alpha: PD.Numeric;
    unitLabel: PD.Text<string>;
    sizeFactor: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type InteractionLineParams = typeof InteractionLineParams;
export declare type InteractionLineProps = PD.Values<InteractionLineParams>;
export declare type InteractionLineRepresentation = Representation<InteractionLineData, InteractionLineParams>;
export declare function InteractionLineRepresentation(ctx: RepresentationContext, getParams: RepresentationParamsGetter<InteractionLineData, InteractionLineParams>): InteractionLineRepresentation;
