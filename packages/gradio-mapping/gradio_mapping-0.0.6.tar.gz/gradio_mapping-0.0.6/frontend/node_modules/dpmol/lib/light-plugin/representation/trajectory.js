"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrajectoryRepr = void 0;
var tslib_1 = require("tslib");
var types_1 = require("../types");
var model_1 = require("../../mol-model/structure/model/model");
var structure_1 = require("../../mol-model/structure/structure/structure");
var ball_and_stick_1 = require("../../mol-repr/structure/representation/ball-and-stick");
var utils_1 = require("../utils");
var cartoon_1 = require("../../mol-repr/structure/representation/cartoon");
var loci_1 = require("../../mol-model/structure/structure/element/loci");
var secondary_structure_1 = require("../../mol-model-props/computed/secondary-structure");
var synchronous_1 = require("../../mol-task/execution/synchronous");
var assets_1 = require("../../mol-util/assets");
var color_1 = require("../../mol-util/color");
exports.TrajectoryRepr = {
    createByTrajectory: function (data, ctx) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var trajectory, frameIndex, trajectoryWithCoords, structure, reprs, _a, polymer, other, polymerStructure, polymerRepr, otherStructure, otherRepr;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        trajectory = data.trajectory, frameIndex = data.frameIndex;
                        trajectoryWithCoords = trajectory;
                        structure = structure_1.Structure.ofModel(trajectoryWithCoords.getFrameAtIndex(frameIndex));
                        reprs = [];
                        _a = (0, utils_1.getProteinAndOthersElementIdByStructure)(structure), polymer = _a.polymer, other = _a.other;
                        if (!polymer.length) return [3 /*break*/, 4];
                        polymerStructure = (0, utils_1.getStructureByElementIds)(structure, polymer);
                        if (!polymerStructure.elementCount) return [3 /*break*/, 2];
                        return [4 /*yield*/, secondary_structure_1.SecondaryStructureProvider.attach({ runtime: synchronous_1.SyncRuntimeContext, assetManager: new assets_1.AssetManager() }, polymerStructure, {
                                type: {
                                    name: 'dssp',
                                    params: { oldDefinition: true, oldOrdering: true }
                                }
                            })];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        polymerRepr = cartoon_1.CartoonRepresentationProvider.factory(ctx, cartoon_1.CartoonRepresentationProvider.getParams);
                        polymerRepr.setTheme({
                            color: ctx.colorThemeRegistry.create('uniform', {
                                structure: polymerStructure
                            }, { value: (0, color_1.Color)(0xdcdde8) }),
                            size: ctx.sizeThemeRegistry.create('uniform', {
                                structure: polymerStructure
                            })
                        });
                        return [4 /*yield*/, polymerRepr
                                .createOrUpdate((0, tslib_1.__assign)((0, tslib_1.__assign)({}, cartoon_1.CartoonRepresentationProvider.defaultValues), { quality: 'auto' }), polymerStructure)
                                .run()];
                    case 3:
                        _b.sent();
                        reprs.push({
                            state: polymerRepr,
                            type: types_1.RepresentationType.Ribbon
                        });
                        _b.label = 4;
                    case 4:
                        if (!other.length) return [3 /*break*/, 6];
                        otherStructure = (0, utils_1.getStructureByElementIds)(structure, other);
                        otherRepr = ball_and_stick_1.BallAndStickRepresentationProvider.factory(ctx, ball_and_stick_1.BallAndStickRepresentationProvider.getParams);
                        otherRepr.setTheme({
                            color: ctx.colorThemeRegistry.create('element-symbol', {
                                structure: otherStructure
                            }, {
                                carbonColor: {
                                    name: 'uniform',
                                    params: {
                                        value: (0, color_1.Color)(0xdcdde8),
                                        // value: Color(0x48e533),
                                    },
                                }
                            }),
                            size: ctx.sizeThemeRegistry.create('physical', {
                                structure: otherStructure
                            })
                        });
                        return [4 /*yield*/, otherRepr
                                .createOrUpdate((0, tslib_1.__assign)((0, tslib_1.__assign)({}, ball_and_stick_1.BallAndStickRepresentationProvider.defaultValues), { quality: 'auto' }), otherStructure)
                                .run()];
                    case 5:
                        _b.sent();
                        reprs.push({
                            state: otherRepr,
                            type: types_1.RepresentationType.BallAndStick
                        });
                        _b.label = 6;
                    case 6: return [2 /*return*/, {
                            model: trajectoryWithCoords,
                            reprs: reprs,
                        }];
                }
            });
        });
    },
    create: function (data, ctx) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var model, coordinates, frameIndex, trajectoryWithCoords, structure, reprs, _a, polymer, other, polymerStructure, polymerRepr, otherStructure, otherRepr;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        model = data.model, coordinates = data.coordinates, frameIndex = data.frameIndex;
                        trajectoryWithCoords = model_1.Model.trajectoryFromModelAndCoordinates(model, coordinates);
                        structure = structure_1.Structure.ofModel(trajectoryWithCoords.getFrameAtIndex(frameIndex));
                        reprs = [];
                        _a = (0, utils_1.getProteinAndOthersElementIdByStructure)(structure), polymer = _a.polymer, other = _a.other;
                        if (!polymer.length) return [3 /*break*/, 4];
                        polymerStructure = (0, utils_1.getStructureByElementIds)(structure, polymer);
                        if (!polymerStructure.elementCount) return [3 /*break*/, 2];
                        return [4 /*yield*/, secondary_structure_1.SecondaryStructureProvider.attach({ runtime: synchronous_1.SyncRuntimeContext, assetManager: new assets_1.AssetManager() }, polymerStructure, {
                                type: {
                                    name: 'dssp',
                                    params: { oldDefinition: true, oldOrdering: true }
                                }
                            })];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        polymerRepr = cartoon_1.CartoonRepresentationProvider.factory(ctx, cartoon_1.CartoonRepresentationProvider.getParams);
                        //   [ThemeC.ATOM]: { name: 'element-symbol', props: {
                        //     carbonColor: {
                        //       name: 'uniform',
                        //       params: {
                        //         value: Color(0xdcdde8),
                        //         // value: Color(0x48e533),
                        //       },
                        //     }
                        //   }
                        // },
                        // [ThemeC.RIBBON]: { name: 'uniform', props: { value: Color(0xdcdde8) } },
                        polymerRepr.setTheme({
                            color: ctx.colorThemeRegistry.create('uniform', {
                                structure: polymerStructure
                            }, { value: (0, color_1.Color)(0xdcdde8) }),
                            size: ctx.sizeThemeRegistry.create('uniform', {
                                structure: polymerStructure
                            })
                        });
                        return [4 /*yield*/, polymerRepr
                                .createOrUpdate((0, tslib_1.__assign)((0, tslib_1.__assign)({}, cartoon_1.CartoonRepresentationProvider.defaultValues), { quality: 'auto' }), polymerStructure)
                                .run()];
                    case 3:
                        _b.sent();
                        reprs.push({
                            state: polymerRepr,
                            type: types_1.RepresentationType.Ribbon
                        });
                        _b.label = 4;
                    case 4:
                        if (!other.length) return [3 /*break*/, 6];
                        otherStructure = (0, utils_1.getStructureByElementIds)(structure, other);
                        otherRepr = ball_and_stick_1.BallAndStickRepresentationProvider.factory(ctx, ball_and_stick_1.BallAndStickRepresentationProvider.getParams);
                        otherRepr.setTheme({
                            color: ctx.colorThemeRegistry.create('element-symbol', {
                                structure: otherStructure
                            }, {
                                carbonColor: {
                                    name: 'uniform',
                                    params: {
                                        value: (0, color_1.Color)(0xdcdde8),
                                        // value: Color(0x48e533),
                                    },
                                }
                            }),
                            size: ctx.sizeThemeRegistry.create('physical', {
                                structure: otherStructure
                            })
                        });
                        return [4 /*yield*/, otherRepr
                                .createOrUpdate((0, tslib_1.__assign)((0, tslib_1.__assign)({}, ball_and_stick_1.BallAndStickRepresentationProvider.defaultValues), { quality: 'auto' }), otherStructure)
                                .run()];
                    case 5:
                        _b.sent();
                        reprs.push({
                            state: otherRepr,
                            type: types_1.RepresentationType.BallAndStick
                        });
                        _b.label = 6;
                    case 6: return [2 /*return*/, {
                            model: trajectoryWithCoords,
                            reprs: reprs,
                        }];
                }
            });
        });
    },
    update: function (representations, data, ctx) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var trajectory, frameIndex, structure;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trajectory = data.trajectory, frameIndex = data.frameIndex;
                        structure = structure_1.Structure.ofModel(trajectory.getFrameAtIndex(frameIndex));
                        if (!structure.elementCount) return [3 /*break*/, 2];
                        return [4 /*yield*/, secondary_structure_1.SecondaryStructureProvider.attach({ runtime: synchronous_1.SyncRuntimeContext, assetManager: new assets_1.AssetManager() }, structure, {
                                type: {
                                    name: 'dssp',
                                    params: { oldDefinition: true, oldOrdering: true }
                                }
                            })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, Promise.all(representations.map(function (r) {
                            var themeC = Object.keys(types_1.ReprCBasedTheme).find(function (key) {
                                return types_1.ReprCBasedTheme[key].includes(r.type);
                            });
                            var expression = loci_1.Loci.toExpression(structure_1.Structure.toStructureElementLoci(r.getLoci().structure));
                            var updateStructure = (0, utils_1.getStructureByStructureQuery)((0, utils_1.getStructureQuery)(structure, expression));
                            // 通过updateStructure获取新的theme
                            // const newTheme = {
                            //   color: r.theme.color.factory(ctx, {
                            //     ...r.theme.color.props,
                            //   }),
                            //   size: r.theme.size.factory(ctx, {
                            //     ...r.theme.size.props,
                            //   }),
                            // }
                            r.setTheme({
                                color: ctx.colorThemeRegistry.create(themeC === types_1.ThemeC.RIBBON ? 'uniform' : 'element-symbol', {
                                    structure: updateStructure
                                }, themeC === types_1.ThemeC.RIBBON ? { value: (0, color_1.Color)(0xdcdde8) } : {
                                    carbonColor: {
                                        name: 'uniform',
                                        params: {
                                            value: (0, color_1.Color)(0xdcdde8),
                                            // value: Color(0x48e533),
                                        },
                                    }
                                }),
                                size: ctx.sizeThemeRegistry.create(themeC === types_1.ThemeC.RIBBON ? 'uniform' : 'physical', {
                                    structure: updateStructure
                                }, r.theme.size.props)
                            });
                            // r.setTheme(newTheme)
                            r.createOrUpdate({}, updateStructure).run();
                        }))];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
};
//# sourceMappingURL=trajectory.js.map