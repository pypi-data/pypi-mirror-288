"use strict";
/**
 * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LociLabelManager = void 0;
var loci_1 = require("../../mol-model/loci");
var representation_1 = require("../../mol-repr/representation");
var marker_action_1 = require("../../mol-util/marker-action");
var array_1 = require("../../mol-util/array");
var LociLabelManager = /** @class */ (function () {
    function LociLabelManager(ctx) {
        var _this = this;
        this.ctx = ctx;
        this.providers = [];
        this.locis = [];
        this.isDirty = false;
        this.labels = [];
        this.groupedLabels = new Map();
        ctx.managers.interactivity.lociHighlights.addProvider(function (loci, action, noRender) {
            _this.mark(loci, action);
            if (!noRender)
                _this.showLabels();
        });
    }
    LociLabelManager.prototype.clearProviders = function () {
        this.providers = [];
        this.isDirty = true;
        this.showLabels();
    };
    LociLabelManager.prototype.addProvider = function (provider) {
        this.providers.push(provider);
        this.providers.sort(function (a, b) { return (b.priority || 0) - (a.priority || 0); });
        this.isDirty = true;
        this.showLabels();
    };
    LociLabelManager.prototype.removeProvider = function (provider) {
        this.providers = this.providers.filter(function (p) { return p !== provider; });
        this.isDirty = true;
        this.showLabels();
    };
    LociLabelManager.prototype.mark = function (loci, action) {
        var idx = this.locis.findIndex(function (l) {
            return representation_1.Representation.Loci.areEqual(loci, l);
        });
        if (idx === -1 && action === marker_action_1.MarkerAction.Highlight) {
            this.locis.push(loci);
            this.isDirty = true;
        }
        else if (idx !== -1 && action === marker_action_1.MarkerAction.RemoveHighlight) {
            (0, array_1.arrayRemoveAtInPlace)(this.locis, idx);
            this.isDirty = true;
        }
    };
    LociLabelManager.prototype.showLabels = function () {
        this.ctx.behaviors.labels.highlight.next({ labels: this.getLabels(), locis: this.locis });
    };
    LociLabelManager.prototype.getLabels = function () {
        var _this = this;
        var _a;
        if (this.isDirty) {
            this.groupedLabels.clear();
            this.labels.length = 0;
            for (var _i = 0, _b = this.providers; _i < _b.length; _i++) {
                var provider = _b[_i];
                for (var _c = 0, _d = this.locis; _c < _d.length; _c++) {
                    var loci = _d[_c];
                    if (loci_1.Loci.isEmpty(loci.loci))
                        continue;
                    var label_1 = provider.label(loci.loci, loci.repr);
                    if (label_1) {
                        var hash = provider.group
                            ? provider.group(label_1)
                            : label_1.toString();
                        var group = this.groupedLabels.get(hash);
                        if (group)
                            group.push(label_1);
                        else
                            this.groupedLabels.set(hash, [label_1]);
                    }
                }
            }
            this.labels.length = 0;
            this.groupedLabels.forEach(function (group, hash) {
                var count = group.length;
                var entry = count > 1 && group[0] !== group[1] ? hash : group[0];
                _this.labels.push(count === 1 ? entry : "".concat(entry, " <small>|| \u00D7 ").concat(count, "</small>"));
            });
            this.isDirty = false;
        }
        // CHANGED BY XUHANG uniFold 过滤label用
        var label = this.labels[0];
        if (this.labels.length > 0 &&
            this.locis.length > 0 &&
            label.match('Plddt')) {
            var cells_1 = [];
            this.ctx.state.data.cells.forEach(function (item) {
                cells_1.push(item);
            });
            var structure = void 0;
            var loci = this.locis[0].loci;
            for (var i = 0; i < cells_1.length; i++) {
                if (((_a = cells_1[i].obj) === null || _a === void 0 ? void 0 : _a.type.name) === 'Structure 3D') {
                    var cell = void 0;
                    for (var j = 0; j < cells_1.length; j++) {
                        if (cells_1[j].transform.ref === cells_1[i].sourceRef) {
                            cell = cells_1[j];
                            break;
                        }
                    }
                    if (cells_1[i].parent.tryGetCellData(cell.sourceRef) === loci.structure) {
                        structure = cells_1[i];
                    }
                }
            }
            if ((structure === null || structure === void 0 ? void 0 : structure.params.values.colorTheme.name) === 'uni-fold') {
                return this.labels;
            }
            return [label.split('<div')[0]];
        }
        return this.labels;
    };
    return LociLabelManager;
}());
exports.LociLabelManager = LociLabelManager;
//# sourceMappingURL=loci-label.js.map