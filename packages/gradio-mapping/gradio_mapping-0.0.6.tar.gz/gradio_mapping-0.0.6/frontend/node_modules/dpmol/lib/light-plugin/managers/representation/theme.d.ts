import { CellItem, RepresentationContext, RepresentationType, ThemeC, ThemeItem, TransparencyItem } from '../../types';
import { Structure } from '../../../mol-model/structure/structure/structure';
import { Loci } from '../../../mol-model/structure/structure/element/loci';
import { LightPlugin } from '../../index';
import { ColorTheme } from '../../../mol-theme/color';
import { Color } from '../../../mol-util/color';
export declare type MolecularRepresentationType = RepresentationType.BallAndStick | RepresentationType.Stick | RepresentationType.Line | RepresentationType.CPK | RepresentationType.Ribbon | RepresentationType.Surface;
export declare const initialTheme: DefaultTheme;
export declare const DefaultLigandColorTheme: {
    name: string;
    props: {
        carbonColor: {
            name: string;
            params: {
                value: Color;
            };
        };
    };
};
export interface DefaultTheme {
    color: {
        [key in ThemeC]: ThemeItem;
    };
    size: {
        [key in MolecularRepresentationType]: ThemeItem;
    };
    transparency: {
        [key in ThemeC]: number;
    };
}
export declare class RepresentationTheme {
    plugin: LightPlugin;
    ctx?: RepresentationContext;
    defaultTheme: DefaultTheme;
    constructor(plugin: LightPlugin, defaultTheme?: Partial<DefaultTheme>);
    createColorTheme(item: ThemeItem, structure: Structure, themeC: ThemeC): ColorTheme<any>;
    createTheme(reprType: RepresentationType, structure: Structure, theme?: {
        color?: ThemeItem;
        size?: ThemeItem;
    }): {
        color: ColorTheme<any>;
        size: import("../../../mol-theme/size").SizeTheme<any>;
    };
    createTransparencyLayers(structure: Structure, items?: TransparencyItem[]): {
        kind: any;
        layers: {
            loci: Loci;
            value: number;
        }[];
    };
    setColorTheme(items: CellItem[], theme: ThemeItem, kind: ThemeC): void;
    setTransparency(items: CellItem[], value: number, kind: ThemeC): void;
    setDefaultTheme(data: Partial<DefaultTheme>): void;
}
