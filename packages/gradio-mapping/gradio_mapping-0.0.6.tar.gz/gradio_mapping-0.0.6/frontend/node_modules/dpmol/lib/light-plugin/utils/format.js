"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkLineValidate = exports.flattenDeep = exports.canvasToBlob = exports.readAsBlob = exports.readAsString = exports.readFileAsText = exports.fetchUrlAsBlob = exports.fetchUrlAsText = void 0;
var tslib_1 = require("tslib");
var fetchUrlAsText = function (url) {
    return fetch(url).then(function (rep) { return rep.text(); });
};
exports.fetchUrlAsText = fetchUrlAsText;
var fetchUrlAsBlob = function (url) {
    return fetch(url).then(function (rep) { return rep.blob(); });
};
exports.fetchUrlAsBlob = fetchUrlAsBlob;
var readFileAsText = function (file) {
    return new Promise(function (resolve) {
        var reader = new FileReader();
        reader.onload = function (event) {
            return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
                return (0, tslib_1.__generator)(this, function (_a) {
                    resolve(reader.result);
                    return [2 /*return*/];
                });
            });
        };
        reader.readAsText(file);
    });
};
exports.readFileAsText = readFileAsText;
var readAsString = function (data) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
    var _a, _b;
    return (0, tslib_1.__generator)(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (!(typeof data === 'string')) return [3 /*break*/, 4];
                if (!(data.startsWith('http') || data.startsWith('https'))) return [3 /*break*/, 2];
                return [4 /*yield*/, (0, exports.fetchUrlAsText)(data)];
            case 1:
                _b = _c.sent();
                return [3 /*break*/, 3];
            case 2:
                _b = data;
                _c.label = 3;
            case 3:
                _a = _b;
                return [3 /*break*/, 6];
            case 4: return [4 /*yield*/, (0, exports.readFileAsText)(data)];
            case 5:
                _a = _c.sent();
                _c.label = 6;
            case 6: return [2 /*return*/, (_a)];
        }
    });
}); };
exports.readAsString = readAsString;
var readAsBlob = function (data) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
    var _a, _b;
    return (0, tslib_1.__generator)(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (!(typeof data === 'string')) return [3 /*break*/, 2];
                return [4 /*yield*/, (0, exports.fetchUrlAsBlob)(data)];
            case 1:
                _a = _c.sent();
                return [3 /*break*/, 4];
            case 2:
                _b = Blob.bind;
                return [4 /*yield*/, data.arrayBuffer()];
            case 3:
                _a = new (_b.apply(Blob, [void 0, [_c.sent()]]))();
                _c.label = 4;
            case 4: return [2 /*return*/, _a];
        }
    });
}); };
exports.readAsBlob = readAsBlob;
function canvasToBlob(canvas, type, quality) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        return (0, tslib_1.__generator)(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var callback = function (blob) {
                        if (blob)
                            resolve(blob);
                        else
                            reject('no blob returned');
                    };
                    if (!HTMLCanvasElement.prototype.toBlob) {
                        var bin = atob(canvas.toDataURL(type, quality).split(',')[1]);
                        var len = bin.length;
                        var len32 = len >> 2;
                        var a8 = new Uint8Array(len);
                        var a32 = new Uint32Array(a8.buffer, 0, len32);
                        var j = 0;
                        for (var i = 0; i < len32; ++i) {
                            a32[i] =
                                bin.charCodeAt(j++) |
                                    (bin.charCodeAt(j++) << 8) |
                                    (bin.charCodeAt(j++) << 16) |
                                    (bin.charCodeAt(j++) << 24);
                        }
                        var tailLength = len & 3;
                        while (tailLength--)
                            a8[j] = bin.charCodeAt(j++);
                        callback(new Blob([a8], { type: type || 'image/png' }));
                    }
                    else {
                        canvas.toBlob(callback, type, quality);
                    }
                })];
        });
    });
}
exports.canvasToBlob = canvasToBlob;
var INFINITY = 1 / 0;
function arrayPush(array, values) {
    var index = -1;
    var length = values.length;
    var offset = array.length;
    while (++index < length) {
        array[offset + index] = values[index];
    }
    return array;
}
function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1;
    var length = array.length;
    predicate || (predicate = Array.isArray);
    result || (result = []);
    while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
            if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
            }
            else {
                arrayPush(result, value);
            }
        }
        else if (!isStrict) {
            result[result.length] = value;
        }
    }
    return result;
}
function flattenDeep(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, INFINITY) : [];
}
exports.flattenDeep = flattenDeep;
var checkLineValidate = function (line, format) {
    var errorInfo = [];
    for (var i = 0, l = format.length; i < l; i++) {
        var _a = format[i], start = _a.start, end = _a.end, regular = _a.regular;
        if (!regular.test(line.slice(start, end))) {
            errorInfo.push({
                start: start,
                end: end,
            });
        }
    }
    return errorInfo;
};
exports.checkLineValidate = checkLineValidate;
//# sourceMappingURL=format.js.map