"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepresentationTheme = exports.DefaultLigandColorTheme = exports.initialTheme = void 0;
var tslib_1 = require("tslib");
var types_1 = require("../../types");
var structure_1 = require("../../../mol-model/structure/structure/structure");
var bundle_1 = require("../../../mol-model/structure/structure/element/bundle");
var utils_1 = require("../../utils");
var loci_1 = require("../../../mol-model/structure/structure/element/loci");
var representation_1 = require("../../representation");
var color_1 = require("../../../mol-util/color");
exports.initialTheme = {
    color: (_a = {},
        _a[types_1.ThemeC.ATOM] = { name: 'element-symbol', props: {
                carbonColor: {
                    name: 'uniform',
                    params: {
                        value: (0, color_1.Color)(0xdcdde8),
                        // value: Color(0x48e533),
                    },
                }
            }
        },
        _a[types_1.ThemeC.RIBBON] = { name: 'uniform', props: { value: (0, color_1.Color)(0xdcdde8) } },
        _a[types_1.ThemeC.SURFACE] = { name: 'uniform' },
        _a),
    size: (_b = {},
        _b[types_1.RepresentationType.BallAndStick] = { name: 'physical' },
        _b[types_1.RepresentationType.Stick] = { name: 'uniform' },
        _b[types_1.RepresentationType.Line] = { name: 'physical' },
        _b[types_1.RepresentationType.CPK] = { name: 'physical' },
        _b[types_1.RepresentationType.Ribbon] = { name: 'uniform' },
        _b[types_1.RepresentationType.Surface] = { name: 'physical' },
        _b),
    transparency: (_c = {},
        _c[types_1.ThemeC.ATOM] = 0,
        _c[types_1.ThemeC.RIBBON] = 0,
        _c[types_1.ThemeC.SURFACE] = 0,
        _c)
};
exports.DefaultLigandColorTheme = {
    name: 'element-symbol',
    props: {
        carbonColor: {
            name: 'uniform',
            params: {
                value: (0, color_1.Color)(0x48e533),
            },
        }
    }
};
var RepresentationTheme = /** @class */ (function () {
    function RepresentationTheme(plugin, defaultTheme) {
        this.plugin = plugin;
        this.defaultTheme = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, exports.initialTheme), defaultTheme);
    }
    RepresentationTheme.prototype.createColorTheme = function (item, structure, themeC) {
        var _this = this;
        var _a, _b, _c, _d, _e;
        if (item.name === 'multi-theme') {
            return (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.colorThemeRegistry.create('multi-theme', { structure: structure }, {
                themes: (_d = (((_c = (_b = item.props) === null || _b === void 0 ? void 0 : _b.themes) === null || _c === void 0 ? void 0 : _c.length) ? item.props.themes : [this.defaultTheme.color[themeC]])) === null || _d === void 0 ? void 0 : _d.map(function (theme) { return ({
                    colorTheme: _this.createColorTheme(theme, theme.elementIds ? (0, utils_1.getStructureByElementIds)(structure, theme.elementIds) : structure, themeC),
                    bundle: bundle_1.Bundle.fromLoci((0, utils_1.getLoci)(structure, theme.elementIds))
                }); })
            });
        }
        return (_e = this.ctx) === null || _e === void 0 ? void 0 : _e.colorThemeRegistry.create(item.name, { structure: item.elementIds ? (0, utils_1.getStructureByElementIds)(structure, item.elementIds) : structure }, item.props);
    };
    RepresentationTheme.prototype.createTheme = function (reprType, structure, theme) {
        var themeC = Object.keys(types_1.ReprCBasedTheme).find(function (key) {
            return types_1.ReprCBasedTheme[key].includes(reprType);
        });
        var colorThemeItem = (theme === null || theme === void 0 ? void 0 : theme.color)
            ? theme === null || theme === void 0 ? void 0 : theme.color
            : this.defaultTheme.color[themeC];
        var sizeThemeItem = (theme === null || theme === void 0 ? void 0 : theme.size)
            ? theme === null || theme === void 0 ? void 0 : theme.size
            : this.defaultTheme.size[reprType];
        return {
            color: this.createColorTheme(colorThemeItem, structure, themeC),
            size: this.ctx.sizeThemeRegistry.create(sizeThemeItem.name, {
                structure: structure
            }, sizeThemeItem.props)
        };
    };
    RepresentationTheme.prototype.createTransparencyLayers = function (structure, items) {
        if (!(items === null || items === void 0 ? void 0 : items.length)) {
            return {
                kind: 'empty-loci',
                layers: []
            };
        }
        var layers = items.map(function (_a) {
            var elementIds = _a.elementIds, value = _a.value;
            return ({
                loci: (0, utils_1.getLoci)(structure, elementIds),
                value: value !== undefined ? 1 - value : 0
            });
        });
        return { kind: 'element-loci', layers: layers };
    };
    // color用uniform传进来，都在colorTheme中管理
    RepresentationTheme.prototype.setColorTheme = function (items, theme, kind) {
        var _this = this;
        // const cell = this.plugin.managers.cell.get(ref)
        items.forEach(function (_a) {
            var _b, _c;
            var _d, _e;
            var ref = _a.ref, elementIds = _a.elementIds;
            var cell = _this.plugin.cells.get(ref);
            if (!(cell === null || cell === void 0 ? void 0 : cell.model.structure) &&
                (cell === null || cell === void 0 ? void 0 : cell.representations.has(types_1.RepresentationType.Surface))) {
                if (kind !== types_1.ThemeC.SURFACE) {
                    return;
                }
                var structure = loci_1.Loci.toStructure(
                // Repr Cache Compatible
                (0, utils_1.transformLociToElementLoci)(cell.representations
                    .get(types_1.RepresentationType.Surface)
                    .state.getLoci()));
                var elements_1 = (0, utils_1.getElementsFromStructure)(structure);
                cell.theme.color = (_b = {
                        Atom: [],
                        Ribbon: []
                    },
                    _b[types_1.ThemeC.SURFACE] = [
                        (0, tslib_1.__assign)({ elementIds: elements_1 }, theme)
                    ],
                    _b);
                representation_1.OtherRepresentation[types_1.RepresentationType.Surface].update((_d = cell === null || cell === void 0 ? void 0 : cell.representations.get(types_1.RepresentationType.Surface)) === null || _d === void 0 ? void 0 : _d.state, structure, _this.ctx, _this.createTheme(types_1.RepresentationType.Surface, structure, {
                    color: theme
                }));
                return;
            }
            var elements = (0, tslib_1.__spreadArray)([], (elementIds !== null && elementIds !== void 0 ? elementIds : []), true);
            if (!elementIds) {
                elements.push.apply(elements, (0, utils_1.getElementIdsByLoci)(structure_1.Structure.toStructureElementLoci((0, utils_1.getStructureByCell)(cell))));
            }
            var elementsSet = new Set(elements);
            if (!cell)
                return;
            if (!cell.theme.color) {
                cell.theme.color = (_c = {
                        Atom: [],
                        Ribbon: [],
                        Surface: []
                    },
                    _c[kind] = [(0, tslib_1.__assign)({ elementIds: Array.from(elementsSet.values()) }, theme)],
                    _c);
            }
            else {
                if ((_e = cell.theme.color[kind]) === null || _e === void 0 ? void 0 : _e.length) {
                    cell.theme.color[kind].forEach(function (_, index) {
                        cell.theme.color[kind][index].elementIds = cell.theme.color[kind][index].elementIds.filter(function (item) { return !elementsSet.has(item); });
                    });
                    cell.theme.color[kind] = cell.theme.color[kind].filter(function (_a) {
                        var elementIds = _a.elementIds;
                        return elementIds === null || elementIds === void 0 ? void 0 : elementIds.length;
                    });
                }
                cell.theme.color[kind].push((0, tslib_1.__assign)({ elementIds: Array.from(elementsSet.values()) }, theme));
            }
            types_1.ReprCBasedTheme[kind].forEach(function (type) {
                var _a;
                var repr = cell.representations.get(type);
                if (!repr)
                    return;
                // Repr Cache Compatible
                var reprStructure = (0, utils_1.getStructureFromRepresentation)(repr.state);
                representation_1.MolecularRepresentation[type].update(
                // Repr Cache Compatible
                repr.state, reprStructure, _this.ctx, {
                    color: _this.ctx.colorThemeRegistry.create('multi-theme', { structure: reprStructure }, {
                        themes: (_a = cell.theme.color[kind]) === null || _a === void 0 ? void 0 : _a.map(function (theme) { return ({
                            colorTheme: _this.createColorTheme(theme, reprStructure, kind),
                            bundle: bundle_1.Bundle.fromLoci((0, utils_1.getLoci)(reprStructure, theme.elementIds))
                        }); })
                    }),
                    // Repr Cache Compatible
                    size: repr.state.theme.size
                });
            });
        });
        this.plugin.managers.snapshot.event.changed.next({
            from: 'repr: setColorTheme'
        });
    };
    RepresentationTheme.prototype.setTransparency = function (items, value, kind) {
        var _this = this;
        var refSet = new Set();
        items.forEach(function (_a) {
            var _b, _c;
            var _d, _e;
            var ref = _a.ref, elementIds = _a.elementIds;
            var cell = _this.plugin.cells.get(ref);
            if (!(cell === null || cell === void 0 ? void 0 : cell.model.structure) &&
                (cell === null || cell === void 0 ? void 0 : cell.representations.has(types_1.RepresentationType.Surface))) {
                if (kind !== types_1.ThemeC.SURFACE) {
                    return;
                }
                var structure = loci_1.Loci.toStructure((0, utils_1.transformLociToElementLoci)(cell.representations
                    .get(types_1.RepresentationType.Surface)
                    .state.getLoci()));
                var elementIds_1 = (0, utils_1.getElementsFromStructure)(structure);
                cell.theme.transparency = (_b = {},
                    _b[types_1.ThemeC.SURFACE] = [
                        {
                            elementIds: elementIds_1,
                            value: value
                        }
                    ],
                    _b);
                (_d = cell === null || cell === void 0 ? void 0 : cell.representations.get(types_1.RepresentationType.Surface)) === null || _d === void 0 ? void 0 : _d.state.setState({
                    transparency: _this.createTransparencyLayers((0, utils_1.getStructureFromRepresentation)((_e = cell === null || cell === void 0 ? void 0 : cell.representations.get(types_1.RepresentationType.Surface)) === null || _e === void 0 ? void 0 : _e.state), cell === null || cell === void 0 ? void 0 : cell.theme.transparency[kind])
                });
                return;
            }
            var elements = (0, tslib_1.__spreadArray)([], (elementIds !== null && elementIds !== void 0 ? elementIds : []), true);
            if (!elementIds && cell) {
                var structure = (0, utils_1.getStructureByCell)(cell);
                if (structure) {
                    elements.push.apply(elements, (0, utils_1.getElementIdsByLoci)(structure_1.Structure.toStructureElementLoci(structure)));
                }
            }
            var elementsSet = new Set(elements);
            if (!cell)
                return;
            refSet.add(ref);
            if (!cell.theme.transparency) {
                cell.theme.transparency = (_c = {},
                    _c[types_1.ThemeC.ATOM] = [],
                    _c[types_1.ThemeC.RIBBON] = [],
                    _c[types_1.ThemeC.SURFACE] = [],
                    _c[kind] = {
                        elementIds: Array.from(elementsSet.values()),
                        value: value
                    },
                    _c);
            }
            else {
                var themes_1 = cell.theme.transparency[kind];
                if (themes_1.length) {
                    themes_1.forEach(function (_a, index) {
                        var elementIds = _a.elementIds;
                        themes_1[index].elementIds = elements.filter(function (item) { return !elementsSet.has(item); });
                    });
                    cell.theme.transparency[kind] = themes_1.filter(function (_a) {
                        var elementIds = _a.elementIds;
                        return elements.length;
                    });
                }
                cell.theme.transparency[kind].push({
                    elementIds: Array.from(elementsSet.values()),
                    value: value
                });
            }
        });
        var updateReprType = types_1.ReprCBasedTheme[kind];
        refSet.forEach(function (ref) {
            var cell = _this.plugin.cells.get(ref);
            updateReprType.forEach(function (reprType) {
                var repr = cell === null || cell === void 0 ? void 0 : cell.representations.get(reprType);
                if (!repr)
                    return;
                var reprStructure = (0, utils_1.getStructureFromRepresentation)(repr.state);
                var transparency = _this.createTransparencyLayers(reprStructure, cell === null || cell === void 0 ? void 0 : cell.theme.transparency[kind]);
                repr.state.setState({
                    transparency: transparency
                });
            });
        });
        this.plugin.managers.snapshot.event.changed.next({
            from: 'repr: setColorTheme'
        });
    };
    RepresentationTheme.prototype.setDefaultTheme = function (data) {
        var _a;
        this.defaultTheme = (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, exports.initialTheme), ((_a = this.defaultTheme) !== null && _a !== void 0 ? _a : {})), data);
    };
    return RepresentationTheme;
}());
exports.RepresentationTheme = RepresentationTheme;
//# sourceMappingURL=theme.js.map