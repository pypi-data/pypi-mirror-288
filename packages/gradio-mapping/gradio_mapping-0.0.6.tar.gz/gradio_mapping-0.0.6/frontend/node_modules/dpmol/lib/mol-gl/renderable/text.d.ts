/**
 * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { Renderable, RenderableState } from '../renderable';
import { WebGLContext } from '../webgl/context';
import { GraphicsRenderVariant } from '../webgl/render-item';
import { AttributeSpec, UniformSpec, Values, TextureSpec, ElementsSpec, ValueSpec } from './schema';
export declare const TextSchema: {
    aGroup: AttributeSpec<"float32">;
    aPosition: AttributeSpec<"float32">;
    aMapping: AttributeSpec<"float32">;
    aDepth: AttributeSpec<"float32">;
    elements: ElementsSpec<"uint32">;
    aTexCoord: AttributeSpec<"float32">;
    tFont: TextureSpec<"image-uint8">;
    padding: ValueSpec<"number">;
    uBorderWidth: UniformSpec<"f">;
    uBorderColor: UniformSpec<"v3">;
    uOffsetX: UniformSpec<"f">;
    uOffsetY: UniformSpec<"f">;
    uOffsetZ: UniformSpec<"f">;
    uBackgroundColor: UniformSpec<"v3">;
    uBackgroundOpacity: UniformSpec<"f">;
    uSize: UniformSpec<"f">;
    uSizeTexDim: UniformSpec<"v2">;
    tSize: TextureSpec<"image-uint8">;
    dSizeType: import("./schema").DefineSpec<"string">;
    uSizeFactor: UniformSpec<"f">;
    dLightCount: import("./schema").DefineSpec<"number">;
    dClipObjectCount: import("./schema").DefineSpec<"number">;
    dClipVariant: import("./schema").DefineSpec<"string">;
    uClipObjectType: UniformSpec<"i[]">;
    uClipObjectInvert: UniformSpec<"b[]">;
    uClipObjectPosition: UniformSpec<"v3[]">;
    uClipObjectRotation: UniformSpec<"v4[]">;
    uClipObjectScale: UniformSpec<"v3[]">;
    aInstance: AttributeSpec<"float32">;
    aTransform: AttributeSpec<"float32">;
    uAlpha: UniformSpec<"f">;
    uMetalness: UniformSpec<"f">;
    uRoughness: UniformSpec<"f">;
    uBumpiness: UniformSpec<"f">;
    uVertexCount: UniformSpec<"i">;
    uInstanceCount: UniformSpec<"i">;
    uGroupCount: UniformSpec<"i">;
    uInvariantBoundingSphere: UniformSpec<"v4">;
    drawCount: ValueSpec<"number">;
    instanceCount: ValueSpec<"number">;
    alpha: ValueSpec<"number">;
    matrix: ValueSpec<"m4">;
    transform: ValueSpec<"float32">;
    extraTransform: ValueSpec<"float32">;
    hasReflection: ValueSpec<"boolean">;
    boundingSphere: ValueSpec<"sphere">;
    invariantBoundingSphere: ValueSpec<"sphere">;
    uClippingTexDim: UniformSpec<"v2">;
    tClipping: TextureSpec<"image-uint8">;
    dClipping: import("./schema").DefineSpec<"boolean">;
    uSubstanceTexDim: UniformSpec<"v2">;
    tSubstance: TextureSpec<"image-uint8">;
    dSubstance: import("./schema").DefineSpec<"boolean">;
    uSubstanceGridDim: UniformSpec<"v3">;
    uSubstanceGridTransform: UniformSpec<"v4">;
    tSubstanceGrid: TextureSpec<"texture">;
    dSubstanceType: import("./schema").DefineSpec<"string">;
    uTransparencyTexDim: UniformSpec<"v2">;
    tTransparency: TextureSpec<"image-uint8">;
    dTransparency: import("./schema").DefineSpec<"boolean">;
    transparencyAverage: ValueSpec<"number">;
    uTransparencyGridDim: UniformSpec<"v3">;
    uTransparencyGridTransform: UniformSpec<"v4">;
    tTransparencyGrid: TextureSpec<"texture">;
    dTransparencyType: import("./schema").DefineSpec<"string">;
    uOverpaintTexDim: UniformSpec<"v2">;
    tOverpaint: TextureSpec<"image-uint8">;
    dOverpaint: import("./schema").DefineSpec<"boolean">;
    uOverpaintGridDim: UniformSpec<"v3">;
    uOverpaintGridTransform: UniformSpec<"v4">;
    tOverpaintGrid: TextureSpec<"texture">;
    dOverpaintType: import("./schema").DefineSpec<"string">;
    uMarker: UniformSpec<"f">;
    uMarkerTexDim: UniformSpec<"v2">;
    tMarker: TextureSpec<"image-uint8">;
    markerAverage: ValueSpec<"number">;
    markerStatus: ValueSpec<"number">;
    uColor: UniformSpec<"v3">;
    uColorTexDim: UniformSpec<"v2">;
    uColorGridDim: UniformSpec<"v3">;
    uColorGridTransform: UniformSpec<"v4">;
    tColor: TextureSpec<"image-uint8">;
    tPalette: TextureSpec<"image-uint8">;
    tColorGrid: TextureSpec<"texture">;
    dColorType: import("./schema").DefineSpec<"string">;
    dUsePalette: import("./schema").DefineSpec<"boolean">;
    dGeometryType: import("./schema").DefineSpec<"string">;
};
export declare type TextSchema = typeof TextSchema;
export declare type TextValues = Values<TextSchema>;
export declare function TextRenderable(ctx: WebGLContext, id: number, values: TextValues, state: RenderableState, materialId: number, variants: GraphicsRenderVariant[]): Renderable<TextValues>;
