"use strict";
/**
 * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiThemeColorThemeProvider = exports.MultiThemeColorTheme = exports.getMultiThemeColorThemeParams = exports.MultiThemeColorThemeParams = void 0;
var tslib_1 = require("tslib");
var structure_1 = require("../../mol-model/structure");
var color_1 = require("../../mol-util/color");
var param_definition_1 = require("../../mol-util/param-definition");
var palette_1 = require("../../mol-util/color/palette");
var DefaultList = 'many-distinct';
var DefaultColor = (0, color_1.Color)(0xfafafa);
var Description = 'Structure allows multi theme based on location';
exports.MultiThemeColorThemeParams = (0, tslib_1.__assign)({ themes: param_definition_1.ParamDefinition.Value([]) }, (0, palette_1.getPaletteParams)({ type: 'colors', colorList: DefaultList }));
function getMultiThemeColorThemeParams(ctx) {
    var params = param_definition_1.ParamDefinition.clone(exports.MultiThemeColorThemeParams);
    return params;
}
exports.getMultiThemeColorThemeParams = getMultiThemeColorThemeParams;
function MultiThemeColorTheme(ctx, props) {
    var color;
    var themes = props.themes;
    if (ctx.structure) {
        color = function (location, isSecondary) {
            if (structure_1.StructureElement.Location.is(location)) {
                for (var i = 0; i < themes.length; i++) {
                    var theme = themes[i];
                    var subStructure = structure_1.StructureElement.Bundle.toStructure(theme.bundle, ctx.structure);
                    if (subStructure.hasElement(location)) {
                        return theme.colorTheme.color(location, isSecondary);
                    }
                }
            }
            else if (structure_1.Bond.isLocation(location)) {
                if (structure_1.Unit.isAtomic(location.aUnit)) {
                    for (var i = 0; i < themes.length; i++) {
                        var theme = themes[i];
                        var subStructure = structure_1.StructureElement.Bundle.toStructure(theme.bundle, ctx.structure);
                        var bondLocation = structure_1.StructureElement.Location.create(location.aStructure, location.aUnit, location.aUnit.elements[location.aIndex]);
                        if (subStructure.hasElement(bondLocation)) {
                            return theme.colorTheme.color(location, isSecondary);
                        }
                    }
                }
            }
            return DefaultColor;
        };
    }
    else {
        color = function () { return DefaultColor; };
    }
    return {
        factory: MultiThemeColorTheme,
        granularity: 'group',
        preferSmoothing: true,
        color: color,
        props: props,
        description: Description
    };
}
exports.MultiThemeColorTheme = MultiThemeColorTheme;
exports.MultiThemeColorThemeProvider = {
    name: 'multi-theme',
    label: 'Multi Theme',
    category: "Atom Property" /* Atom */,
    factory: MultiThemeColorTheme,
    getParams: getMultiThemeColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.MultiThemeColorThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure; }
};
//# sourceMappingURL=multi-theme.js.map