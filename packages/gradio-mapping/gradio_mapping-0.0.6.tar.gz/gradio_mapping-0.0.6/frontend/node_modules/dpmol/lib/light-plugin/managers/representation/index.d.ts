import { LightPlugin, TransparencyItem } from '../../index';
import { Theme } from '../../../mol-theme/theme';
import { CellItem, Format, InteractionParams, RepresentationContext, RepresentationType, ThemeC, ThemeItem } from '../../types';
import { UUID } from '../../../mol-util';
import { Structure } from '../../../mol-model/structure/structure/structure';
import { DefaultTheme } from './theme';
import { RepresentationInteractions } from './interactions';
export declare class RepresentationManager extends RepresentationInteractions {
    plugin: LightPlugin;
    ctx?: RepresentationContext;
    showPolarHydrogenOnly: boolean;
    constructor(plugin: LightPlugin, defaultTheme?: Partial<DefaultTheme>, defaultInteractionParams?: Partial<InteractionParams>);
    createContext(): void;
    createMolecular(props: {
        format: Format;
        reprType: RepresentationType;
        theme?: {
            [key in ThemeC]?: {
                color?: ThemeItem;
                size?: ThemeItem;
                transparency?: TransparencyItem;
            };
        };
        data: string | File;
        elementIds?: number[];
        ref?: UUID;
        defaultShown?: number;
        updateInteraction?: boolean;
    }): Promise<string[]>;
    updateMolecular(props: {
        ref: UUID;
        structure: Structure;
    }): Promise<import("../../types").Cell>;
    createMeasurement(props: {
        items: CellItem[];
        type: RepresentationType;
        props?: any;
        theme?: Theme;
        ref?: UUID;
        isHidden?: boolean;
    }): Promise<string>;
    updateMeasurement(props: {
        items: CellItem[];
        ref: UUID;
        params?: any;
    }): Promise<boolean>;
    createStaticLabel(props: {
        items: {
            item: CellItem;
            label?: string;
        }[];
        props?: any;
        theme?: Theme;
        ref?: UUID;
        isHidden?: boolean;
    }): Promise<string>;
    createOther(props: {
        data: any;
        type: RepresentationType;
        serverData?: any;
        theme?: {
            color?: ThemeItem;
            size?: ThemeItem;
            transparency?: TransparencyItem;
        };
        ref?: UUID;
        isHidden?: boolean;
        params?: any;
    }): Promise<string | undefined>;
    updateOther(props: {
        data: any;
        ref: UUID;
    }): Promise<boolean>;
    addMolecularRepr(ref: UUID, data: {
        elementIds?: number[];
        reprType: RepresentationType;
        isHidden: boolean;
        theme?: Theme;
        transparency?: TransparencyItem[];
    }): Promise<void>;
    checkStructuresDisplayed(item: CellItem, reprType?: RepresentationType): boolean;
    setMolecularRepr(items: CellItem[], reprType: RepresentationType, hideOther: boolean, isCoverSameKindRepr?: boolean, updateInteraction?: boolean): Promise<void>;
    showOrHideHs(isShowPolar: boolean, isShowNonPolar: boolean, items?: CellItem[]): void;
    redraw(): void;
}
