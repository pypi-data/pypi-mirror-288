"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HydrogenVariant = exports.HighlightLabelType = exports.ExpandFilterToHierarchyTypes = exports.ExpandFilter = exports.getDefaultInteractionParams = exports.InteractionOptions = exports.LociGranularityToGranularity = exports.GranularityToLociGranularity = exports.Granularity = exports.OtherReprType = exports.MeasurementType = exports.AtomReprType = exports.MolecularReprType = exports.Intersection = exports.ReprCBasedTheme = exports.ThemeC = exports.RepresentationType = exports.HierarchyType = exports.Format = void 0;
var hydrogen_bonds_1 = require("../mol-model-props/computed/interactions/hydrogen-bonds");
var halogen_bonds_1 = require("../mol-model-props/computed/interactions/halogen-bonds");
var charged_1 = require("../mol-model-props/computed/interactions/charged");
var metal_1 = require("../mol-model-props/computed/interactions/metal");
var Format;
(function (Format) {
    Format["Pdb"] = "pdb";
    Format["Sdf"] = "sdf";
    Format["Mol"] = "mol";
    Format["Mol2"] = "mol2";
    Format["MMCif"] = "mmcif";
    Format["Gro"] = "gro";
    Format["Xtc"] = "xtc";
})(Format = exports.Format || (exports.Format = {}));
// export enum CellType {
//   Molecular,
//   Pharmacophore,
//   Pocket,
//   Surface,
//   IsoSurface, // 密度图
//   Label,
//   Distance,
//   Angle,
//   Dihedral,
//   Interactions,
//   Trajectory,
//   Error
// }
var HierarchyType;
(function (HierarchyType) {
    HierarchyType["Molecular"] = "Molecular";
    HierarchyType["Protein"] = "Protein";
    HierarchyType["Chain"] = "Chain";
    HierarchyType["Residue"] = "Residue";
    HierarchyType["Ligand"] = "Ligand";
    HierarchyType["Solvent"] = "Solvent";
    HierarchyType["Water"] = "Water";
    HierarchyType["Other"] = "Other";
    HierarchyType["Metal"] = "Metal";
    HierarchyType["Ions"] = "Ions";
    HierarchyType["Atom"] = "Atom";
})(HierarchyType = exports.HierarchyType || (exports.HierarchyType = {}));
var RepresentationType;
(function (RepresentationType) {
    RepresentationType["Ribbon"] = "Ribbon";
    RepresentationType["BallAndStick"] = "BallAndStick";
    RepresentationType["Line"] = "Line";
    RepresentationType["Stick"] = "Stick";
    RepresentationType["CPK"] = "CPK";
    RepresentationType["Label"] = "Label";
    RepresentationType["Distance"] = "Distance";
    RepresentationType["Angle"] = "Angle";
    RepresentationType["Dihedral"] = "Dihedral";
    RepresentationType["IntraInteractions"] = "IntraInteractions";
    RepresentationType["BetweenInteractions"] = "BetweenInteractions";
    RepresentationType["Pharmacophore"] = "Pharmacophore";
    RepresentationType["Pocket"] = "Pocket";
    RepresentationType["Surface"] = "Surface";
    RepresentationType["IsoSurface"] = "IsoSurface";
    RepresentationType["RotateArrow"] = "RotateArrow";
    RepresentationType["MappingLine"] = "MappingLine";
    RepresentationType["Trajectory"] = "Trajectory";
})(RepresentationType = exports.RepresentationType || (exports.RepresentationType = {}));
var ThemeC;
(function (ThemeC) {
    ThemeC["RIBBON"] = "Ribbon";
    ThemeC["ATOM"] = "Atom";
    ThemeC["SURFACE"] = "Surface";
})(ThemeC = exports.ThemeC || (exports.ThemeC = {}));
exports.ReprCBasedTheme = (_a = {},
    _a[ThemeC.RIBBON] = [RepresentationType.Ribbon],
    _a[ThemeC.ATOM] = [
        RepresentationType.CPK,
        RepresentationType.Line,
        RepresentationType.Stick,
        RepresentationType.BallAndStick
    ],
    _a[ThemeC.SURFACE] = [RepresentationType.Surface],
    _a);
// isosurface 密度图
var Intersection;
(function (Intersection) {
    Intersection[Intersection["Not"] = 0] = "Not";
    Intersection[Intersection["Include"] = 1] = "Include";
    Intersection[Intersection["BeIncluded"] = 2] = "BeIncluded";
    Intersection[Intersection["Cross"] = 3] = "Cross"; // 相交
})(Intersection = exports.Intersection || (exports.Intersection = {}));
exports.MolecularReprType = new Set([
    RepresentationType.Ribbon,
    RepresentationType.CPK,
    RepresentationType.Line,
    RepresentationType.Stick,
    RepresentationType.BallAndStick,
    RepresentationType.Surface,
]);
exports.AtomReprType = new Set([
    RepresentationType.BallAndStick,
    RepresentationType.Line,
    RepresentationType.Stick,
    RepresentationType.CPK,
]);
exports.MeasurementType = new Set([
    RepresentationType.Label,
    RepresentationType.Distance,
    RepresentationType.Angle,
    RepresentationType.Dihedral
]);
exports.OtherReprType = new Set([RepresentationType.Surface, RepresentationType.Pharmacophore, RepresentationType.Pocket]);
var Granularity;
(function (Granularity) {
    Granularity["Atom"] = "Atom";
    Granularity["Residue"] = "Residue";
    Granularity["Chain"] = "Chain";
    Granularity["Molecular"] = "Molecular";
})(Granularity = exports.Granularity || (exports.Granularity = {}));
exports.GranularityToLociGranularity = (_b = {},
    _b[Granularity.Atom] = 'element',
    _b[Granularity.Residue] = 'residue',
    _b[Granularity.Chain] = 'chain',
    _b[Granularity.Molecular] = 'entity',
    _b);
exports.LociGranularityToGranularity = {
    element: Granularity.Atom,
    residue: Granularity.Residue,
    chain: Granularity.Chain,
    entity: Granularity.Molecular
};
var InteractionOptions;
(function (InteractionOptions) {
    InteractionOptions["HydrogenBonds"] = "hydrogen-bonds";
    InteractionOptions["WeakHydrogenBonds"] = "weak-hydrogen-bonds";
    InteractionOptions["HalogenBonds"] = "halogen-bonds";
    InteractionOptions["SaltBridge"] = "ionic";
    InteractionOptions["PiPiStacking"] = "pi-stacking";
    InteractionOptions["PiCations"] = "cation-pi";
    InteractionOptions["MetalBonds"] = "metal-coordination";
    InteractionOptions["Hydrophobic"] = "hydrophobic";
})(InteractionOptions = exports.InteractionOptions || (exports.InteractionOptions = {}));
var getDefaultInteractionParams = function (options) {
    var _a;
    var params = (_a = {},
        _a[InteractionOptions.HydrogenBonds] = {
            name: 'on',
            params: hydrogen_bonds_1.DefaultHydrogenBondsParams
        },
        _a[InteractionOptions.WeakHydrogenBonds] = {
            name: 'off',
            params: hydrogen_bonds_1.DefaultWeakHydrogenBondsParams
        },
        _a[InteractionOptions.HalogenBonds] = {
            name: 'on',
            params: halogen_bonds_1.DefaultHalogenBondParams
        },
        _a[InteractionOptions.SaltBridge] = {
            name: 'on',
            params: charged_1.DefaultIonicParams
        },
        _a[InteractionOptions.PiPiStacking] = {
            name: 'on',
            params: charged_1.DefaultPiStackingParams
        },
        _a[InteractionOptions.PiCations] = {
            name: 'on',
            params: charged_1.DefaultCationPiParams
        },
        _a[InteractionOptions.MetalBonds] = {
            name: 'on',
            params: metal_1.DefaultMetalCoordinationParams
        },
        _a[InteractionOptions.Hydrophobic] = {
            name: 'off',
            params: {}
        },
        _a);
    if (options) {
        Object.keys(params).forEach(function (option) {
            params[option].name = !options.includes(option) ? 'off' : 'on';
        });
    }
    return params;
};
exports.getDefaultInteractionParams = getDefaultInteractionParams;
var ExpandFilter;
(function (ExpandFilter) {
    ExpandFilter[ExpandFilter["All"] = 0] = "All";
    ExpandFilter[ExpandFilter["Residues"] = 1] = "Residues";
    ExpandFilter[ExpandFilter["Water"] = 2] = "Water";
    ExpandFilter[ExpandFilter["SolventWithoutWater"] = 3] = "SolventWithoutWater";
    ExpandFilter[ExpandFilter["Solvent"] = 4] = "Solvent";
})(ExpandFilter = exports.ExpandFilter || (exports.ExpandFilter = {}));
exports.ExpandFilterToHierarchyTypes = (_c = {},
    _c[ExpandFilter.All] = [
        HierarchyType.Protein,
        HierarchyType.Water,
        HierarchyType.Ligand,
        HierarchyType.Solvent
    ],
    _c[ExpandFilter.Residues] = [HierarchyType.Protein],
    _c[ExpandFilter.Water] = [HierarchyType.Water],
    _c[ExpandFilter.SolventWithoutWater] = [HierarchyType.Solvent],
    _c[ExpandFilter.Solvent] = [HierarchyType.Water, HierarchyType.Solvent],
    _c);
var HighlightLabelType;
(function (HighlightLabelType) {
    HighlightLabelType["Structure"] = "Structure";
    HighlightLabelType["Measurement"] = "Measurement";
    HighlightLabelType["Interaction"] = "Interaction";
    HighlightLabelType["Bond"] = "Bond";
})(HighlightLabelType = exports.HighlightLabelType || (exports.HighlightLabelType = {}));
var HydrogenVariant;
(function (HydrogenVariant) {
    HydrogenVariant[HydrogenVariant["NotHydrogen"] = -1] = "NotHydrogen";
    HydrogenVariant[HydrogenVariant["NonPolar"] = 0] = "NonPolar";
    HydrogenVariant[HydrogenVariant["Polar"] = 1] = "Polar";
    HydrogenVariant[HydrogenVariant["ConnectPolar"] = 2] = "ConnectPolar";
    HydrogenVariant[HydrogenVariant["ConnectNonPolar"] = 3] = "ConnectNonPolar";
})(HydrogenVariant = exports.HydrogenVariant || (exports.HydrogenVariant = {}));
//# sourceMappingURL=types.js.map