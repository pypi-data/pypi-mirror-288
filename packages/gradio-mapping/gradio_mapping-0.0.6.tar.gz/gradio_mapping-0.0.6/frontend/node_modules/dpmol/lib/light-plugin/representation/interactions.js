"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractionsRepr = exports.INTERACTION_TYPE = void 0;
var tslib_1 = require("tslib");
var types_1 = require("../types");
var synchronous_1 = require("../../mol-task/execution/synchronous");
var assets_1 = require("../../mol-util/assets");
var interactions_1 = require("../../mol-model-props/computed/interactions");
var interactions_2 = require("../../mol-model-props/computed/representations/interactions");
var utils_1 = require("../utils");
var features_1 = require("../../mol-model-props/computed/interactions/features");
var common_1 = require("../../mol-model-props/computed/interactions/common");
var valence_model_1 = require("../../mol-model-props/computed/valence-model");
var interactions_3 = require("../../mol-model-props/computed/interactions/interactions");
var type_helpers_1 = require("../../mol-util/type-helpers");
var set_1 = require("../../mol-util/set");
var index_1 = require("./index");
Object.defineProperty(exports, "INTERACTION_TYPE", { enumerable: true, get: function () { return index_1.INTERACTION_TYPE; } });
exports.InteractionsRepr = {
    createOrUpdateInCellItems: function (items, plugin, type, params, theme) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var structure, interactionParams, existedRef, representation;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        structure = (0, utils_1.getMergedStructure)(items, plugin).structure;
                        interactionParams = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, interactions_1.InteractionsProvider.defaultParams), { type: type });
                        if (params) {
                            interactionParams.providers.defaultValue = params;
                        }
                        return [4 /*yield*/, interactions_1.InteractionsProvider.attach({ runtime: synchronous_1.SyncRuntimeContext, assetManager: new assets_1.AssetManager() }, structure, interactionParams)];
                    case 1:
                        _a.sent();
                        plugin.managers.cell.traverse(function (cell, repr) {
                            var _a;
                            if (repr.type === types_1.RepresentationType.IntraInteractions) {
                                existedRef = cell.ref;
                                // Repr State Cache
                                if (repr.state) {
                                    (_a = plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.remove(repr.state);
                                    repr.state.destroy();
                                }
                            }
                            if (repr.type === types_1.RepresentationType.BetweenInteractions) {
                                plugin.managers.cell.remove([{ ref: cell.ref }]);
                            }
                        });
                        representation = interactions_2.InteractionsRepresentationProvider.factory(plugin.managers.representation.ctx, interactions_2.InteractionsRepresentationProvider.getParams);
                        representation.setTheme({
                            color: plugin.managers.representation.ctx.colorThemeRegistry.create('interaction-type', {
                                structure: structure
                            }),
                            size: plugin.managers.representation.ctx.sizeThemeRegistry.create('uniform', {
                                structure: structure
                            })
                        });
                        return [4 /*yield*/, representation
                                .createOrUpdate({}, structure)
                                .run()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, { representation: representation, structure: structure, ref: existedRef }];
                }
            });
        });
    },
    createOrUpdateBetweenCellItems: function (itemsA, itemsB, plugin, params, theme) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var _a, unitsMap, structure, interactionParams, groupA, groupB, i, l, i, l, _b, contacts, unitsFeatures, i, il, e, uA, uB, infoA, infoB, existedRef, removeItems, representation;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = (0, utils_1.getMergedStructure)((0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], itemsA, true), itemsB, true), plugin), unitsMap = _a.unitsMap, structure = _a.structure;
                        interactionParams = (0, tslib_1.__assign)({}, interactions_1.InteractionsProvider.defaultParams);
                        if (params) {
                            interactionParams.providers.defaultValue = params;
                        }
                        groupA = new Set();
                        groupB = new Set();
                        for (i = 0, l = itemsA.length; i < l; i++) {
                            unitsMap.get(i).forEach(function (unitId) { return groupA.add(unitId); });
                        }
                        for (i = 0, l = itemsB.length; i < l; i++) {
                            unitsMap
                                .get(i + itemsA.length)
                                .forEach(function (unitId) { return groupB.add(unitId); });
                        }
                        return [4 /*yield*/, interactions_1.InteractionsProvider.attach({ runtime: synchronous_1.SyncRuntimeContext, assetManager: new assets_1.AssetManager() }, structure, interactionParams)
                            // 过滤非itemsA与itemsB之间的相互作用，只处理contacts不管unitsContacts,因为unitsContacts全不要，通过repr的visuals属性排除所有intra-unit
                        ];
                    case 1:
                        _c.sent();
                        // 过滤非itemsA与itemsB之间的相互作用，只处理contacts不管unitsContacts,因为unitsContacts全不要，通过repr的visuals属性排除所有intra-unit
                        if (!structure.state.propertyData.molstar_computed_interactions)
                            return [2 /*return*/, {}];
                        _b = structure.state.propertyData.molstar_computed_interactions.data.value, contacts = _b.contacts, unitsFeatures = _b.unitsFeatures;
                        for (i = 0, il = contacts.edgeCount; i < il; ++i) {
                            e = contacts.edges[i];
                            uA = structure.unitMap.get(e.unitA);
                            uB = structure.unitMap.get(e.unitB);
                            infoA = features_1.Features.Info(structure, uA, unitsFeatures.get(e.unitA));
                            infoA.feature = e.indexA;
                            infoB = features_1.Features.Info(structure, uB, unitsFeatures.get(e.unitB));
                            infoB.feature = e.indexB;
                            if (!((groupA.has(e.unitA) && groupB.has(e.unitB)) ||
                                (groupB.has(e.unitA) && groupA.has(e.unitB)))) {
                                // @ts-ignore
                                contacts.edges[i].props.flag = common_1.InteractionFlag.Filtered;
                            }
                        }
                        removeItems = [];
                        plugin.managers.cell.traverse(function (cell, repr) {
                            var _a;
                            if (repr.type === types_1.RepresentationType.BetweenInteractions) {
                                existedRef = cell.ref;
                                // Repr State Cache
                                if (repr.state) {
                                    (_a = plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.remove(repr.state);
                                    repr.state.destroy();
                                }
                            }
                            if (repr.type === types_1.RepresentationType.IntraInteractions) {
                                removeItems.push({ ref: cell.ref });
                            }
                        });
                        return [4 /*yield*/, plugin.managers.cell.remove(removeItems)];
                    case 2:
                        _c.sent();
                        representation = interactions_2.InteractionsRepresentationProvider.factory(plugin.managers.representation.ctx, interactions_2.InteractionsRepresentationProvider.getParams);
                        representation.setTheme({
                            color: plugin.managers.representation.ctx.colorThemeRegistry.create('interaction-type', {
                                structure: structure
                            }),
                            size: plugin.managers.representation.ctx.sizeThemeRegistry.create('uniform', {
                                structure: structure
                            })
                        });
                        return [4 /*yield*/, representation
                                .createOrUpdate({ visuals: ['inter-unit'] }, structure)
                                .run()];
                    case 3:
                        _c.sent();
                        return [2 /*return*/, { representation: representation, structure: structure, ref: existedRef }];
                }
            });
        });
    },
    createOrUpdateGlobal: function (globalCellItems, plugin, type, params, theme, filterItems) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var valenceData, featuresList, index, contactTesters, requiredFeatures, featureProviders, i, l, item, cell, structure_1, j, jl, features, _a, unitsMap, structure, unitIdToRefMap, refWithUnitIdToUnitIdMap, interactionElementIds, _loop_1, i, l, filterMergedKeys, interactionParams, _b, contacts, unitsContacts, unitsFeatures, existedRef, representation;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        valenceData = new Map();
                        featuresList = [];
                        index = 0;
                        contactTesters = [];
                        (0, type_helpers_1.ObjectKeys)(interactions_3.ContactProviders).forEach(function (k) {
                            var _a = (params !== null && params !== void 0 ? params : interactionParams.providers.defaultValue)[k], name = _a.name, providerParams = _a.params;
                            if (name === 'on') {
                                contactTesters.push(interactions_3.ContactProviders[k].createTester(providerParams));
                            }
                        });
                        requiredFeatures = new Set();
                        contactTesters.forEach(function (l) {
                            return set_1.SetUtils.add(requiredFeatures, l.requiredFeatures);
                        });
                        featureProviders = interactions_3.FeatureProviders.filter(function (f) {
                            return set_1.SetUtils.areIntersecting(requiredFeatures, f.types);
                        });
                        i = 0, l = globalCellItems.length;
                        _c.label = 1;
                    case 1:
                        if (!(i < l)) return [3 /*break*/, 4];
                        item = globalCellItems[i];
                        cell = plugin.cells.get(item.ref);
                        if (!cell) return [3 /*break*/, 3];
                        structure_1 = item.elementIds ? (0, utils_1.getStructureByElementIds)((0, utils_1.getStructureByCell)(cell), item.elementIds) : (0, utils_1.getStructureByCell)(cell);
                        return [4 /*yield*/, valence_model_1.ValenceModelProvider.attach({ runtime: synchronous_1.SyncRuntimeContext, assetManager: new assets_1.AssetManager() }, structure_1)];
                    case 2:
                        _c.sent();
                        structure_1.currentPropertyData.molstar_computed_valence_model.data.value.forEach(function (item) {
                            valenceData.set(index, item);
                            index++;
                        });
                        for (j = 0, jl = structure_1.units.length; j < jl; j++) {
                            features = (0, interactions_3.findUnitFeatures)(structure_1, structure_1.units[j], featureProviders);
                            featuresList.push(features);
                        }
                        _c.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        _a = (0, utils_1.getMergedStructure)(globalCellItems, plugin), unitsMap = _a.unitsMap, structure = _a.structure;
                        unitIdToRefMap = new Map();
                        refWithUnitIdToUnitIdMap = new Map();
                        interactionElementIds = new Map();
                        _loop_1 = function (i, l) {
                            interactionElementIds.set(globalCellItems[i].ref, new Set());
                            var unitIds = unitsMap.get(i);
                            var cell = plugin.cells.get(globalCellItems[i].ref);
                            if (cell) {
                                var units_1 = (0, utils_1.getStructureByCell)(cell).units;
                                unitIds.forEach(function (unitId, index) {
                                    unitIdToRefMap.set(unitId, globalCellItems[i].ref);
                                    if (units_1 && units_1[index]) {
                                        refWithUnitIdToUnitIdMap.set("".concat(globalCellItems[i].ref, "_").concat(units_1[index].invariantId), unitId);
                                    }
                                });
                            }
                        };
                        for (i = 0, l = globalCellItems.length; i < l; i++) {
                            _loop_1(i, l);
                        }
                        Object.assign(structure.currentPropertyData, {
                            molstar_computed_valence_model: {
                                'props': {
                                    'assignCharge': 'auto',
                                    'assignH': 'auto'
                                },
                                'data': {
                                    'id': 3224,
                                    'version': 1,
                                    'value': valenceData,
                                }
                            }
                        });
                        filterMergedKeys = new Set();
                        filterItems === null || filterItems === void 0 ? void 0 : filterItems.map(function (_a) {
                            var ref = _a.ref, elementIds = _a.elementIds;
                            var cell = plugin.cells.get(ref);
                            if (cell) {
                                var structure_2 = (0, utils_1.getStructureByCell)(cell);
                                structure_2.units.forEach(function (unit) {
                                    unit.elements.filter(function (elementId) { return elementIds === null || elementIds === void 0 ? void 0 : elementIds.includes(elementId); }).forEach(function (elementId) { return filterMergedKeys.add("".concat(refWithUnitIdToUnitIdMap.get("".concat(ref, "_").concat(unit.invariantId)), "_").concat(elementId)); });
                                });
                            }
                        });
                        interactionParams = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, interactions_1.InteractionsProvider.defaultParams), { type: type, featuresList: featuresList, filterKeys: filterItems ? Array.from(filterMergedKeys.values()) : undefined });
                        if (params) {
                            interactionParams.providers.defaultValue = params;
                        }
                        return [4 /*yield*/, interactions_1.InteractionsProvider.attach({ runtime: synchronous_1.SyncRuntimeContext, assetManager: new assets_1.AssetManager() }, structure, interactionParams)
                            // 获取有相互作用力的结构
                        ];
                    case 5:
                        _c.sent();
                        _b = structure.state.propertyData.molstar_computed_interactions.data.value, contacts = _b.contacts, unitsContacts = _b.unitsContacts, unitsFeatures = _b.unitsFeatures;
                        contacts.edges.forEach(function (edge) {
                            var indexA = edge.indexA, indexB = edge.indexB, unitA = edge.unitA, unitB = edge.unitB, flag = edge.props.flag;
                            var _a = unitsFeatures.get(unitA), mA = _a.members, oA = _a.offsets;
                            var _b = unitsFeatures.get(unitB), mB = _b.members, oB = _b.offsets;
                            if (flag === common_1.InteractionFlag.Filtered)
                                return;
                            var elementIdA = structure.unitMap.get(unitA).elements[mA[oA[indexA]]];
                            var elementIdB = structure.unitMap.get(unitB).elements[mB[oB[indexB]]];
                            interactionElementIds.get(unitIdToRefMap.get(unitA)).add(elementIdA);
                            interactionElementIds.get(unitIdToRefMap.get(unitB)).add(elementIdB);
                        });
                        Array.from(unitsContacts.entries()).forEach(function (_a) {
                            var index = _a[0], contact = _a[1];
                            var _b = unitsFeatures.get(index), m = _b.members, o = _b.offsets;
                            var a = contact.a, b = contact.b;
                            for (var i = 0, l = a.length; i < l; i++) {
                                var elementIdA = structure.unitMap.get(index).elements[m[o[a[i]]]];
                                var elementIdB = structure.unitMap.get(index).elements[m[o[b[i]]]];
                                interactionElementIds.get(unitIdToRefMap.get(index)).add(elementIdA);
                                interactionElementIds.get(unitIdToRefMap.get(index)).add(elementIdB);
                            }
                        });
                        plugin.managers.cell.traverse(function (cell, repr) {
                            var _a;
                            if (repr.type === types_1.RepresentationType.IntraInteractions) {
                                existedRef = cell.ref;
                                // Repr State Cache
                                if (repr.state) {
                                    (_a = plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.remove(repr.state);
                                    repr.state.destroy();
                                }
                            }
                        });
                        representation = interactions_2.InteractionsRepresentationProvider.factory(plugin.managers.representation.ctx, interactions_2.InteractionsRepresentationProvider.getParams);
                        representation.setTheme({
                            color: plugin.managers.representation.ctx.colorThemeRegistry.create('interaction-type', {
                                structure: structure
                            }),
                            size: plugin.managers.representation.ctx.sizeThemeRegistry.create('uniform', {
                                structure: structure
                            })
                        });
                        return [4 /*yield*/, representation
                                .createOrUpdate({}, structure)
                                .run()];
                    case 6:
                        _c.sent();
                        return [2 /*return*/, { representation: representation, structure: structure, ref: existedRef, interactionElementIds: Array.from(interactionElementIds.keys()).map(function (ref) { return ({ ref: ref, elementIds: Array.from(interactionElementIds.get(ref).values()) }); }).filter(function (item) { return item.elementIds.length; }) }];
                }
            });
        });
    },
};
//# sourceMappingURL=interactions.js.map