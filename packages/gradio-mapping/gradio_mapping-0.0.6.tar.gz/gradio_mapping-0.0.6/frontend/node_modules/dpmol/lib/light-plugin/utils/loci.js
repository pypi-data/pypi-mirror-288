"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInteractionLociInfo = exports.getElementLociInfo = exports.getElementIdsByLoci = exports.getLoci = exports.transformLociToElementLoci = void 0;
var tslib_1 = require("tslib");
var structure_1 = require("../../mol-model/structure/structure/structure");
var structure_2 = require("../../mol-model/structure/structure");
var int_1 = require("../../mol-data/int");
var loci_1 = require("../../mol-model/structure/structure/element/loci");
var types_1 = require("../types");
var common_1 = require("../../mol-model-props/computed/interactions/common");
var transformLociToElementLoci = function (loci) {
    if (loci.kind === 'element-loci')
        return loci;
    if (loci.kind === 'structure-loci')
        return structure_1.Structure.toStructureElementLoci(loci.structure);
    if (loci.kind === 'shape-loci') {
        // 暂时不考虑不同structure的情况
        var sourceData = loci.shape.sourceData;
        var locis = [];
        if (sourceData.infos) {
            locis.push.apply(locis, (0, tslib_1.__spreadArray)([], sourceData.infos, true).map(function (info) { return info.loci; }));
        }
        else if (sourceData.pairs) {
            locis.push.apply(locis, sourceData.pairs[0].loci);
        }
        else if (sourceData.triples) {
            locis.push.apply(locis, sourceData.triples[0].loci);
        }
        else if (sourceData.quads) {
            locis.push.apply(locis, sourceData.quads[0].loci);
        }
        var res_1;
        locis.forEach(function (item) {
            if (!res_1) {
                res_1 = (0, exports.transformLociToElementLoci)(item);
            }
            else {
                res_1 = loci_1.Loci.union(res_1, (0, exports.transformLociToElementLoci)(item));
            }
        });
        return res_1;
    }
};
exports.transformLociToElementLoci = transformLociToElementLoci;
var getLoci = function (structure, elementIds) {
    var units = [];
    var elementIdsSet = new Set(elementIds);
    var unitIdSet = new Set();
    structure.units.forEach(function (unit) {
        if (!unitIdSet.has(unit.invariantId)) {
            unitIdSet.add(unit.invariantId);
            var indices_1 = [];
            unit.elements.forEach(function (id, index) {
                if (!elementIds || elementIdsSet.has(id)) {
                    indices_1.push(index);
                }
            });
            if (indices_1.length > 0) {
                units.push({
                    unit: unit,
                    indices: indices_1
                });
            }
        }
    });
    // const loci: StructureElement.Loci = StructureElement.Loci(structure, units)
    return structure_2.StructureElement.Loci(structure, units);
};
exports.getLoci = getLoci;
// StructureElement.Loci | Structure.Loci | Bond.Loci | EmptyLoci | Shape.Loci
// Loci.
var getElementIdsByLoci = function (loci) {
    var elements = [];
    loci.elements.forEach(function (element) {
        elements.push.apply(elements, int_1.OrderedSet.toArray(element.indices)
            .map(function (indice) { return element.unit.elements[indice]; })
            .filter(function (item) { return item !== undefined; }));
    });
    return elements;
};
exports.getElementIdsByLoci = getElementIdsByLoci;
// export const isLociIntersectElementIds = (loci: ElementLoci, elementIds: number[]) => {
//   const indices = loci.elements[0].indices as any
//   const elementSet = new Set(
//     indices.map(
//       (index: number) => loci.elements[0]?.unit.elements[index]
//     )
//   )
//   return elementIds.some((elementId) =>
//     elementSet.has(elementId)
//   )
// }
var getElementLociInfo = function (loci, granularity) {
    var stats = structure_2.StructureElement.Stats.ofLoci(loci);
    var location;
    if (stats.elementCount > 0) {
        location = stats.firstElementLoc;
    }
    else if (stats.residueCount > 0) {
        location = stats.firstResidueLoc;
    }
    else if (stats.chainCount > 0) {
        location = stats.firstChainLoc;
    }
    else if (stats.unitCount > 0) {
        location = stats.firstUnitLoc;
    }
    else if (stats.conformationCount > 0) {
        location = stats.firstConformationLoc;
    }
    else {
        location = stats.firstStructureLoc;
    }
    var emConfidence = structure_2.StructureProperties.atom.em_confidence(location);
    var bfactor = structure_2.StructureProperties.atom.B_iso_or_equiv(location);
    switch (granularity) {
        case types_1.Granularity.Atom:
            if (stats.elementCount === 1) {
                return {
                    x: structure_2.StructureProperties.atom.x(location),
                    y: structure_2.StructureProperties.atom.y(location),
                    z: structure_2.StructureProperties.atom.z(location),
                    granularity: types_1.Granularity.Atom,
                    atomName: structure_2.StructureProperties.atom.label_atom_id(location),
                    atomId: structure_2.StructureProperties.atom.id(location),
                    altId: structure_2.StructureProperties.atom.label_alt_id(location),
                    residueName: structure_2.StructureProperties.atom.label_comp_id(location),
                    residueId: structure_2.StructureProperties.residue.auth_seq_id(location),
                    insertCode: structure_2.StructureProperties.residue.pdbx_PDB_ins_code(location),
                    chainId: structure_2.StructureProperties.chain.label_asym_id(location),
                    emConfidence: emConfidence,
                    bfactor: bfactor,
                };
            }
            else {
                return {
                    granularity: types_1.Granularity.Residue,
                    altId: structure_2.StructureProperties.atom.label_alt_id(location),
                    residueName: structure_2.StructureProperties.atom.label_comp_id(location),
                    residueId: structure_2.StructureProperties.residue.auth_seq_id(location),
                    chainId: structure_2.StructureProperties.chain.label_asym_id(location),
                    insertCode: structure_2.StructureProperties.residue.pdbx_PDB_ins_code(location),
                    emConfidence: emConfidence,
                    bfactor: bfactor,
                };
            }
        case types_1.Granularity.Residue:
            return {
                granularity: types_1.Granularity.Residue,
                altId: structure_2.StructureProperties.atom.label_alt_id(location),
                residueName: structure_2.StructureProperties.atom.label_comp_id(location),
                residueId: structure_2.StructureProperties.residue.auth_seq_id(location),
                chainId: structure_2.StructureProperties.chain.label_asym_id(location),
                insertCode: structure_2.StructureProperties.residue.pdbx_PDB_ins_code(location),
                bfactor: bfactor,
            };
        case types_1.Granularity.Chain:
            return {
                granularity: types_1.Granularity.Chain,
                chainId: structure_2.StructureProperties.chain.label_asym_id(location),
            };
        case types_1.Granularity.Molecular:
            return {
                granularity: types_1.Granularity.Molecular,
            };
        default:
            return {};
    }
};
exports.getElementLociInfo = getElementLociInfo;
var getInteractionLociInfo = function (interactionLoci) {
    var _a = interactionLoci.elements[0], unitA = _a.unitA, indexA = _a.indexA, unitB = _a.unitB, indexB = _a.indexB;
    var _b = interactionLoci.data.interactions, contacts = _b.contacts, unitsContacts = _b.unitsContacts, unitsFeatures = _b.unitsFeatures;
    var _c = unitsFeatures.get(unitA.id), mA = _c.members, oA = _c.offsets;
    var _d = unitsFeatures.get(unitB.id), mB = _d.members, oB = _d.offsets;
    var interactionType = -1;
    if (unitA === unitB) {
        var contacts_1 = unitsContacts.get(unitA.id);
        var idx = contacts_1.getDirectedEdgeIndex(indexA, indexB);
        interactionType = contacts_1.edgeProps.type[idx];
    }
    else {
        var idx = contacts.getEdgeIndex(indexA, unitA.id, indexB, unitB.id);
        interactionType = contacts.edges[idx].props.type;
    }
    var bond = structure_2.Bond.Location(interactionLoci.data.structure, unitA, mA[oA[indexA]], interactionLoci.data.structure, unitB, mB[oB[indexB]]);
    var loci1 = structure_2.StructureElement.Loci(bond.aStructure, [
        { unit: bond.aUnit, indices: int_1.OrderedSet.ofSingleton(bond.aIndex) },
    ]);
    var loci2 = structure_2.StructureElement.Loci(bond.bStructure, [
        { unit: bond.bUnit, indices: int_1.OrderedSet.ofSingleton(bond.bIndex) },
    ]);
    var stat1 = structure_2.StructureElement.Stats.ofLoci(loci1);
    var stat2 = structure_2.StructureElement.Stats.ofLoci(loci2);
    var locationA = stat1.firstElementLoc;
    var locationB = stat2.firstElementLoc;
    var infoA = {
        chainId: structure_2.StructureProperties.chain.label_asym_id(locationA),
        residueName: structure_2.StructureProperties.atom.label_comp_id(locationA),
        residueId: structure_2.StructureProperties.residue.auth_seq_id(locationA),
        atomName: structure_2.StructureProperties.atom.label_atom_id(locationA),
    };
    var infoB = {
        chainId: structure_2.StructureProperties.chain.label_asym_id(locationB),
        residueName: structure_2.StructureProperties.atom.label_comp_id(locationB),
        residueId: structure_2.StructureProperties.residue.auth_seq_id(locationB),
        atomName: structure_2.StructureProperties.atom.label_atom_id(locationB),
    };
    return {
        infoA: infoA,
        infoB: infoB,
        interactionType: (0, common_1.interactionTypeLabel)(interactionType)
    };
};
exports.getInteractionLociInfo = getInteractionLociInfo;
//# sourceMappingURL=loci.js.map