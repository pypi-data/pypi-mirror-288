"use strict";
/**
 * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRenderer = void 0;
var tslib_1 = require("tslib");
var gl_shim_1 = require("./gl.shim");
var camera_1 = require("../../mol-canvas3d/camera");
var linear_algebra_1 = require("../../mol-math/linear-algebra");
var renderer_1 = require("../renderer");
var context_1 = require("../webgl/context");
var scene_1 = require("../scene");
var points_spec_1 = require("./points.spec");
function createRenderer(gl) {
    var ctx = (0, context_1.createContext)(gl);
    var camera = new camera_1.Camera({
        position: linear_algebra_1.Vec3.create(0, 0, 50)
    });
    var renderer = renderer_1.Renderer.create(ctx);
    return { ctx: ctx, camera: camera, renderer: renderer };
}
exports.createRenderer = createRenderer;
describe('renderer', function () {
    it('basic', function () {
        var _a = [32, 32], width = _a[0], height = _a[1];
        var gl = (0, gl_shim_1.createGl)(width, height, { preserveDrawingBuffer: true });
        var _b = createRenderer(gl), ctx = _b.ctx, renderer = _b.renderer;
        expect(ctx.gl.drawingBufferWidth).toBe(32);
        expect(ctx.gl.drawingBufferHeight).toBe(32);
        expect(ctx.stats.resourceCounts.attribute).toBe(0);
        expect(ctx.stats.resourceCounts.texture).toBe(0);
        expect(ctx.stats.resourceCounts.vertexArray).toBe(0);
        expect(ctx.stats.resourceCounts.program).toBe(0);
        expect(ctx.stats.resourceCounts.shader).toBe(0);
        renderer.setViewport(0, 0, 64, 48);
        expect(ctx.gl.getParameter(ctx.gl.VIEWPORT)[2]).toBe(64);
        expect(ctx.gl.getParameter(ctx.gl.VIEWPORT)[3]).toBe(48);
    });
    it('points', function () { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
        var _a, width, height, gl, ctx, scene, points;
        return (0, tslib_1.__generator)(this, function (_b) {
            _a = [32, 32], width = _a[0], height = _a[1];
            gl = (0, gl_shim_1.createGl)(width, height, { preserveDrawingBuffer: true });
            ctx = createRenderer(gl).ctx;
            scene = scene_1.Scene.create(ctx);
            points = (0, points_spec_1.createPoints)();
            scene.add(points);
            scene.commit();
            expect(ctx.stats.resourceCounts.attribute).toBe(ctx.isWebGL2 ? 4 : 5);
            expect(ctx.stats.resourceCounts.texture).toBe(8);
            expect(ctx.stats.resourceCounts.vertexArray).toBe(ctx.extensions.vertexArrayObject ? 5 : 0);
            expect(ctx.stats.resourceCounts.program).toBe(5);
            expect(ctx.stats.resourceCounts.shader).toBe(10);
            scene.remove(points);
            scene.commit();
            expect(ctx.stats.resourceCounts.attribute).toBe(0);
            expect(ctx.stats.resourceCounts.texture).toBe(0);
            expect(ctx.stats.resourceCounts.vertexArray).toBe(0);
            expect(ctx.stats.resourceCounts.program).toBe(5);
            expect(ctx.stats.resourceCounts.shader).toBe(10);
            ctx.resources.destroy();
            expect(ctx.stats.resourceCounts.program).toBe(0);
            expect(ctx.stats.resourceCounts.shader).toBe(0);
            return [2 /*return*/];
        });
    }); });
});
//# sourceMappingURL=renderer.spec.js.map