"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lightPlugin = exports.LightPlugin = exports.DefaultCanvas3DParams = void 0;
var tslib_1 = require("tslib");
var canvas3d_1 = require("../mol-canvas3d/canvas3d");
var util_1 = require("../mol-canvas3d/util");
var camera_1 = require("./managers/camera");
var index_1 = require("./managers/representation/index");
var types_1 = require("./types");
var cell_1 = require("./managers/cell");
var trajectory_1 = require("./managers/trajectory");
var snapshot_1 = require("./managers/snapshot");
var param_definition_1 = require("../mol-util/param-definition");
// 这个地方有点奇怪，引用路径不能简写成./managers/selection
var index_2 = require("./managers/selection/index");
var events_1 = require("./managers/events");
var editor_1 = require("./managers/editor");
var highlight_1 = require("./managers/highlight");
var utils_1 = require("./utils");
var color_1 = require("../mol-util/color");
var writer_1 = require("./utils/writer");
var math_1 = require("./utils/math");
var viewport_screenshot_1 = require("./managers/viewport-screenshot");
exports.DefaultCanvas3DParams = param_definition_1.ParamDefinition.getDefaultValues(canvas3d_1.Canvas3DParams);
var LightPlugin = /** @class */ (function () {
    function LightPlugin() {
        this.cells = new Map();
        this.managers = {
            camera: new camera_1.CameraManager(this),
            representation: new index_1.RepresentationManager(this),
            cell: new cell_1.CellManager(this),
            trajectory: new trajectory_1.TrajectoryManager(this),
            snapshot: new snapshot_1.SnapshotManager(this),
            selection: new index_2.SelectionManager(this),
            events: new events_1.EventsManager(this),
            highlight: new highlight_1.HighlightManager(this),
            editor: new editor_1.EditorManager(this),
            screenshot: new viewport_screenshot_1.ViewportScreenshotHelper(this),
        };
    }
    LightPlugin.prototype.createCanvas = function (root, props) {
        var canvas = document.createElement('canvas');
        root.appendChild(canvas);
        (0, util_1.resizeCanvas)(canvas, root);
        this.layout = {
            root: root,
            canvas: canvas
        };
        this.canvas3d = canvas3d_1.Canvas3D.create(canvas3d_1.Canvas3DContext.fromCanvas(canvas), param_definition_1.ParamDefinition.merge(canvas3d_1.Canvas3DParams, param_definition_1.ParamDefinition.getDefaultValues(canvas3d_1.Canvas3DParams), (0, tslib_1.__assign)({ camera: {
                mode: 'orthographic',
                helper: {
                    axes: { name: 'on', params: {} }
                },
                stereo: {
                    name: 'off',
                    params: {}
                },
                fov: 90,
                manualReset: false
            }, cameraResetDurationMs: 0, cameraFog: {
                name: 'on',
                params: {
                    intensity: 50
                }
            }, renderer: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, exports.DefaultCanvas3DParams.renderer), { backgroundColor: (0, color_1.Color)(0xf2f5fa) }), postprocessing: {
                occlusion: {
                    name: 'off',
                    params: {}
                },
                outline: {
                    name: 'off',
                    params: {}
                },
                antialiasing: {
                    name: 'fxaa',
                    params: {
                        edgeThresholdMin: 0.0312,
                        edgeThresholdMax: 0.063,
                        iterations: 12,
                        subpixelQuality: 0.3
                    }
                },
                background: { variant: { name: 'off', params: {} } },
                shadow: { name: 'off', params: {} }
            }, helper: {
                handle: {
                    handle: {
                        name: 'off'
                    }
                }
            }, transparentBackground: false }, props)));
        this.canvas3d.animate();
        this.managers.representation.createContext();
        this.managers.events.subscribe();
        this.managers.editor.start();
    };
    LightPlugin.prototype.focus = function (items, isRecurve) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var dependencies, set, dependenciesSet, hideRefs;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dependencies = [];
                        set = new Set(items.map(function (item) {
                            var _b, _c, _d;
                            dependencies.push.apply(dependencies, ((_d = (_c = (_b = _this.cells.get(item.ref)) === null || _b === void 0 ? void 0 : _b.dependency) === null || _c === void 0 ? void 0 : _c.by) !== null && _d !== void 0 ? _d : []));
                            return item.ref;
                        }));
                        dependenciesSet = new Set(dependencies);
                        hideRefs = Array.from(this.cells)
                            .map(function (_b) {
                            var ref = _b[0];
                            return ({ ref: ref });
                        })
                            .filter(function (item) { return !set.has(item.ref) && !dependenciesSet.has(item.ref); });
                        this.hide(hideRefs, true);
                        return [4 /*yield*/, this.show(items, isRecurve)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, hideRefs];
                }
            });
        });
    };
    LightPlugin.prototype.show = function (items, isRecurve) {
        var _b;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var _loop_1, this_1, _i, items_1, item;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _loop_1 = function (item) {
                            var cell, _d, _e, _f, key, r, removeDependencyBy_1, dependencyBy;
                            return (0, tslib_1.__generator)(this, function (_g) {
                                switch (_g.label) {
                                    case 0:
                                        this_1.managers.cell.idleCellSet.delete(item.ref);
                                        cell = this_1.managers.cell.get(item.ref);
                                        return [4 /*yield*/, this_1.managers.cell.getStructure(item.ref)];
                                    case 1:
                                        _g.sent();
                                        if (!cell || (!item.representationType && Array.from(cell.representations.values()).some(function (item) { return !item.isHidden; })))
                                            return [2 /*return*/, "continue"];
                                        _d = 0, _e = Array.from(cell.representations);
                                        _g.label = 2;
                                    case 2:
                                        if (!(_d < _e.length)) return [3 /*break*/, 6];
                                        _f = _e[_d], key = _f[0], r = _f[1];
                                        if (!r.state) return [3 /*break*/, 3];
                                        if (r.isHidden &&
                                            (!item.representationType || item.representationType === key)) {
                                            (_b = this_1.canvas3d) === null || _b === void 0 ? void 0 : _b.add(r.state);
                                            cell.representations.set(key, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, r), { isHidden: false }));
                                        }
                                        return [3 /*break*/, 5];
                                    case 3:
                                        if (!r.cache) return [3 /*break*/, 5];
                                        // Repr State Cache
                                        return [4 /*yield*/, exports.lightPlugin.managers.cell.recoveryReprCache(cell, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, r.cache), { isHidden: false }))];
                                    case 4:
                                        // Repr State Cache
                                        _g.sent();
                                        _g.label = 5;
                                    case 5:
                                        _d++;
                                        return [3 /*break*/, 2];
                                    case 6:
                                        if (cell.dependency.by.length) {
                                            removeDependencyBy_1 = [];
                                            dependencyBy = cell.dependency.by.filter(function (ref) {
                                                var isExist = _this.cells.has(ref);
                                                if (!isExist) {
                                                    removeDependencyBy_1.push(ref);
                                                }
                                                else {
                                                    // cell.dependency.by 中的entry只有当它的dependency.on全部处于show状态时才应该show该entry
                                                    var dependencyCell = _this.cells.get(ref);
                                                    if (dependencyCell.dependency.on.some(function (dependOn) {
                                                        var _b, _c;
                                                        return Array.from((_c = (_b = _this.cells.get(dependOn.ref)) === null || _b === void 0 ? void 0 : _b.representations.values()) !== null && _c !== void 0 ? _c : []).filter(function (item) { return item.isHidden !== true; }).length === 0;
                                                    })) {
                                                        return false;
                                                    }
                                                }
                                                return isExist;
                                            });
                                            this_1.show(dependencyBy.map(function (ref) { return ({ ref: ref }); }), true);
                                            if (removeDependencyBy_1.length) {
                                                this_1.managers.cell.update(item.ref, {
                                                    model: {},
                                                    dependency: { by: dependencyBy }
                                                });
                                            }
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _i = 0, items_1 = items;
                        _c.label = 1;
                    case 1:
                        if (!(_i < items_1.length)) return [3 /*break*/, 4];
                        item = items_1[_i];
                        return [5 /*yield**/, _loop_1(item)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        if (!isRecurve) {
                            this.managers.cell.traverse(function (cell, repr) {
                                if (repr.type === types_1.RepresentationType.IntraInteractions) {
                                    _this.managers.representation.showGlobalInteraction(undefined, 'lightPlugin.show');
                                }
                            });
                        }
                        this.managers.snapshot.event.changed.next({ from: 'show' });
                        return [2 /*return*/];
                }
            });
        });
    };
    LightPlugin.prototype.hide = function (items, isRecurve) {
        var _this = this;
        items.forEach(function (item) {
            // const cell = this.managers.cell.get(item.ref)
            _this.managers.cell.idleCellSet.add(item.ref);
            var cell = _this.cells.get(item.ref); // XXX 此处允许存在cell不存在的情况，比如从snapshot里读取，interactions被过滤的case
            if (!cell)
                return;
            if (_this.managers.selection.shape.selection.has(item.ref)) {
                _this.managers.selection.shape.remove({ item: item });
            }
            if (_this.managers.selection.structure.selection.has(item.ref)) {
                _this.managers.selection.structure.remove({ item: { ref: item.ref, elementIds: (0, utils_1.getElementsFromStructure)((0, utils_1.getStructureByCell)(cell)) } });
            }
            cell.representations.forEach(function (r, key) {
                var _b;
                // Repr State Cache
                if (!r.isHidden &&
                    (!item.representationType || item.representationType === key)) {
                    if (r.state) {
                        (_b = _this.canvas3d) === null || _b === void 0 ? void 0 : _b.remove(r.state);
                    }
                    cell.representations.set(key, (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, r), { isHidden: true }), (r.cache ? {
                        cache: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, r.cache), { isHidden: true })
                    } : {})));
                }
            });
            if (cell.dependency.by.length) {
                var removeDependencyBy_2 = [];
                var dependencyBy = cell.dependency.by.filter(function (ref) {
                    var isExist = _this.cells.has(ref);
                    if (!isExist) {
                        removeDependencyBy_2.push(ref);
                    }
                    var dependencyCell = _this.cells.get(ref);
                    if (dependencyCell === null || dependencyCell === void 0 ? void 0 : dependencyCell.representations.has(types_1.RepresentationType.IntraInteractions)) {
                        return false;
                    }
                    return isExist;
                });
                _this.hide(dependencyBy.map(function (ref) { return ({ ref: ref }); }), true);
                if (removeDependencyBy_2.length) {
                    _this.managers.cell.update(item.ref, {
                        model: {},
                        dependency: { by: dependencyBy }
                    });
                }
            }
        });
        if (!isRecurve) {
            this.managers.cell.traverse(function (cell, repr) {
                if (repr.type === types_1.RepresentationType.IntraInteractions) {
                    _this.managers.representation.showGlobalInteraction(undefined, 'lightPlugin.show');
                }
            });
        }
        this.managers.snapshot.event.changed.next({ from: 'hide' });
    };
    LightPlugin.prototype.toggle = function (params) {
        var _this = this;
        var types = params.types, forceAction = params.forceAction, refs = params.refs;
        var cells = Array.from(this.cells).filter(function (_b) {
            var ref = _b[0], cell = _b[1];
            var isMatch = (!refs || refs.includes(ref)) && types.some(function (type) { return cell.representations.get(type); });
            if (!isMatch)
                return false;
            if (!cell.dependency.on.every(function (item) {
                var dependencyCell = _this.cells.get(item.ref);
                if (!dependencyCell)
                    return false;
                if (Array.from(dependencyCell.representations.values()).every(function (repr) { return repr.isHidden === true; })) {
                    return false;
                }
                return true;
            })) {
                return false;
            }
            return true;
        });
        if (!cells.length)
            return;
        var action = (forceAction !== null && forceAction !== void 0 ? forceAction : cells.some(function (_b) {
            var ref = _b[0], cell = _b[1];
            return types.some(function (type) { var _b; return (_b = cell.representations.get(type)) === null || _b === void 0 ? void 0 : _b.isHidden; });
        }))
            ? 'show'
            : 'hide';
        var items = (0, utils_1.flattenDeep)(cells.map(function (_b) {
            var ref = _b[0], cell = _b[1];
            return Array.from(cell.representations)
                .filter(function (_b) {
                var type = _b[0];
                return types.includes(type);
            })
                .map(function (_b) {
                var type = _b[0];
                return ({
                    representationType: type,
                    ref: ref
                });
            });
        }));
        this[action](items);
    };
    LightPlugin.prototype.refresh = function (params) {
        var _b, _c, _d, _e;
        if (!this.canvas3d || !((_c = (_b = this.layout) === null || _b === void 0 ? void 0 : _b.root.children[0]) === null || _c === void 0 ? void 0 : _c.clientWidth))
            return;
        var cameraSnapshot;
        if (params === null || params === void 0 ? void 0 : params.fixCamera) {
            cameraSnapshot = this.canvas3d.camera.getSnapshot();
        }
        (0, util_1.resizeCanvas)(this.layout.canvas, this.layout.root);
        (_d = this.canvas3d) === null || _d === void 0 ? void 0 : _d.handleResize();
        if (params === null || params === void 0 ? void 0 : params.fixCamera) {
            (_e = this.canvas3d) === null || _e === void 0 ? void 0 : _e.camera.setState(cameraSnapshot);
        }
        else {
            this.managers.camera.focus();
        }
    };
    LightPlugin.prototype.clear = function () {
        var _b;
        this.managers.selection.clear();
        this.managers.highlight.clear();
        this.managers.editor.changeEditorMode(editor_1.EditorMode.None);
        this.cells = new Map();
        (_b = this.canvas3d) === null || _b === void 0 ? void 0 : _b.clear();
    };
    LightPlugin.prototype.dispose = function () {
        var _b;
        (_b = this.canvas3d) === null || _b === void 0 ? void 0 : _b.dispose();
        this.layout = undefined;
        this.canvas3d = undefined;
        this.cells = new Map();
        this.managers = {
            camera: new camera_1.CameraManager(this),
            representation: new index_1.RepresentationManager(this),
            cell: new cell_1.CellManager(this),
            trajectory: new trajectory_1.TrajectoryManager(this),
            snapshot: new snapshot_1.SnapshotManager(this),
            selection: new index_2.SelectionManager(this),
            events: new events_1.EventsManager(this),
            highlight: new highlight_1.HighlightManager(this),
            editor: new editor_1.EditorManager(this),
            screenshot: new viewport_screenshot_1.ViewportScreenshotHelper(this),
        };
    };
    var _a;
    _a = LightPlugin;
    LightPlugin.Utils = {
        sliceCellItems: function (items, type) {
            return (0, utils_1.sliceCellItemsByGranularity)(exports.lightPlugin, items, type);
        },
        queryCellItems: function (items) {
            return (0, utils_1.queryCellItemsByHierarchyType)(exports.lightPlugin, items);
        },
        exportToPdb: function (item) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
            var structure;
            return (0, tslib_1.__generator)(_a, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, exports.lightPlugin.managers.cell.getStructure(item.ref)];
                    case 1:
                        structure = _b.sent();
                        return [2 /*return*/, (0, writer_1.parseToPDB)(structure, item.elementIds, false)];
                }
            });
        }); },
        getBox: function (item) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
            var structure;
            var _b;
            return (0, tslib_1.__generator)(_a, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, exports.lightPlugin.managers.cell.getStructure(item.ref)];
                    case 1:
                        structure = _c.sent();
                        return [2 /*return*/, (0, math_1.getBox)(structure, (_b = item.elementIds) !== null && _b !== void 0 ? _b : [])];
                }
            });
        }); },
        splitMolecularContent: function (content, format) {
            return (0, writer_1.splitMolecularContent)(content, format);
        },
        checkMolecularContentVerify: function (content, format) {
            return (0, writer_1.checkFileFormat)(content, format);
        },
        getMergedContent: function (items) {
            return (0, utils_1.getMergedContent)(exports.lightPlugin, items);
        },
        traverseAtoms: function (ref, callback) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
            var structure;
            return (0, tslib_1.__generator)(_a, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, exports.lightPlugin.managers.cell.getStructure(ref)];
                    case 1:
                        structure = _b.sent();
                        if (!structure)
                            return [2 /*return*/];
                        (0, utils_1.traverseAtoms)(structure, callback);
                        return [2 /*return*/];
                }
            });
        }); }
    };
    return LightPlugin;
}());
exports.LightPlugin = LightPlugin;
exports.lightPlugin = new LightPlugin();
(0, tslib_1.__exportStar)(require("./types"), exports);
//# sourceMappingURL=index.js.map