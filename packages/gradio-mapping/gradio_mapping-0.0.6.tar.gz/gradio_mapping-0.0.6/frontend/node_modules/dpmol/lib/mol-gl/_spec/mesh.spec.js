"use strict";
/**
 * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMesh = void 0;
var tslib_1 = require("tslib");
var render_object_1 = require("../render-object");
var scene_1 = require("../scene");
var gl_1 = require("./gl");
var debug_1 = require("../../mol-util/debug");
var names_1 = require("../../mol-util/color/names");
var param_definition_1 = require("../../mol-util/param-definition");
var mesh_1 = require("../../mol-geo/geometry/mesh/mesh");
function createMesh() {
    var mesh = mesh_1.Mesh.createEmpty();
    var props = param_definition_1.ParamDefinition.getDefaultValues(mesh_1.Mesh.Params);
    var values = mesh_1.Mesh.Utils.createValuesSimple(mesh, props, names_1.ColorNames.orange, 1);
    var state = mesh_1.Mesh.Utils.createRenderableState(props);
    return (0, render_object_1.createRenderObject)('mesh', values, state, -1);
}
exports.createMesh = createMesh;
describe('mesh', function () {
    var ctx = (0, gl_1.tryGetGLContext)(32, 32);
    (ctx ? it : it.skip)('basic', function () { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
        var ctx, scene, mesh;
        return (0, tslib_1.__generator)(this, function (_a) {
            ctx = (0, gl_1.getGLContext)(32, 32);
            scene = scene_1.Scene.create(ctx);
            mesh = createMesh();
            scene.add(mesh);
            (0, debug_1.setDebugMode)(true);
            expect(function () { return scene.commit(); }).not.toThrow();
            (0, debug_1.setDebugMode)(false);
            ctx.destroy();
            return [2 /*return*/];
        });
    }); });
});
//# sourceMappingURL=mesh.spec.js.map