import { Observer } from 'rxjs';
import { LightPlugin } from '../..';
import { Canvas3D } from '../../../mol-canvas3d/canvas3d';
import { UUID } from '../../../mol-util';
import { Vec3 } from '../../../mol-math/linear-algebra';
import { AtomData } from '../../utils/writer';
interface DrawState {
    elementType: string;
    drawClickObserver: Observer<Canvas3D.ClickEvent> | undefined;
    position?: Vec3;
    isDelete: boolean;
}
export declare class DrawEditor {
    plugin: LightPlugin;
    private ev;
    state: DrawState;
    readonly event: {
        update: import("rxjs").Subject<{
            isUpdateHierarchy?: boolean | undefined;
            cRef?: string | undefined;
            isEmpty?: boolean | undefined;
            hasMultiRef?: boolean | undefined;
            newAtom?: AtomData | undefined;
        }>;
    };
    setElementType(elementType: string): void;
    setPosition(position?: Vec3): void;
    setIsDelete(isDelete: boolean): void;
    start(): void;
    end(): void;
    addAtomByRef(ref: UUID): void;
    constructor(plugin: LightPlugin);
}
export {};
