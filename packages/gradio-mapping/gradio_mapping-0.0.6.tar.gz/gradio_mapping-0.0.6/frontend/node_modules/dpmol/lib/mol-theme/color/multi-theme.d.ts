/**
 * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { StructureElement } from '../../mol-model/structure';
import { ColorTheme } from '../color';
import { ParamDefinition as PD } from '../../mol-util/param-definition';
import { ThemeDataContext } from '../theme';
import { Bundle } from '../../mol-model/structure/structure/element/bundle';
export declare const MultiThemeColorThemeParams: {
    palette: PD.Mapped<PD.NamedParams<PD.Normalize<{
        maxCount: number;
        hue: [number, number];
        chroma: [number, number];
        luminance: [number, number];
        clusteringStepCount: number;
        minSampleCount: number;
    }>, "generate"> | PD.NamedParams<PD.Normalize<{
        list: {
            kind: "set" | "interpolate";
            colors: import("../../mol-util/color/color").ColorListEntry[];
        };
    }>, "colors">>;
    themes: PD.Value<[] | [{
        colorTheme: ColorTheme<any>;
        bundle: Bundle;
    }]>;
};
export declare type MultiThemeColorThemeParams = typeof MultiThemeColorThemeParams;
export declare function getMultiThemeColorThemeParams(ctx: ThemeDataContext): {
    palette: PD.Mapped<PD.NamedParams<PD.Normalize<{
        maxCount: number;
        hue: [number, number];
        chroma: [number, number];
        luminance: [number, number];
        clusteringStepCount: number;
        minSampleCount: number;
    }>, "generate"> | PD.NamedParams<PD.Normalize<{
        list: {
            kind: "set" | "interpolate";
            colors: import("../../mol-util/color/color").ColorListEntry[];
        };
    }>, "colors">>;
    themes: PD.Value<[] | [{
        colorTheme: ColorTheme<any>;
        bundle: StructureElement.Bundle;
    }]>;
};
export declare function MultiThemeColorTheme(ctx: ThemeDataContext, props: PD.Values<MultiThemeColorThemeParams>): ColorTheme<MultiThemeColorThemeParams>;
export declare const MultiThemeColorThemeProvider: ColorTheme.Provider<MultiThemeColorThemeParams, 'multi-theme'>;
