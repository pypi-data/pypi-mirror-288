"use strict";
/**
 * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEmptyTransparency = exports.createTransparency = exports.clearTransparency = exports.getTransparencyAverage = exports.applyTransparencyValue = void 0;
var mol_util_1 = require("../../mol-util");
var linear_algebra_1 = require("../../mol-math/linear-algebra");
var util_1 = require("../../mol-gl/renderable/util");
var texture_1 = require("../../mol-gl/webgl/texture");
function applyTransparencyValue(array, start, end, value) {
    for (var i = start; i < end; ++i) {
        array[i] = value * 255;
    }
    return true;
}
exports.applyTransparencyValue = applyTransparencyValue;
function getTransparencyAverage(array, count) {
    var sum = 0;
    for (var i = 0; i < count; ++i) {
        sum += array[i];
    }
    return sum / (255 * count);
}
exports.getTransparencyAverage = getTransparencyAverage;
function clearTransparency(array, start, end) {
    array.fill(0, start, end);
}
exports.clearTransparency = clearTransparency;
function createTransparency(count, transparencyData) {
    var transparency = (0, util_1.createTextureImage)(Math.max(1, count), 1, Uint8Array, transparencyData && transparencyData.tTransparency.ref.value.array);
    if (transparencyData) {
        mol_util_1.ValueCell.update(transparencyData.tTransparency, transparency);
        mol_util_1.ValueCell.update(transparencyData.uTransparencyTexDim, linear_algebra_1.Vec2.create(transparency.width, transparency.height));
        mol_util_1.ValueCell.updateIfChanged(transparencyData.dTransparency, count > 0);
        mol_util_1.ValueCell.updateIfChanged(transparencyData.transparencyAverage, getTransparencyAverage(transparency.array, count));
        return transparencyData;
    }
    else {
        return {
            tTransparency: mol_util_1.ValueCell.create(transparency),
            uTransparencyTexDim: mol_util_1.ValueCell.create(linear_algebra_1.Vec2.create(transparency.width, transparency.height)),
            dTransparency: mol_util_1.ValueCell.create(count > 0),
            transparencyAverage: mol_util_1.ValueCell.create(0),
            tTransparencyGrid: mol_util_1.ValueCell.create((0, texture_1.createNullTexture)()),
            uTransparencyGridDim: mol_util_1.ValueCell.create(linear_algebra_1.Vec3.create(1, 1, 1)),
            uTransparencyGridTransform: mol_util_1.ValueCell.create(linear_algebra_1.Vec4.create(0, 0, 0, 1)),
            dTransparencyType: mol_util_1.ValueCell.create('groupInstance')
        };
    }
}
exports.createTransparency = createTransparency;
var emptyTransparencyTexture = {
    array: new Uint8Array(1),
    width: 1,
    height: 1
};
function createEmptyTransparency(transparencyData) {
    if (transparencyData) {
        mol_util_1.ValueCell.update(transparencyData.tTransparency, emptyTransparencyTexture);
        mol_util_1.ValueCell.update(transparencyData.uTransparencyTexDim, linear_algebra_1.Vec2.create(1, 1));
        return transparencyData;
    }
    else {
        return {
            tTransparency: mol_util_1.ValueCell.create(emptyTransparencyTexture),
            uTransparencyTexDim: mol_util_1.ValueCell.create(linear_algebra_1.Vec2.create(1, 1)),
            dTransparency: mol_util_1.ValueCell.create(false),
            transparencyAverage: mol_util_1.ValueCell.create(0),
            tTransparencyGrid: mol_util_1.ValueCell.create((0, texture_1.createNullTexture)()),
            uTransparencyGridDim: mol_util_1.ValueCell.create(linear_algebra_1.Vec3.create(1, 1, 1)),
            uTransparencyGridTransform: mol_util_1.ValueCell.create(linear_algebra_1.Vec4.create(0, 0, 0, 1)),
            dTransparencyType: mol_util_1.ValueCell.create('groupInstance')
        };
    }
}
exports.createEmptyTransparency = createEmptyTransparency;
//# sourceMappingURL=transparency-data.js.map