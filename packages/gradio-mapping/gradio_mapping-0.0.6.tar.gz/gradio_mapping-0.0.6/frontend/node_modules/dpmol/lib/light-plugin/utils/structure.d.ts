import { Model, Structure, StructureQuery } from '../../mol-model/structure';
import { Cell, CellItem, Format, Granularity, HydrogenVariant } from '../types';
import { LightPlugin } from '../index';
import { Representation } from '../../mol-repr/representation';
import { AtomHierarchy } from './hierarchy';
import { AtomData, BondData } from './writer';
import { Expression } from '../../mol-script/language/expression';
import { UUID } from '../../mol-util';
export declare const createEmptyStructure: () => Structure;
export declare const removeStructureByElementIds: (structure: Structure, elementIds: number[]) => Structure;
export declare const getStructureFromRepresentation: (representation: Representation<any>) => Structure;
export declare const getElementIdsFromRepresentation: (representation: Representation<any>) => number[];
export declare const getStructureByElementIds: (structure: Structure, elementIds: number[], copyWhenIdsIsEmpty?: boolean | undefined, updateModelId?: string | boolean | undefined) => Structure;
export declare const copyStructure: (structure: Structure) => Structure;
export declare const getMergedStructure: (items: CellItem[], plugin: LightPlugin) => {
    unitsMap: Map<any, any>;
    structure: Structure;
};
export declare const getProteinAndOthersElementIdByStructure: (structure: Structure) => {
    polymer: number[];
    other: number[];
};
export declare const getTextFromStructure: (structure: Structure, format: Format) => string | undefined;
export declare const generateStructureByEditFuncAndStructure: (structure: Structure, editMolFunc?: ((atomList: AtomData[], bondList: BondData[]) => {
    editedAtomList: AtomData[];
    editedBondList: BondData[];
    affectedAtomIds?: number[];
}) | undefined, editPDBFunc?: ((atomList: AtomData[], bondList: BondData[]) => {
    editedAtomList: AtomData[];
    editedBondList: BondData[];
    affectedAtomIds?: number[];
}) | undefined, forceKind?: string | undefined) => Promise<Structure[]>;
export declare const getStructureQuery: (structure: Structure, expression: Expression) => StructureQuery;
export declare const getStructureByStructureQuery: (structureQuery: StructureQuery) => any;
export declare const getElementsFromStructure: (structure: Structure) => number[];
export declare const getAtomHierarchyByUnit: (unit: any, elementId: number) => AtomHierarchy;
export declare const getAtomHierarchyByStructure: (structure: Structure, elementId: number, unitId?: number | undefined) => AtomHierarchy;
export declare const traverseAtoms: (structure: any, callback: (atomHierarchy: AtomHierarchy) => void) => void;
export declare const sliceCellItemsByGranularity: (plugin: LightPlugin, items: CellItem[], type: Granularity) => {
    ref: UUID;
    elementIds: number[];
    props: Partial<AtomHierarchy>;
}[];
export declare const queryCellItemsByHierarchyType: (plugin: LightPlugin, cellItems?: CellItem[] | undefined) => {
    [key: string]: {
        [key: string]: CellItem[];
    };
};
export declare const getModelByStructure: (structure: Structure) => Model;
export declare const getStructureUniqueId: (structure: Structure) => string;
export declare const getStructureByCell: (cell: Cell) => any;
export declare const getHydrogenType: (structure: Structure, element: number) => HydrogenVariant.NotHydrogen | HydrogenVariant.NonPolar | HydrogenVariant.Polar;
export declare const getMergedContent: (plugin: LightPlugin, items: CellItem[]) => Promise<{
    format: string;
    type: import("./writer").MIME;
    content: string;
}>;
export declare const getGlobalCellItems: (plugin: LightPlugin) => CellItem[];
export declare const getWholeResiduesCellItem: (plugin: LightPlugin, items: CellItem[]) => CellItem[];
export declare const isNonPolarHydrogen: (structure: Structure, elementId: number) => boolean;
export declare const compressElementIds: (elementIds?: number[] | undefined) => number[] | undefined;
export declare const uncompressElementIds: (elementIds: number[]) => number[];
