import { Vec3 } from '../../../mol-math/linear-algebra';
import { ThemeRegistryContext } from '../../../mol-theme/theme';
import { Color } from '../../../mol-util/color';
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { RepresentationContext, RepresentationParamsGetter } from '../../representation';
import { StructureRepresentation } from '../../structure/representation';
export interface RotateArrowData {
    center: Vec3;
    vec: Vec3;
    color: Color;
    alpha: number;
}
export declare const RotateArrowParams: {
    visuals: PD.MultiSelect<"rotate-arrow-cylinder" | "rotate-arrow-arrowhead">;
    center: PD.Vec3;
    vec: PD.Vec3;
    color: PD.Color;
    alpha: PD.Numeric;
    sizeFactor: PD.Numeric;
    lineSizeAttenuation: PD.BooleanParam;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type RotateArrowParams = typeof RotateArrowParams;
export declare type RotateArrowProps = PD.Values<RotateArrowParams>;
export declare const RotateArrowCylinderParams: {
    color: PD.Color;
    sizeFactor: PD.Numeric;
    center: PD.Vec3;
    vec: PD.Vec3;
    alpha: PD.Numeric;
    sizeAspectRatio: PD.Numeric;
    doubleSided: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    bumpFrequency: PD.Numeric;
    bumpAmplitude: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type RotateArrowCylinderParams = typeof RotateArrowCylinderParams;
export declare type RotateArrowCylinderProps = PD.Values<RotateArrowCylinderParams>;
export declare const RotateArrowArrowHeadParams: {
    color: PD.Color;
    center: PD.Vec3;
    vec: PD.Vec3;
    alpha: PD.Numeric;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    bumpFrequency: PD.Numeric;
    bumpAmplitude: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type RotateArrowArrowHeadParams = typeof RotateArrowArrowHeadParams;
export declare type RotateArrowArrowHeadProps = PD.Values<RotateArrowArrowHeadParams>;
export declare function getRotateArrowParams(ctx: ThemeRegistryContext): {
    visuals: PD.MultiSelect<"rotate-arrow-cylinder" | "rotate-arrow-arrowhead">;
    center: PD.Vec3;
    vec: PD.Vec3;
    color: PD.Color;
    alpha: PD.Numeric;
    sizeFactor: PD.Numeric;
    lineSizeAttenuation: PD.BooleanParam;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type RotateArrowRepresentation = StructureRepresentation<RotateArrowProps>;
export declare function RotateArrowRepresentation(ctx: RepresentationContext, getParams: RepresentationParamsGetter<RotateArrowData, RotateArrowParams>): RotateArrowRepresentation;
