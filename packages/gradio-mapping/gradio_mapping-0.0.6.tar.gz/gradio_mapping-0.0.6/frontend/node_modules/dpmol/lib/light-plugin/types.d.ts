import { Structure } from '../mol-model/structure/structure/structure';
import { UUID } from '../mol-util';
import { Representation } from '../mol-repr/representation';
import { WebGLContext } from '../mol-gl/webgl/context';
import { ThemeRegistry } from '../mol-theme/theme';
import { ColorTheme } from '../mol-theme/color';
import { SizeTheme } from '../mol-theme/size';
import { Loci } from '../mol-model/structure/structure/element/loci';
import { Trajectory } from '../mol-model/structure/trajectory';
import { HydrogenBondsProps, WeakHydrogenBondsProps } from '../mol-model-props/computed/interactions/hydrogen-bonds';
import { HalogenBondsProps } from '../mol-model-props/computed/interactions/halogen-bonds';
import { CationPiProps, IonicProps, PiStackingProps } from '../mol-model-props/computed/interactions/charged';
import { MetalCoordinationProps } from '../mol-model-props/computed/interactions/metal';
declare type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;
export declare enum Format {
    Pdb = "pdb",
    Sdf = "sdf",
    Mol = "mol",
    Mol2 = "mol2",
    MMCif = "mmcif",
    Gro = "gro",
    Xtc = "xtc"
}
export declare enum HierarchyType {
    Molecular = "Molecular",
    Protein = "Protein",
    Chain = "Chain",
    Residue = "Residue",
    Ligand = "Ligand",
    Solvent = "Solvent",
    Water = "Water",
    Other = "Other",
    Metal = "Metal",
    Ions = "Ions",
    Atom = "Atom"
}
export declare enum RepresentationType {
    Ribbon = "Ribbon",
    BallAndStick = "BallAndStick",
    Line = "Line",
    Stick = "Stick",
    CPK = "CPK",
    Label = "Label",
    Distance = "Distance",
    Angle = "Angle",
    Dihedral = "Dihedral",
    IntraInteractions = "IntraInteractions",
    BetweenInteractions = "BetweenInteractions",
    Pharmacophore = "Pharmacophore",
    Pocket = "Pocket",
    Surface = "Surface",
    IsoSurface = "IsoSurface",
    RotateArrow = "RotateArrow",
    MappingLine = "MappingLine",
    Trajectory = "Trajectory"
}
export declare enum ThemeC {
    RIBBON = "Ribbon",
    ATOM = "Atom",
    SURFACE = "Surface"
}
export declare const ReprCBasedTheme: {
    [key: string]: RepresentationType[];
};
export declare enum Intersection {
    Not = 0,
    Include = 1,
    BeIncluded = 2,
    Cross = 3
}
export interface Asset {
    data: Blob | string;
    format: Format;
}
export declare const MolecularReprType: Set<RepresentationType>;
export declare const AtomReprType: Set<RepresentationType>;
export declare const MeasurementType: Set<RepresentationType>;
export declare const OtherReprType: Set<RepresentationType>;
export interface CellItem {
    ref: UUID;
    elementIds?: number[];
    representationType?: RepresentationType;
    structure?: Structure;
}
export interface RepresentationContext {
    webgl: WebGLContext;
    colorThemeRegistry: ThemeRegistry<ColorTheme<any>>;
    sizeThemeRegistry: ThemeRegistry<SizeTheme<any>>;
}
export interface RepresentationCell {
    state?: Representation<any>;
    cache?: any;
    isHidden: boolean;
    type: RepresentationType;
}
export interface ThemeItem {
    name: string;
    elementIds?: number[];
    props?: any;
}
export interface TransparencyItem {
    elementIds?: number[];
    value: number;
}
export interface Theme {
    color?: {
        [key in ThemeC]?: ThemeItem[];
    };
    size?: {
        [key in ThemeC]?: ThemeItem[];
    };
    transparency?: {
        [key in ThemeC]?: TransparencyItem[];
    };
}
export interface Cell {
    ref: UUID;
    model: {
        structure?: Structure;
        loci?: Loci[];
        trajectory?: {
            state: Trajectory;
            frameIndex: number;
        };
        shape?: any;
        other?: any;
    };
    representations: Map<RepresentationType, RepresentationCell>;
    dependency: {
        on: CellItem[];
        by: UUID[];
    };
    theme: Theme;
    assets?: Asset[];
}
export declare type SnapshotCell = Merge<Cell, {
    model: {
        structure?: {
            data: string;
            format: Format;
        };
        loci?: {
            ref: UUID;
            elementIds: number[];
        }[];
        trajectory?: {
            data: string;
            format: Format;
        };
        shape?: any;
        other?: any;
    };
    representations: {
        type: RepresentationType;
        elementIds?: number[];
        params?: any;
        isHidden: boolean;
        cache?: any;
    }[];
}>;
export interface Snapshot {
    cells: SnapshotCell[];
    timestamp: number;
    params: {
        interactionParams: InteractionParams;
        showPolarHydrogenOnly: boolean;
    };
}
export declare enum Granularity {
    Atom = "Atom",
    Residue = "Residue",
    Chain = "Chain",
    Molecular = "Molecular"
}
export declare const GranularityToLociGranularity: {
    Atom: string;
    Residue: string;
    Chain: string;
    Molecular: string;
};
export declare const LociGranularityToGranularity: {
    [key: string]: Granularity;
};
export declare enum InteractionOptions {
    HydrogenBonds = "hydrogen-bonds",
    WeakHydrogenBonds = "weak-hydrogen-bonds",
    HalogenBonds = "halogen-bonds",
    SaltBridge = "ionic",
    PiPiStacking = "pi-stacking",
    PiCations = "cation-pi",
    MetalBonds = "metal-coordination",
    Hydrophobic = "hydrophobic"
}
export interface InteractionParams {
    [InteractionOptions.HydrogenBonds]: {
        name: 'on' | 'off';
        params: HydrogenBondsProps;
    };
    [InteractionOptions.WeakHydrogenBonds]: {
        name: 'on' | 'off';
        params: WeakHydrogenBondsProps;
    };
    [InteractionOptions.HalogenBonds]: {
        name: 'on' | 'off';
        params: HalogenBondsProps;
    };
    [InteractionOptions.SaltBridge]: {
        name: 'on' | 'off';
        params: IonicProps;
    };
    [InteractionOptions.PiPiStacking]: {
        name: 'on' | 'off';
        params: PiStackingProps;
    };
    [InteractionOptions.PiCations]: {
        name: 'on' | 'off';
        params: CationPiProps;
    };
    [InteractionOptions.MetalBonds]: {
        name: 'on' | 'off';
        params: MetalCoordinationProps;
    };
    [InteractionOptions.Hydrophobic]: {
        name: 'on' | 'off';
        params: {};
    };
}
export declare const getDefaultInteractionParams: (options?: InteractionOptions[] | undefined) => InteractionParams;
export declare enum ExpandFilter {
    All = 0,
    Residues = 1,
    Water = 2,
    SolventWithoutWater = 3,
    Solvent = 4
}
export declare const ExpandFilterToHierarchyTypes: {
    0: HierarchyType[];
    1: HierarchyType[];
    2: HierarchyType[];
    3: HierarchyType[];
    4: HierarchyType[];
};
export interface ExpandProps {
    radius: number;
    asWholeResidue: boolean;
    filter: ExpandFilter;
    excludeSelectedAtoms?: boolean;
}
export declare enum HighlightLabelType {
    Structure = "Structure",
    Measurement = "Measurement",
    Interaction = "Interaction",
    Bond = "Bond"
}
export declare enum HydrogenVariant {
    NotHydrogen = -1,
    NonPolar = 0,
    Polar = 1,
    ConnectPolar = 2,
    ConnectNonPolar = 3
}
export interface MolecularFileFormatErrorInfo {
    start: number;
    end: number;
    info?: string;
}
export interface MolecularFileFormatErrorLine {
    index: number;
    info: MolecularFileFormatErrorInfo[];
}
export interface SurfaceOrLabelHierarchyData {
    ref: string;
    dependencies: CellItem[];
    label?: string;
}
export {};
