"use strict";
/**
 * Copyright (c) 2018-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementSymbolColorThemeProvider = exports.ElementSymbolColorTheme = exports.elementSymbolColor = exports.getElementSymbolColorThemeParams = exports.ElementSymbolColorThemeParams = exports.ElementSymbolColors = void 0;
var color_1 = require("../../mol-util/color");
var structure_1 = require("../../mol-model/structure");
var param_definition_1 = require("../../mol-util/param-definition");
var legend_1 = require("../../mol-util/legend");
var color_2 = require("../../mol-util/color/color");
var params_1 = require("../../mol-util/color/params");
var chain_id_1 = require("./chain-id");
var operator_name_1 = require("./operator-name");
var entity_id_1 = require("./entity-id");
var type_helpers_1 = require("../../mol-util/type-helpers");
var entity_source_1 = require("./entity-source");
var uniform_1 = require("./uniform");
// from Jmol http://jmol.sourceforge.net/jscolors/ (or 0xFFFFFF)
exports.ElementSymbolColors = (0, color_1.ColorMap)({
    // H: 0xFFFFFF,
    // H: 0xF6F8FF,
    H: 0xD2D5D8,
    D: 0xffffc0,
    T: 0xffffa0,
    HE: 0xd9ffff,
    LI: 0xcc80ff,
    BE: 0xc2ff00,
    B: 0xffb5b5,
    C: 0x909090,
    // N: 0x3050f8,
    N: 0x7076eb,
    // O: 0xff0d0d,
    O: 0xeb5e5e,
    // F: 0x90e050,
    F: 0x26d0c6,
    NE: 0xb3e3f5,
    NA: 0xab5cf2,
    MG: 0x8aff00,
    AL: 0xbfa6a6,
    SI: 0xf0c8a0,
    // P: 0xff8000,
    P: 0xeede4c,
    // S: 0xffff30,
    S: 0xf0a700,
    // CL: 0x1ff01f,
    CL: 0x13a235,
    AR: 0x80d1e3,
    K: 0x8f40d4,
    CA: 0x3dff00,
    SC: 0xe6e6e6,
    TI: 0xbfc2c7,
    V: 0xa6a6ab,
    CR: 0x8a99c7,
    MN: 0x9c7ac7,
    FE: 0xe06633,
    CO: 0xf090a0,
    NI: 0x50d050,
    CU: 0xc88033,
    ZN: 0x7d80b0,
    GA: 0xc28f8f,
    GE: 0x668f8f,
    AS: 0xbd80e3,
    SE: 0xffa100,
    // BR: 0xa62929,
    BR: 0x873234,
    KR: 0x5cb8d1,
    RB: 0x702eb0,
    SR: 0x00ff00,
    Y: 0x94ffff,
    ZR: 0x94e0e0,
    NB: 0x73c2c9,
    MO: 0x54b5b5,
    TC: 0x3b9e9e,
    RU: 0x248f8f,
    RH: 0x0a7d8c,
    PD: 0x006985,
    AG: 0xc0c0c0,
    CD: 0xffd98f,
    IN: 0xa67573,
    SN: 0x668080,
    SB: 0x9e63b5,
    TE: 0xd47a00,
    I: 0x940094,
    XE: 0x940094,
    CS: 0x57178f,
    BA: 0x00c900,
    LA: 0x70d4ff,
    CE: 0xffffc7,
    PR: 0xd9ffc7,
    ND: 0xc7ffc7,
    PM: 0xa3ffc7,
    SM: 0x8fffc7,
    EU: 0x61ffc7,
    GD: 0x45ffc7,
    TB: 0x30ffc7,
    DY: 0x1fffc7,
    HO: 0x00ff9c,
    ER: 0x00e675,
    TM: 0x00d452,
    YB: 0x00bf38,
    LU: 0x00ab24,
    HF: 0x4dc2ff,
    TA: 0x4da6ff,
    W: 0x2194d6,
    RE: 0x267dab,
    OS: 0x266696,
    IR: 0x175487,
    PT: 0xd0d0e0,
    AU: 0xffd123,
    HG: 0xb8b8d0,
    TL: 0xa6544d,
    PB: 0x575961,
    BI: 0x9e4fb5,
    PO: 0xab5c00,
    AT: 0x754f45,
    RN: 0x428296,
    FR: 0x420066,
    RA: 0x007d00,
    AC: 0x70abfa,
    TH: 0x00baff,
    PA: 0x00a1ff,
    U: 0x008fff,
    NP: 0x0080ff,
    PU: 0x006bff,
    AM: 0x545cf2,
    CM: 0x785ce3,
    BK: 0x8a4fe3,
    CF: 0xa136d4,
    ES: 0xb31fd4,
    FM: 0xb31fba,
    MD: 0xb30da6,
    NO: 0xbd0d87,
    LR: 0xc70066,
    RF: 0xcc0059,
    DB: 0xd1004f,
    SG: 0xd90045,
    BH: 0xe00038,
    HS: 0xe6002e,
    MT: 0xeb0026,
    DS: 0xffffff,
    RG: 0xffffff,
    CN: 0xffffff,
    UUT: 0xffffff,
    FL: 0xffffff,
    UUP: 0xffffff,
    LV: 0xffffff,
    UUH: 0xffffff
});
var DefaultElementSymbolColor = (0, color_1.Color)(0xffffff);
var Description = 'Assigns a color to every atom according to its chemical element.';
exports.ElementSymbolColorThemeParams = {
    carbonColor: param_definition_1.ParamDefinition.MappedStatic('chain-id', {
        'chain-id': param_definition_1.ParamDefinition.Group(chain_id_1.ChainIdColorThemeParams),
        'entity-id': param_definition_1.ParamDefinition.Group(entity_id_1.EntityIdColorThemeParams),
        'entity-source': param_definition_1.ParamDefinition.Group(entity_source_1.EntitySourceColorThemeParams),
        'operator-name': param_definition_1.ParamDefinition.Group(operator_name_1.OperatorNameColorThemeParams),
        'element-symbol': param_definition_1.ParamDefinition.EmptyGroup(),
        'uniform': param_definition_1.ParamDefinition.Group(uniform_1.UniformColorThemeParams),
    }, { description: 'Use chain-id coloring for carbon atoms.' }),
    saturation: param_definition_1.ParamDefinition.Numeric(0, { min: -6, max: 6, step: 0.1 }),
    lightness: param_definition_1.ParamDefinition.Numeric(0.2, { min: -6, max: 6, step: 0.1 }),
    colors: param_definition_1.ParamDefinition.MappedStatic('default', {
        default: param_definition_1.ParamDefinition.EmptyGroup(),
        custom: param_definition_1.ParamDefinition.Group((0, params_1.getColorMapParams)(exports.ElementSymbolColors))
    })
};
function getElementSymbolColorThemeParams(ctx) {
    return exports.ElementSymbolColorThemeParams; // TODO return copy
}
exports.getElementSymbolColorThemeParams = getElementSymbolColorThemeParams;
function elementSymbolColor(colorMap, element) {
    var c = colorMap[element];
    return c === undefined ? DefaultElementSymbolColor : c;
}
exports.elementSymbolColor = elementSymbolColor;
function ElementSymbolColorTheme(ctx, props) {
    var colorMap = (0, color_2.getAdjustedColorMap)(props.colors.name === 'default' ? exports.ElementSymbolColors : props.colors.params, props.saturation, props.lightness);
    var pcc = props.carbonColor;
    var carbonColor = pcc.name === 'chain-id'
        ? (0, chain_id_1.ChainIdColorTheme)(ctx, pcc.params).color
        : pcc.name === 'entity-id'
            ? (0, entity_id_1.EntityIdColorTheme)(ctx, pcc.params).color
            : pcc.name === 'entity-source'
                ? (0, entity_source_1.EntitySourceColorTheme)(ctx, pcc.params).color
                : pcc.name === 'operator-name'
                    ? (0, operator_name_1.OperatorNameColorTheme)(ctx, pcc.params).color
                    : pcc.name === 'element-symbol'
                        ? undefined
                        : pcc.name === 'uniform'
                            ? (0, uniform_1.UniformColorTheme)(ctx, pcc.params).color
                            : (0, type_helpers_1.assertUnreachable)(pcc);
    function elementColor(element, location) {
        return carbonColor && element === 'C'
            ? carbonColor(location, false)
            : elementSymbolColor(colorMap, element);
    }
    function color(location) {
        if (structure_1.StructureElement.Location.is(location)) {
            if (structure_1.Unit.isAtomic(location.unit)) {
                var type_symbol = location.unit.model.atomicHierarchy.atoms.type_symbol;
                return elementColor(type_symbol.value(location.element), location);
            }
        }
        else if (structure_1.Bond.isLocation(location)) {
            if (structure_1.Unit.isAtomic(location.aUnit)) {
                var type_symbol = location.aUnit.model.atomicHierarchy.atoms.type_symbol;
                var element = type_symbol.value(location.aUnit.elements[location.aIndex]);
                return elementColor(element, location);
            }
        }
        return DefaultElementSymbolColor;
    }
    var granularity = props.carbonColor.name === 'operator-name' ? 'groupInstance' : 'group';
    return {
        factory: ElementSymbolColorTheme,
        granularity: granularity,
        preferSmoothing: true,
        color: color,
        props: props,
        description: Description,
        legend: (0, legend_1.TableLegend)(Object.keys(colorMap).map(function (name) {
            return [name, colorMap[name]];
        }))
    };
}
exports.ElementSymbolColorTheme = ElementSymbolColorTheme;
exports.ElementSymbolColorThemeProvider = {
    name: 'element-symbol',
    label: 'Element Symbol',
    category: "Atom Property" /* Atom */,
    factory: ElementSymbolColorTheme,
    getParams: getElementSymbolColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.ElementSymbolColorThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure; }
};
//# sourceMappingURL=element-symbol.js.map