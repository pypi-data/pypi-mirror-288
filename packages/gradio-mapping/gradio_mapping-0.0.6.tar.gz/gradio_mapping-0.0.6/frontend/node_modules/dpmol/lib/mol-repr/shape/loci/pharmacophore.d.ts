import { Spheres } from '../../../mol-geo/geometry/spheres/spheres';
import { SpheresBuilder } from '../../../mol-geo/geometry/spheres/spheres-builder';
import { Primitive } from '../../../mol-geo/primitive/primitive';
import { Vec3 } from '../../../mol-math/linear-algebra';
import { Shape } from '../../../mol-model/shape';
import { RuntimeContext } from '../../../mol-task';
import { ThemeRegistryContext } from '../../../mol-theme/theme';
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { RepresentationContext, RepresentationParamsGetter } from '../../representation';
import { StructureRepresentation } from '../../structure/representation';
export interface PharmacophoreData {
    center: Vec3;
    vec: Vec3;
    radius: number;
}
declare const PharmacophoreBall1Params: {
    color: PD.Color;
    lineSizeAttenuation: PD.BooleanParam;
    linesSize: PD.Numeric;
    dashedLines: PD.BooleanParam;
    alpha: PD.Numeric;
    radiusFactor: PD.Numeric;
    center: PD.Vec3;
    radius: PD.Numeric;
    vec: PD.Vec3;
    sizeFactor: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type PharmacophoreBall1Params = typeof PharmacophoreBall1Params;
export declare type PharmacophoreBall1Props = PD.Values<PharmacophoreBall1Params>;
declare const PharmacophoreBall2Params: {
    color: PD.Color;
    lineSizeAttenuation: PD.BooleanParam;
    linesSize: PD.Numeric;
    dashedLines: PD.BooleanParam;
    alpha: PD.Numeric;
    radiusFactor: PD.Numeric;
    center: PD.Vec3;
    radius: PD.Numeric;
    vec: PD.Vec3;
    sizeFactor: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type PharmacophoreBall2Params = typeof PharmacophoreBall2Params;
export declare type PharmacophoreBall2Props = PD.Values<PharmacophoreBall2Params>;
export declare const PharmacophoreParams: {
    visuals: PD.MultiSelect<"pharmacophore-ball-1" | "pharmacophore-ball-2" | "pharmacophore-sphere-1" | "pharmacophore-sphere-2" | "pharmacophore-cylinder" | "pharmacophore-arrowhead">;
    alpha: PD.Numeric;
    color: PD.Color;
    lineSizeAttenuation: PD.BooleanParam;
    linesSize: PD.Numeric;
    dashedLines: PD.BooleanParam;
    radiusFactor: PD.Numeric;
    center: PD.Vec3;
    radius: PD.Numeric;
    vec: PD.Vec3;
    sizeFactor: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type PharmacophoreParams = typeof PharmacophoreParams;
export declare type PharmacophoreProps = PD.Values<PharmacophoreParams>;
export declare const PharmacophoreSphere1Params: {
    sizeFactor: PD.Numeric;
    color: PD.Color;
    alpha: PD.Numeric;
    radiusFactor: PD.Numeric;
    center: PD.Vec3;
    radius: PD.Numeric;
    vec: PD.Vec3;
    doubleSided: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    bumpFrequency: PD.Numeric;
    bumpAmplitude: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type PharmacophoreSphere1Params = typeof PharmacophoreSphere1Params;
export declare type PharmacophoreSphere1Props = PD.Values<PharmacophoreSphere1Params>;
export declare const PharmacophoreSphere2Params: {
    sizeFactor: PD.Numeric;
    color: PD.Color;
    alpha: PD.Numeric;
    radiusFactor: PD.Numeric;
    center: PD.Vec3;
    radius: PD.Numeric;
    vec: PD.Vec3;
    doubleSided: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    bumpFrequency: PD.Numeric;
    bumpAmplitude: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type PharmacophoreSphere2Params = typeof PharmacophoreSphere1Params;
export declare type PharmacophoreSphere2Props = PD.Values<PharmacophoreSphere1Params>;
export declare const PharmacophoreCylinderParams: {
    color: PD.Color;
    sizeFactor: PD.Numeric;
    radiusFactor: PD.Numeric;
    center: PD.Vec3;
    radius: PD.Numeric;
    vec: PD.Vec3;
    sizeAspectRatio: PD.Numeric;
    doubleSided: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    bumpFrequency: PD.Numeric;
    bumpAmplitude: PD.Numeric;
    alpha: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type PharmacophoreCylinderParams = typeof PharmacophoreCylinderParams;
export declare type PharmacophoreCylinderProps = PD.Values<PharmacophoreCylinderParams>;
export declare const PharmacophoreArrowHeadParams: {
    color: PD.Color;
    radiusFactor: PD.Numeric;
    center: PD.Vec3;
    radius: PD.Numeric;
    vec: PD.Vec3;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    bumpFrequency: PD.Numeric;
    bumpAmplitude: PD.Numeric;
    alpha: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type PharmacophoreArrowHeadParams = typeof PharmacophoreArrowHeadParams;
export declare type PharmacophoreArrowHeadProps = PD.Values<PharmacophoreArrowHeadParams>;
export declare function getSphere(detail: number): Primitive;
export declare function addSphere(builder: SpheresBuilder, center: Vec3, radius: number, detail: number): void;
export declare function getPharmacophoreSphere1(ctx: RuntimeContext, _: any, props: PharmacophoreSphere1Props, shape?: Shape<Spheres>): Shape<Spheres>;
export declare function getPharmacophoreSphere2(ctx: RuntimeContext, _: any, props: PharmacophoreSphere1Props, shape?: Shape<Spheres>): Shape<Spheres>;
export declare function getPharmacophoreParams(ctx: ThemeRegistryContext): {
    visuals: PD.MultiSelect<"pharmacophore-ball-1" | "pharmacophore-ball-2" | "pharmacophore-sphere-1" | "pharmacophore-sphere-2" | "pharmacophore-cylinder" | "pharmacophore-arrowhead">;
    alpha: PD.Numeric;
    color: PD.Color;
    lineSizeAttenuation: PD.BooleanParam;
    linesSize: PD.Numeric;
    dashedLines: PD.BooleanParam;
    radiusFactor: PD.Numeric;
    center: PD.Vec3;
    radius: PD.Numeric;
    vec: PD.Vec3;
    sizeFactor: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
};
export declare type PharmacophoreRepresentation = StructureRepresentation<PharmacophoreProps>;
export declare function PharmacophoreRepresentation(ctx: RepresentationContext, getParams: RepresentationParamsGetter<PharmacophoreData, PharmacophoreParams>): PharmacophoreRepresentation;
export {};
