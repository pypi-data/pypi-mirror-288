import { Structure } from '../../mol-model/structure/structure/structure';
import { StructureElement } from '../../mol-model/structure/structure';
import { Loci as ElementLoci } from '../../mol-model/structure/structure/element/loci';
import { Loci } from '../../mol-model/loci';
import { Granularity } from '../types';
export declare const transformLociToElementLoci: (loci: Loci) => StructureElement.Loci | undefined;
export declare const getLoci: (structure: Structure, elementIds?: number[] | undefined) => StructureElement.Loci;
export declare const getElementIdsByLoci: (loci: ElementLoci) => number[];
export declare const getElementLociInfo: (loci: ElementLoci, granularity: Granularity) => {
    x: number;
    y: number;
    z: number;
    granularity: Granularity;
    atomName: string;
    atomId: number;
    altId: string;
    residueName: string;
    residueId: number;
    insertCode: string;
    chainId: string;
    emConfidence: string;
    bfactor: number;
} | {
    granularity: Granularity;
    altId: string;
    residueName: string;
    residueId: number;
    chainId: string;
    insertCode: string;
    emConfidence: string;
    bfactor: number;
    x?: undefined;
    y?: undefined;
    z?: undefined;
    atomName?: undefined;
    atomId?: undefined;
} | {
    granularity: Granularity;
    altId: string;
    residueName: string;
    residueId: number;
    chainId: string;
    insertCode: string;
    bfactor: number;
    x?: undefined;
    y?: undefined;
    z?: undefined;
    atomName?: undefined;
    atomId?: undefined;
    emConfidence?: undefined;
} | {
    granularity: Granularity;
    chainId: string;
    x?: undefined;
    y?: undefined;
    z?: undefined;
    atomName?: undefined;
    atomId?: undefined;
    altId?: undefined;
    residueName?: undefined;
    residueId?: undefined;
    insertCode?: undefined;
    emConfidence?: undefined;
    bfactor?: undefined;
} | {
    granularity: Granularity;
    x?: undefined;
    y?: undefined;
    z?: undefined;
    atomName?: undefined;
    atomId?: undefined;
    altId?: undefined;
    residueName?: undefined;
    residueId?: undefined;
    insertCode?: undefined;
    chainId?: undefined;
    emConfidence?: undefined;
    bfactor?: undefined;
} | {
    x?: undefined;
    y?: undefined;
    z?: undefined;
    granularity?: undefined;
    atomName?: undefined;
    atomId?: undefined;
    altId?: undefined;
    residueName?: undefined;
    residueId?: undefined;
    insertCode?: undefined;
    chainId?: undefined;
    emConfidence?: undefined;
    bfactor?: undefined;
};
export declare const getInteractionLociInfo: (interactionLoci: any) => {
    infoA: {
        chainId: string;
        residueName: string;
        residueId: number;
        atomName: string;
    };
    infoB: {
        chainId: string;
        residueName: string;
        residueId: number;
        atomName: string;
    };
    interactionType: string;
};
