import { Representation } from '../../../mol-repr/representation';
import { UUID } from '../../../mol-util';
import { LightPlugin } from '../../index';
import { CellItem, ExpandProps, Granularity } from '../../types';
import { Canvas3D } from '../../../mol-canvas3d/canvas3d';
import { Loci } from '../../../mol-model/loci';
export interface AddSelectionEvent {
    loci: Representation.Loci;
    item: CellItem;
}
export interface RemoveSelectionEvent {
    loci: Representation.Loci;
    item: CellItem;
}
export declare class StructureSelectionManager {
    private ev;
    lociGranularity: Loci.Granularity;
    prev: {
        ref: UUID;
        elementIds?: number[];
    }[];
    plugin: LightPlugin;
    selection: Map<UUID, number[]>;
    readonly event: {
        change: import("rxjs").Subject<Canvas3D.ClickEvent>;
        add: import("rxjs").Subject<AddSelectionEvent>;
        remove: import("rxjs").Subject<RemoveSelectionEvent>;
        clear: import("rxjs").Subject<{}>;
    };
    get granularity(): Granularity;
    constructor(plugin: LightPlugin);
    getSelectionCellItems(emptyIsAll?: boolean): CellItem[];
    getSelection(): {
        [key: string]: number[];
    };
    add(data: {
        item: CellItem;
        reprLoci?: Representation.Loci;
    }, isNormalize?: boolean, isRecurve?: boolean): void;
    remove(data: {
        item: CellItem;
        reprLoci?: Representation.Loci;
    }, isNormalize?: boolean, isRecurve?: boolean): void;
    clear(): void;
    setGranularity(granularity: Granularity): void;
    expand(props: ExpandProps, items?: CellItem[]): void;
}
