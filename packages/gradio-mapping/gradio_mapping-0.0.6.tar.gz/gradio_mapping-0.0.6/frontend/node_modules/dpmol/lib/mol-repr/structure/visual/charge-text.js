"use strict";
/**
 * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author David Sehnal <david.sehnal@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChargeTextVisual = exports.ChargeTextParams = void 0;
var tslib_1 = require("tslib");
var param_definition_1 = require("../../../mol-util/param-definition");
var structure_1 = require("../../../mol-model/structure");
var text_builder_1 = require("../../../mol-geo/geometry/text/text-builder");
var complex_visual_1 = require("../complex-visual");
var element_1 = require("./util/element");
var names_1 = require("../../../mol-util/color/names");
var linear_algebra_1 = require("../../../mol-math/linear-algebra");
exports.ChargeTextParams = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, complex_visual_1.ComplexTextParams), { sizeFactor: param_definition_1.ParamDefinition.Numeric(0.2, { min: 0, max: 10, step: 0.1 }), background: param_definition_1.ParamDefinition.Boolean(false), backgroundMargin: param_definition_1.ParamDefinition.Numeric(0, { min: 0, max: 1, step: 0.01 }), backgroundColor: param_definition_1.ParamDefinition.Color(names_1.ColorNames.black), backgroundOpacity: param_definition_1.ParamDefinition.Numeric(0.5, { min: 0, max: 1, step: 0.01 }), borderWidth: param_definition_1.ParamDefinition.Numeric(0.25, { min: 0, max: 0.5, step: 0.01 }), level: param_definition_1.ParamDefinition.Select('element', [
        ['element', 'Element']
    ], { isEssential: true }), chainScale: param_definition_1.ParamDefinition.Numeric(10, { min: 0, max: 20, step: 0.1 }), residueScale: param_definition_1.ParamDefinition.Numeric(1, { min: 0, max: 20, step: 0.1 }), elementScale: param_definition_1.ParamDefinition.Numeric(2, { min: 0, max: 20, step: 0.1 }), attachment: param_definition_1.ParamDefinition.Select('middle-left', [
        ['bottom-left', 'bottom-left'], ['bottom-center', 'bottom-center'], ['bottom-right', 'bottom-right'],
        ['middle-left', 'middle-left'], ['middle-center', 'middle-center'], ['middle-right', 'middle-right'],
        ['top-left', 'top-left'], ['top-center', 'top-center'], ['top-right', 'top-right'],
    ]), tether: param_definition_1.ParamDefinition.Boolean(true), tetherLength: param_definition_1.ParamDefinition.Numeric(0.2, { min: 0, max: 5, step: 0.1 }), tetherBaseWidth: param_definition_1.ParamDefinition.Numeric(0, { min: 0, max: 1, step: 0.01 }) });
function ChargeTextVisual(materialId) {
    return (0, complex_visual_1.ComplexTextVisual)({
        defaultProps: param_definition_1.ParamDefinition.getDefaultValues(exports.ChargeTextParams),
        createGeometry: createChargeText,
        createLocationIterator: element_1.ElementIterator.fromStructure,
        getLoci: element_1.getSerialElementLoci,
        eachLocation: element_1.eachSerialElement,
        setUpdateState: function (state, newProps, currentProps) {
            state.createGeometry =
                newProps.level !== currentProps.level ||
                    (newProps.level === 'element' &&
                        newProps.elementScale !== currentProps.elementScale);
        }
    }, materialId);
}
exports.ChargeTextVisual = ChargeTextVisual;
function createChargeText(ctx, structure, theme, props, text) {
    theme.size.size = function () { return 1; };
    theme.color.color = function (location) {
        if (structure_1.StructureElement.Location.is(location)) {
            if (structure_1.Unit.isAtomic(location.unit)) {
                var pdbx_formal_charge = structure_1.StructureProperties.atom.pdbx_formal_charge;
                var value = pdbx_formal_charge(location);
                if (value > 0) {
                    return names_1.ColorNames.red;
                }
                if (value < 0) {
                    return names_1.ColorNames.blue;
                }
            }
        }
        return names_1.ColorNames.white;
    };
    props.sizeFactor = 0.2;
    return createElementText(ctx, structure, theme, props, text);
}
var tmpVec = (0, linear_algebra_1.Vec3)();
function createElementText(ctx, structure, theme, props, text) {
    var l = structure_1.StructureElement.Location.create(structure);
    var units = structure.units, serialMapping = structure.serialMapping;
    var pdbx_formal_charge = structure_1.StructureProperties.atom.pdbx_formal_charge;
    var cumulativeUnitElementCount = serialMapping.cumulativeUnitElementCount;
    // const sizeTheme = theme.size
    var count = structure.elementCount;
    // const { elementScale } = props
    var builder = text_builder_1.TextBuilder.create(props, count, count / 2, text);
    var hasCharge = false;
    for (var i = 0, il = units.length; i < il; ++i) {
        var unit = units[i];
        var pos = unit.conformation.position;
        var elements = unit.elements;
        l.unit = unit;
        var groupOffset = cumulativeUnitElementCount[i];
        for (var j = 0, _j = elements.length; j < _j; j++) {
            l.element = elements[j];
            var charge = pdbx_formal_charge(l);
            if (charge === 0)
                continue;
            pos(l.element, tmpVec);
            var text_1 = "".concat(charge > 0 ? '+' : '').concat(charge);
            builder.add(text_1, tmpVec[0], tmpVec[1], tmpVec[2], 
            // sizeTheme.size(l),
            0, 
            // elementScale,
            5, groupOffset + j);
            hasCharge = true;
        }
        if (!hasCharge) {
            var center = structure.boundary.sphere.center;
            builder.add('', center[0], center[1], center[2], 
            // sizeTheme.size(l),
            0, 
            // elementScale,
            0, groupOffset + 1);
        }
    }
    return builder.getText();
}
//# sourceMappingURL=charge-text.js.map