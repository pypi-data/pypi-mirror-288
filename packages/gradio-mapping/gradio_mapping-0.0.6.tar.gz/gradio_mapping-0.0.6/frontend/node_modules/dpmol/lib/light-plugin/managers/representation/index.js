"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepresentationManager = void 0;
var tslib_1 = require("tslib");
var color_1 = require("../../../mol-theme/color");
var size_1 = require("../../../mol-theme/size");
var types_1 = require("../../types");
var interaction_type_1 = require("../../../mol-model-props/computed/themes/interaction-type");
var model_1 = require("../../model");
var structure_1 = require("../../../mol-model/structure/structure/structure");
var representation_1 = require("../../representation");
var utils_1 = require("../../utils");
var loci_1 = require("../../../mol-model/structure/structure/element/loci");
var builder_1 = require("../../../mol-script/language/builder");
var int_1 = require("../../../mol-data/int");
var util_1 = require("../../../mol-model-props/computed/chemistry/util");
var theme_1 = require("./theme");
var interactions_1 = require("./interactions");
var color_2 = require("../../../mol-util/color");
var marker_action_1 = require("../../../mol-util/marker-action");
var RepresentationManager = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(RepresentationManager, _super);
    function RepresentationManager(plugin, defaultTheme, defaultInteractionParams) {
        var _this = _super.call(this, plugin, defaultTheme) || this;
        _this.defaultTheme = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, theme_1.initialTheme), defaultTheme);
        _this.plugin = plugin;
        _this.interactionParams = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, defaultInteractionParams), (0, types_1.getDefaultInteractionParams)());
        _this.showPolarHydrogenOnly = true;
        _this.ctx = {
            webgl: undefined,
            colorThemeRegistry: color_1.ColorTheme.createRegistry(),
            sizeThemeRegistry: size_1.SizeTheme.createRegistry()
        };
        return _this;
    }
    RepresentationManager.prototype.createContext = function () {
        this.ctx = {
            webgl: this.plugin.canvas3d.webgl,
            colorThemeRegistry: color_1.ColorTheme.createRegistry(),
            sizeThemeRegistry: size_1.SizeTheme.createRegistry()
        };
        this.ctx.colorThemeRegistry.add(interaction_type_1.InteractionTypeColorThemeProvider);
    };
    RepresentationManager.prototype.createMolecular = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var format, reprType, _y, theme, elementIds, ref, defaultShown, _z, updateInteraction, structures, _0, _1, fileName, shownCount, themeC, uuids, i, _loop_1, this_1, _i, structures_1, structure, err_1;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_2) {
                switch (_2.label) {
                    case 0:
                        format = props.format, reprType = props.reprType, _y = props.theme, theme = _y === void 0 ? {} : _y, elementIds = props.elementIds, ref = props.ref, defaultShown = props.defaultShown, _z = props.updateInteraction, updateInteraction = _z === void 0 ? true : _z;
                        _2.label = 1;
                    case 1:
                        _2.trys.push([1, 8, , 9]);
                        _1 = (_0 = model_1.FormatProvider[format]).parse;
                        return [4 /*yield*/, (0, utils_1.readAsString)(props.data)];
                    case 2: return [4 /*yield*/, _1.apply(_0, [_2.sent()])];
                    case 3:
                        structures = (_2.sent());
                        fileName = typeof props.data !== 'string' ? props.data.name : '';
                        shownCount = defaultShown !== null && defaultShown !== void 0 ? defaultShown : structures.length;
                        themeC = Object.keys(types_1.ReprCBasedTheme).find(function (key) {
                            return types_1.ReprCBasedTheme[key].includes(reprType);
                        });
                        uuids = [];
                        i = 0;
                        _loop_1 = function (structure) {
                            var reprElementIds, reprStructure, isHidden, assetData, cellData, representation, newRef, _3, polymer, other, proteinStructure, otherStructure;
                            var _4, _5, _6, _7, _8, _9, _10, _11;
                            return (0, tslib_1.__generator)(this, function (_12) {
                                switch (_12.label) {
                                    case 0:
                                        reprElementIds = (0, tslib_1.__spreadArray)([], (elementIds !== null && elementIds !== void 0 ? elementIds : []), true);
                                        reprStructure = structure;
                                        if (this_1.showPolarHydrogenOnly && types_1.AtomReprType.has(reprType)) {
                                            reprElementIds = (elementIds !== null && elementIds !== void 0 ? elementIds : (0, utils_1.getElementsFromStructure)(structure)).filter(function (elementId) { return !(0, utils_1.isNonPolarHydrogen)(structure, elementId); });
                                            reprStructure = (0, utils_1.getStructureByElementIds)(structure, reprElementIds);
                                        }
                                        isHidden = !shownCount;
                                        assetData = (0, utils_1.getTextFromStructure)(structure, format);
                                        cellData = {
                                            representations: [
                                                {
                                                    // state: representation,
                                                    isHidden: isHidden,
                                                    type: reprType
                                                }
                                            ],
                                            // model: { structure },
                                            model: {},
                                            assets: [
                                                {
                                                    format: format,
                                                    data: ['sdf', 'mol'].includes(format) && fileName && !(assetData === null || assetData === void 0 ? void 0 : assetData.split('\n')[0].trim()) ? (0, tslib_1.__spreadArray)(["".concat(fileName).concat(i > 0 ? "_".concat(i) : '')], assetData.split('\n').slice(1), true).join('\n') : assetData
                                                }
                                            ],
                                            theme: {
                                                color: (_4 = {},
                                                    _4[themeC] = [
                                                        (0, tslib_1.__assign)({ elementIds: elementIds !== null && elementIds !== void 0 ? elementIds : (0, utils_1.getElementIdsByLoci)(structure_1.Structure.toStructureElementLoci(structure)) }, ((_b = (_a = theme[themeC]) === null || _a === void 0 ? void 0 : _a.color) !== null && _b !== void 0 ? _b : (themeC === types_1.ThemeC.ATOM ? theme_1.DefaultLigandColorTheme : this_1.defaultTheme.color[themeC])))
                                                    ],
                                                    _4),
                                                transparency: (_5 = {},
                                                    _5[types_1.ThemeC.ATOM] = [],
                                                    _5[types_1.ThemeC.RIBBON] = [],
                                                    _5[types_1.ThemeC.SURFACE] = [],
                                                    _5[themeC] = ((_c = theme[themeC]) === null || _c === void 0 ? void 0 : _c.transparency)
                                                        ? [(_d = theme[themeC]) === null || _d === void 0 ? void 0 : _d.transparency]
                                                        : [],
                                                    _5),
                                                size: (_6 = {},
                                                    _6[types_1.ThemeC.ATOM] = [],
                                                    _6[types_1.ThemeC.RIBBON] = [],
                                                    _6[types_1.ThemeC.SURFACE] = [],
                                                    _6[themeC] = ((_e = theme[themeC]) === null || _e === void 0 ? void 0 : _e.size)
                                                        ? [(_f = theme[themeC]) === null || _f === void 0 ? void 0 : _f.size]
                                                        : [],
                                                    _6)
                                            },
                                            ref: ref
                                        };
                                        i++;
                                        if (!!isHidden) return [3 /*break*/, 2];
                                        return [4 /*yield*/, representation_1.MolecularRepresentation[reprType].create(reprStructure, this_1.ctx, this_1.createTheme(reprType, structure, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, theme[themeC]), (themeC === types_1.ThemeC.ATOM && !((_g = theme[themeC]) === null || _g === void 0 ? void 0 : _g.color) ? { color: theme_1.DefaultLigandColorTheme } : {}))))];
                                    case 1:
                                        representation = _12.sent();
                                        if ((_h = theme[themeC]) === null || _h === void 0 ? void 0 : _h.transparency) {
                                            representation.setState({
                                                transparency: this_1.createTransparencyLayers(structure, [
                                                    (_j = theme[themeC]) === null || _j === void 0 ? void 0 : _j.transparency
                                                ])
                                            });
                                        }
                                        shownCount--;
                                        (_k = this_1.plugin.canvas3d) === null || _k === void 0 ? void 0 : _k.add(representation);
                                        Object.assign(cellData.representations[0], { state: representation });
                                        return [3 /*break*/, 3];
                                    case 2:
                                        Object.assign(cellData.representations[0], {
                                            cache: {
                                                isHidden: isHidden,
                                                type: reprType,
                                                elementIds: reprElementIds,
                                            }
                                        });
                                        _12.label = 3;
                                    case 3:
                                        newRef = this_1.plugin.managers.cell.create(cellData);
                                        uuids.push(newRef);
                                        if (!(format === types_1.Format.Pdb && !(elementIds === null || elementIds === void 0 ? void 0 : elementIds.length))) return [3 /*break*/, 7];
                                        _3 = (0, utils_1.getProteinAndOthersElementIdByStructure)(structure), polymer = _3.polymer, other = _3.other;
                                        if (!other.length) return [3 /*break*/, 7];
                                        if (!!isHidden) return [3 /*break*/, 6];
                                        proteinStructure = (0, utils_1.getStructureByElementIds)(structure, polymer);
                                        return [4 /*yield*/, representation_1.MolecularRepresentation[types_1.RepresentationType.Ribbon].update(cellData.representations[0].state, (0, utils_1.getStructureByElementIds)(structure, polymer), this_1.ctx, this_1.createTheme(types_1.RepresentationType.Ribbon, proteinStructure, theme[types_1.ThemeC.RIBBON]))];
                                    case 4:
                                        _12.sent();
                                        otherStructure = (0, utils_1.getStructureByElementIds)(structure, other);
                                        this_1.plugin.managers.cell.update(newRef, {
                                            representations: [],
                                            model: { structure: structure },
                                            theme: {
                                                color: (_7 = {},
                                                    _7[types_1.ThemeC.ATOM] = [
                                                        (0, tslib_1.__assign)({ elementIds: other !== null && other !== void 0 ? other : (0, utils_1.getElementIdsByLoci)(structure_1.Structure.toStructureElementLoci(structure)) }, ((_m = (_l = theme[types_1.ThemeC.ATOM]) === null || _l === void 0 ? void 0 : _l.color) !== null && _m !== void 0 ? _m : {
                                                            name: 'element-symbol',
                                                            props: {
                                                                carbonColor: {
                                                                    name: 'uniform',
                                                                    params: {
                                                                        value: (0, color_2.Color)(0x48e533),
                                                                    },
                                                                }
                                                            }
                                                        }))
                                                    ],
                                                    _7),
                                                transparency: (_8 = {},
                                                    _8[types_1.ThemeC.ATOM] = ((_o = theme[types_1.ThemeC.ATOM]) === null || _o === void 0 ? void 0 : _o.transparency)
                                                        ? [(_p = theme[types_1.ThemeC.ATOM]) === null || _p === void 0 ? void 0 : _p.transparency]
                                                        : [],
                                                    _8),
                                                size: (_9 = {},
                                                    _9[types_1.ThemeC.ATOM] = [],
                                                    _9[types_1.ThemeC.RIBBON] = [],
                                                    _9[types_1.ThemeC.SURFACE] = [],
                                                    _9[themeC] = ((_q = theme[types_1.ThemeC.ATOM]) === null || _q === void 0 ? void 0 : _q.size)
                                                        ? [(_r = theme[types_1.ThemeC.ATOM]) === null || _r === void 0 ? void 0 : _r.size]
                                                        : [],
                                                    _9)
                                            }
                                        });
                                        return [4 /*yield*/, this_1.addMolecularRepr(newRef, {
                                                elementIds: other,
                                                reprType: types_1.RepresentationType.BallAndStick,
                                                isHidden: isHidden,
                                                theme: this_1.createTheme(types_1.RepresentationType.BallAndStick, otherStructure, (0, tslib_1.__assign)({ color: (0, tslib_1.__assign)({ elementIds: other }, theme_1.DefaultLigandColorTheme) }, theme[types_1.ThemeC.ATOM])),
                                                transparency: ((_s = theme[types_1.ThemeC.ATOM]) === null || _s === void 0 ? void 0 : _s.transparency)
                                                    ? [(_t = theme[types_1.ThemeC.ATOM]) === null || _t === void 0 ? void 0 : _t.transparency]
                                                    : undefined
                                            })];
                                    case 5:
                                        _12.sent();
                                        return [3 /*break*/, 7];
                                    case 6:
                                        this_1.plugin.managers.cell.update(newRef, {
                                            representations: [
                                                (0, tslib_1.__assign)((0, tslib_1.__assign)({}, cellData.representations[0]), { cache: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, cellData.representations[0].cache), { elementIds: polymer }) }),
                                                {
                                                    // state: representation,
                                                    isHidden: isHidden,
                                                    type: types_1.RepresentationType.BallAndStick,
                                                    cache: {
                                                        isHidden: isHidden,
                                                        type: types_1.RepresentationType.BallAndStick,
                                                        elementIds: other,
                                                    }
                                                }
                                            ],
                                            model: {},
                                            theme: {
                                                color: (_10 = {},
                                                    _10[types_1.ThemeC.ATOM] = [
                                                        (0, tslib_1.__assign)({ elementIds: other !== null && other !== void 0 ? other : (0, utils_1.getElementIdsByLoci)(structure_1.Structure.toStructureElementLoci(structure)) }, ((_v = (_u = theme[types_1.ThemeC.ATOM]) === null || _u === void 0 ? void 0 : _u.color) !== null && _v !== void 0 ? _v : {
                                                            name: 'element-symbol',
                                                            props: {
                                                                carbonColor: {
                                                                    name: 'uniform',
                                                                    params: {
                                                                        value: (0, color_2.Color)(0x48e533),
                                                                    },
                                                                }
                                                            }
                                                        }))
                                                    ],
                                                    _10),
                                                transparency: (_11 = {},
                                                    _11[types_1.ThemeC.ATOM] = ((_w = theme[types_1.ThemeC.ATOM]) === null || _w === void 0 ? void 0 : _w.transparency)
                                                        ? [(_x = theme[types_1.ThemeC.ATOM]) === null || _x === void 0 ? void 0 : _x.transparency]
                                                        : [],
                                                    _11)
                                            }
                                        });
                                        _12.label = 7;
                                    case 7:
                                        if (!isHidden) {
                                            this_1.plugin.managers.cell.update(newRef, {
                                                model: { structure: structure },
                                            });
                                        }
                                        if (updateInteraction) {
                                            this_1.plugin.managers.cell.traverse(function (cell, repr) {
                                                if (repr.type === types_1.RepresentationType.IntraInteractions) {
                                                    _this.plugin.managers.representation.showGlobalInteraction(undefined, 'lightPlugin.managers.representation.createMolecular');
                                                }
                                            });
                                        }
                                        this_1.plugin.managers.snapshot.event.changed.next({
                                            from: 'repr: createMolecular'
                                        });
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _i = 0, structures_1 = structures;
                        _2.label = 4;
                    case 4:
                        if (!(_i < structures_1.length)) return [3 /*break*/, 7];
                        structure = structures_1[_i];
                        return [5 /*yield**/, _loop_1(structure)];
                    case 5:
                        _2.sent();
                        _2.label = 6;
                    case 6:
                        _i++;
                        return [3 /*break*/, 4];
                    case 7: return [2 /*return*/, uuids];
                    case 8:
                        err_1 = _2.sent();
                        console.log(err_1);
                        return [2 /*return*/, []];
                    case 9:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    RepresentationManager.prototype.updateMolecular = function (props) {
        var _a;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var ref, structure, cell, sourceExpression, newExpression, increasedExpression, increasedElements, atomColorItems, atomType, updateAtomType, _loop_2, this_2, _i, _b, item, _loop_3, this_3, _c, _d, dependencyRef;
            var _e, _f;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_g) {
                ref = props.ref, structure = props.structure;
                cell = this.plugin.managers.cell.get(ref);
                sourceExpression = loci_1.Loci.toExpression(structure_1.Structure.toStructureElementLoci(cell.model.structure));
                newExpression = loci_1.Loci.toExpression(structure_1.Structure.toStructureElementLoci(structure));
                increasedExpression = builder_1.MolScriptBuilder.struct.modifier.exceptBy({
                    0: newExpression,
                    by: sourceExpression
                });
                increasedElements = (0, utils_1.getElementsFromStructure)((0, utils_1.getStructureByStructureQuery)((0, utils_1.getStructureQuery)(structure, increasedExpression)));
                if (increasedElements.length) {
                    atomColorItems = cell.theme.color[types_1.ThemeC.ATOM];
                    if ((atomColorItems === null || atomColorItems === void 0 ? void 0 : atomColorItems.length) === 1) {
                        atomColorItems[0].elementIds
                            ? (_e = atomColorItems[0].elementIds).push.apply(_e, increasedElements) : (atomColorItems[0].elementIds = (0, tslib_1.__spreadArray)([], increasedElements, true));
                    }
                    else {
                        atomColorItems === null || atomColorItems === void 0 ? void 0 : atomColorItems.push((0, tslib_1.__assign)({ elementIds: increasedElements }, this.defaultTheme.color[types_1.ThemeC.ATOM]));
                    }
                    this.plugin.managers.cell.update(ref, {
                        representations: [],
                        model: {},
                        theme: {
                            color: (_f = {},
                                _f[types_1.ThemeC.ATOM] = atomColorItems,
                                _f)
                        }
                    });
                }
                atomType = [
                    types_1.RepresentationType.BallAndStick,
                    types_1.RepresentationType.Stick,
                    types_1.RepresentationType.Line,
                    types_1.RepresentationType.CPK
                ];
                atomType.forEach(function (type) {
                    if (!updateAtomType && cell.representations.has(type)) {
                        updateAtomType = type;
                    }
                });
                _loop_2 = function (item) {
                    var reprType = item[0], repr = item[1];
                    var themeC = Object.keys(types_1.ReprCBasedTheme).find(function (key) {
                        return types_1.ReprCBasedTheme[key].includes(reprType);
                    });
                    var colorItems = cell.theme.color[themeC];
                    // Repr State Cache
                    var loci = repr.state.getLoci();
                    var expression = loci_1.Loci.toExpression(structure_1.Structure.toStructureElementLoci(loci.structure));
                    if (!atomType.includes(reprType) || reprType === updateAtomType) {
                        expression = builder_1.MolScriptBuilder.struct.modifier.union([
                            builder_1.MolScriptBuilder.struct.combinator.merge([
                                increasedExpression,
                                expression
                            ])
                        ]);
                    }
                    var updateStructure = (0, utils_1.getStructureByStructureQuery)((0, utils_1.getStructureQuery)(structure, expression));
                    representation_1.MolecularRepresentation[reprType].update(
                    // Repr State Cache
                    repr.state, updateStructure, this_2.ctx, this_2.createTheme(reprType, structure, {
                        color: { name: 'multi-theme', props: { themes: colorItems } },
                        size: cell.theme.size && ((_a = cell.theme.size[themeC]) === null || _a === void 0 ? void 0 : _a.length) ? cell.theme.size[themeC][0] : this_2.defaultTheme.size[reprType]
                    }));
                    // Repr State Cache
                    repr.state.setState({
                        transparency: this_2.createTransparencyLayers(updateStructure, cell === null || cell === void 0 ? void 0 : cell.theme.transparency[themeC])
                    });
                };
                this_2 = this;
                for (_i = 0, _b = Array.from(cell.representations); _i < _b.length; _i++) {
                    item = _b[_i];
                    _loop_2(item);
                }
                _loop_3 = function (dependencyRef) {
                    var dependencyCell = this_3.plugin.cells.get(dependencyRef);
                    if (dependencyCell) {
                        dependencyCell.representations.forEach(function (representation, type) {
                            if (type === types_1.RepresentationType.IntraInteractions) {
                                _this.plugin.managers.representation.showGlobalInteraction(true, 'lightPlugin.managers.representation.updateMolecular');
                            }
                            if (Object.keys(representation_1.MeasurementRepresentation).includes(type)) {
                                _this.plugin.managers.representation.updateMeasurement({
                                    items: dependencyCell.dependency.on,
                                    ref: dependencyRef
                                });
                            }
                        });
                    }
                };
                this_3 = this;
                for (_c = 0, _d = cell.dependency.by; _c < _d.length; _c++) {
                    dependencyRef = _d[_c];
                    _loop_3(dependencyRef);
                }
                this.plugin.managers.snapshot.event.changed.next({
                    from: 'repr: updateMolecular'
                });
                return [2 /*return*/, cell];
            });
        });
    };
    RepresentationManager.prototype.createMeasurement = function (props) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var type, theme, items, ref, isHidden, locis, _i, items_1, item, structure, representation, newRef;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        type = props.type, theme = props.theme, items = props.items, ref = props.ref, isHidden = props.isHidden;
                        if (!types_1.MeasurementType.has(type)) {
                            console.warn("There is no ".concat(type, " type "));
                            return [2 /*return*/, ''];
                        }
                        locis = [];
                        _i = 0, items_1 = items;
                        _a.label = 1;
                    case 1:
                        if (!(_i < items_1.length)) return [3 /*break*/, 4];
                        item = items_1[_i];
                        return [4 /*yield*/, this.plugin.managers.cell.getStructure(item.ref)];
                    case 2:
                        structure = _a.sent();
                        if (!structure)
                            return [2 /*return*/, ''];
                        locis.push((0, utils_1.getLoci)(structure, item.elementIds));
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, representation_1.MeasurementRepresentation[type].create(locis, this.ctx, props.props, theme)];
                    case 5:
                        representation = _a.sent();
                        newRef = this.plugin.managers.cell.create({
                            representations: [
                                {
                                    state: representation,
                                    isHidden: isHidden !== null && isHidden !== void 0 ? isHidden : false,
                                    type: type
                                }
                            ],
                            model: { loci: locis },
                            dependency: {
                                // on: Array.from(new Set(valid.map((item) => item.ref)))
                                on: items
                            },
                            ref: ref
                        });
                        this.plugin.managers.snapshot.event.changed.next({
                            from: 'repr: createMeasurement'
                        });
                        return [2 /*return*/, newRef];
                }
            });
        });
    };
    RepresentationManager.prototype.updateMeasurement = function (props) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var items, ref, params, cell, valid, locis, _a, type, repr;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        items = props.items, ref = props.ref, params = props.params;
                        cell = this.plugin.cells.get(ref);
                        valid = items.filter(function (item) {
                            return (0, utils_1.getStructureByCell)(_this.plugin.cells.get(item.ref));
                        });
                        locis = valid.map(function (item) {
                            return (0, utils_1.getLoci)((0, utils_1.getStructureByCell)(_this.plugin.cells.get(item.ref)), item.elementIds);
                        });
                        if (!cell) {
                            console.warn("There is no ".concat(ref));
                            return [2 /*return*/, false];
                        }
                        _a = Array.from(cell.representations)[0], type = _a[0], repr = _a[1];
                        if (!type || !repr) {
                            console.error("There is no ".concat(type));
                            return [2 /*return*/, false];
                        }
                        if (!repr.state) return [3 /*break*/, 2];
                        return [4 /*yield*/, representation_1.MeasurementRepresentation[type].update(repr.state, locis, params)];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        this.plugin.managers.cell.update(ref, { model: { loci: locis } });
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RepresentationManager.prototype.createStaticLabel = function (props) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var theme, items, ref, isHidden, locis, _i, items_2, item, structure, representation, newRef;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        theme = props.theme, items = props.items, ref = props.ref, isHidden = props.isHidden;
                        locis = [];
                        _i = 0, items_2 = items;
                        _a.label = 1;
                    case 1:
                        if (!(_i < items_2.length)) return [3 /*break*/, 4];
                        item = items_2[_i];
                        return [4 /*yield*/, this.plugin.managers.cell.getStructure(item.item.ref)];
                    case 2:
                        structure = _a.sent();
                        if (!structure)
                            return [2 /*return*/, ''];
                        locis.push({ loci: (0, utils_1.getLoci)(structure, item.item.elementIds), label: item.label });
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, representation_1.MeasurementRepresentation[types_1.RepresentationType.Label].create(locis, this.ctx, props.props, theme)];
                    case 5:
                        representation = _a.sent();
                        newRef = this.plugin.managers.cell.create({
                            representations: [
                                {
                                    state: representation,
                                    isHidden: isHidden !== null && isHidden !== void 0 ? isHidden : false,
                                    type: types_1.RepresentationType.Label
                                }
                            ],
                            model: { loci: locis.map(function (item) { return item.loci; }) },
                            dependency: {
                                // on: Array.from(new Set(valid.map((item) => item.ref)))
                                on: items.map(function (item) { return item.item; })
                            },
                            ref: ref
                        });
                        this.plugin.managers.snapshot.event.changed.next({
                            from: 'repr: createMeasurement'
                        });
                        return [2 /*return*/, newRef];
                }
            });
        });
    };
    RepresentationManager.prototype.createOther = function (props) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var type, theme, data, ref, _a, isHidden, serverData, params, instance, sourceData, _b, representation, newRef;
            var _c, _d, _e;
            return (0, tslib_1.__generator)(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        type = props.type, theme = props.theme, data = props.data, ref = props.ref, _a = props.isHidden, isHidden = _a === void 0 ? false : _a, serverData = props.serverData, params = props.params;
                        if (!representation_1.OtherRepresentation[type]) {
                            console.warn("There is no ".concat(type, " type "));
                            return [2 /*return*/];
                        }
                        instance = representation_1.OtherRepresentation[type];
                        if (!instance.parse) return [3 /*break*/, 2];
                        return [4 /*yield*/, instance.parse(data, this.plugin)];
                    case 1:
                        _b = _f.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _b = data;
                        _f.label = 3;
                    case 3:
                        sourceData = _b;
                        return [4 /*yield*/, instance.create(sourceData, this.ctx, instance.createTheme
                                ? instance.createTheme(type === types_1.RepresentationType.IsoSurface ? sourceData : data, this.plugin, theme)
                                : undefined, params)];
                    case 4:
                        representation = _f.sent();
                        if (type === types_1.RepresentationType.Surface && (theme === null || theme === void 0 ? void 0 : theme.transparency)) {
                            representation.setState({
                                transparency: this.createTransparencyLayers(sourceData, [
                                    theme === null || theme === void 0 ? void 0 : theme.transparency
                                ])
                            });
                        }
                        newRef = this.plugin.managers.cell.create({
                            representations: [
                                {
                                    state: representation,
                                    isHidden: isHidden,
                                    type: type
                                }
                            ],
                            model: {
                                other: serverData ? { serverData: serverData, data: data } : data
                            },
                            // theme目前是molecular repr的统一逻辑，surface由于不跟着structure的变化而变化，所以放到other中，做特殊处理
                            theme: type === types_1.RepresentationType.Surface
                                ? {
                                    color: (_c = {},
                                        _c[types_1.ThemeC.SURFACE] = (theme === null || theme === void 0 ? void 0 : theme.color) ? [theme === null || theme === void 0 ? void 0 : theme.color] : [],
                                        _c),
                                    transparency: (_d = {},
                                        _d[types_1.ThemeC.SURFACE] = (theme === null || theme === void 0 ? void 0 : theme.transparency)
                                            ? [theme === null || theme === void 0 ? void 0 : theme.transparency]
                                            : [],
                                        _d),
                                    size: (_e = {},
                                        _e[types_1.ThemeC.SURFACE] = (theme === null || theme === void 0 ? void 0 : theme.size) ? [theme === null || theme === void 0 ? void 0 : theme.size] : [],
                                        _e)
                                }
                                : undefined,
                            ref: ref,
                            dependency: type === types_1.RepresentationType.Surface
                                ? {
                                    on: [data]
                                } :
                                type === types_1.RepresentationType.MappingLine ?
                                    { on: data }
                                    : undefined
                        });
                        this.plugin.managers.snapshot.event.changed.next({
                            from: 'repr: createOther'
                        });
                        return [2 /*return*/, newRef];
                }
            });
        });
    };
    RepresentationManager.prototype.updateOther = function (props) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var data, ref, cell, _a, type, repr;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        data = props.data, ref = props.ref;
                        cell = this.plugin.cells.get(ref);
                        if (!cell) {
                            console.warn("There is no ".concat(ref));
                            return [2 /*return*/, false];
                        }
                        _a = Array.from(cell.representations)[0], type = _a[0], repr = _a[1];
                        if (!type || !repr) {
                            console.error("There is no ".concat(type));
                            return [2 /*return*/, false];
                        }
                        // Repr Cache Compatible
                        return [4 /*yield*/, representation_1.OtherRepresentation[type].update(repr.state, data, this.ctx)];
                    case 1:
                        // Repr Cache Compatible
                        _b.sent();
                        this.plugin.managers.cell.update(ref, { model: { other: data } });
                        this.plugin.managers.snapshot.event.changed.next({
                            from: 'repr: updateOther'
                        });
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RepresentationManager.prototype.addMolecularRepr = function (ref, data) {
        var _a;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var elementIds, reprType, isHidden, theme, transparency, cell, cellStructure, reprElementIds, structure, representation;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        elementIds = data.elementIds, reprType = data.reprType, isHidden = data.isHidden, theme = data.theme, transparency = data.transparency;
                        cell = this.plugin.managers.cell.get(ref);
                        cellStructure = (0, utils_1.getStructureByCell)(cell);
                        if (!cell || !cellStructure)
                            return [2 /*return*/];
                        reprElementIds = (0, tslib_1.__spreadArray)([], (elementIds !== null && elementIds !== void 0 ? elementIds : []), true);
                        if (types_1.AtomReprType.has(reprType) && this.showPolarHydrogenOnly) {
                            reprElementIds = (elementIds ? elementIds : (0, utils_1.getElementsFromStructure)(cellStructure)).filter(function (elementId) { return !(0, utils_1.isNonPolarHydrogen)(cellStructure, elementId); });
                        }
                        structure = (0, utils_1.getStructureByElementIds)(cellStructure, reprElementIds, true);
                        return [4 /*yield*/, representation_1.MolecularRepresentation[reprType].create(structure, this.ctx, theme)];
                    case 1:
                        representation = _b.sent();
                        if (transparency) {
                            representation.setState({
                                transparency: this.createTransparencyLayers(structure, transparency)
                            });
                        }
                        if (!isHidden) {
                            (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.add(representation);
                        }
                        cell.representations.set(reprType, {
                            state: representation,
                            isHidden: isHidden,
                            type: reprType
                        });
                        this.plugin.managers.snapshot.event.changed.next({
                            from: 'repr: addMolecularRepr'
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    RepresentationManager.prototype.checkStructuresDisplayed = function (item, reprType) {
        var _a;
        var cell = this.plugin.managers.cell.get(item.ref);
        var structure = (0, utils_1.getStructureByCell)(cell);
        var elementIdSet = new Set((!reprType || types_1.AtomReprType.has(reprType)) && this.showPolarHydrogenOnly ? ((_a = item.elementIds) !== null && _a !== void 0 ? _a : []).filter(function (elementId) { return !(0, utils_1.isNonPolarHydrogen)(structure, elementId); }) : item.elementIds);
        var representations = (reprType ? [cell.representations.get(reprType)] : Array.from(cell.representations.values())).filter(function (repr) { return (repr === null || repr === void 0 ? void 0 : repr.isHidden) !== true && (repr === null || repr === void 0 ? void 0 : repr.state); });
        representations.forEach(function (repr) {
            var _a, _b, _c;
            if (!elementIdSet.size)
                return;
            var loci = (0, utils_1.transformLociToElementLoci)(repr.state.getLoci());
            if (!loci || !((_c = (_b = (_a = loci === null || loci === void 0 ? void 0 : loci.elements) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.unit) === null || _c === void 0 ? void 0 : _c.elements))
                return;
            (0, utils_1.getElementIdsByLoci)(loci).forEach(function (elementId) { return elementIdSet.delete(elementId); });
        });
        return elementIdSet.size === 0;
    };
    RepresentationManager.prototype.setMolecularRepr = function (items, reprType, hideOther, 
    // 展示相互作用力时已有原子级别repr的部分保持原样
    isCoverSameKindRepr, updateInteraction) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        if (isCoverSameKindRepr === void 0) { isCoverSameKindRepr = true; }
        if (updateInteraction === void 0) { updateInteraction = true; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var updatedReprMap, validItems, isAllMatched, themeC, dependencyByRefs, _loop_4, this_4, _i, validItems_1, item, _loop_5, this_5, _t, validItems_2, item, selection, updateRefs, _u, updateRefs_1, dependencyRef, dependencyCell;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_v) {
                switch (_v.label) {
                    case 0:
                        updatedReprMap = new Map();
                        validItems = items.filter(function (item) {
                            return (0, utils_1.getStructureByCell)(_this.plugin.managers.cell.get(item.ref));
                        });
                        isAllMatched = isCoverSameKindRepr
                            ? validItems.every(function (item) { return _this.checkStructuresDisplayed(item, reprType); }
                            // {
                            //   const cell = this.plugin.managers.cell.get(item.ref)
                            //   const representation = cell.representations.get(reprType)
                            //   const structure = getStructureByCell(cell)
                            //   return (
                            //     representation &&
                            //     !representation.isHidden &&
                            //     isRepresentationIntersectElementIds(
                            //       representation.state!,
                            //       AtomReprType.has(reprType) && this.showPolarHydrogenOnly ? (item.elementIds ?? []).filter(elementId => !isNonPolarHydrogen(structure, elementId)) : item.elementIds ?? []
                            //     ) === Intersection.Include
                            //   )
                            // }
                            )
                            : false;
                        themeC = Object.keys(types_1.ReprCBasedTheme).find(function (key) {
                            return types_1.ReprCBasedTheme[key].includes(reprType);
                        });
                        dependencyByRefs = [];
                        if (!isAllMatched) return [3 /*break*/, 5];
                        _loop_4 = function (item) {
                            var cell, representation, colorItems;
                            return (0, tslib_1.__generator)(this, function (_w) {
                                switch (_w.label) {
                                    case 0:
                                        updatedReprMap.set(item.ref, new Set());
                                        cell = this_4.plugin.managers.cell.get(item.ref);
                                        representation = cell.representations.get(reprType);
                                        colorItems = cell.theme.color[themeC];
                                        return [4 /*yield*/, (0, utils_1.removeElementIdsInRepresentation)(representation === null || representation === void 0 ? void 0 : representation.state, (_a = item.elementIds) !== null && _a !== void 0 ? _a : [], reprType, function (structure) {
                                                var _a;
                                                return _this.createTheme(reprType, structure, {
                                                    color: { name: 'multi-theme', props: { themes: colorItems } },
                                                    size: cell.theme.size && ((_a = cell.theme.size[themeC]) === null || _a === void 0 ? void 0 : _a.length) ? cell.theme.size[themeC][0] : _this.defaultTheme.size[reprType]
                                                });
                                            }, function (structure) {
                                                return _this.createTransparencyLayers(structure, cell === null || cell === void 0 ? void 0 : cell.theme.transparency[themeC]);
                                            })];
                                    case 1:
                                        _w.sent();
                                        (_b = updatedReprMap.get(item.ref)) === null || _b === void 0 ? void 0 : _b.add(reprType);
                                        if (cell.dependency.by.length) {
                                            dependencyByRefs.push.apply(dependencyByRefs, cell.dependency.by);
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_4 = this;
                        _i = 0, validItems_1 = validItems;
                        _v.label = 1;
                    case 1:
                        if (!(_i < validItems_1.length)) return [3 /*break*/, 4];
                        item = validItems_1[_i];
                        return [5 /*yield**/, _loop_4(item)];
                    case 2:
                        _v.sent();
                        _v.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 9];
                    case 5:
                        _loop_5 = function (item) {
                            var cell, representation, sourceStructure, colorItems, colorElementIds, withThemeElementIds, withoutThemeElementIds, switchElementIds, _loop_6, _x, _y, _z, r, switchElementIdsSet, existedElementIds, newStructure, transparency, newStructure, transparency, newRepr;
                            var _0;
                            return (0, tslib_1.__generator)(this, function (_1) {
                                switch (_1.label) {
                                    case 0:
                                        updatedReprMap.set(item.ref, new Set());
                                        cell = this_5.plugin.managers.cell.get(item.ref);
                                        representation = cell.representations.get(reprType);
                                        sourceStructure = (0, utils_1.getStructureByCell)(cell);
                                        colorItems = cell.theme.color[themeC];
                                        colorElementIds = [];
                                        colorItems === null || colorItems === void 0 ? void 0 : colorItems.forEach(function (item) {
                                            var _a;
                                            colorElementIds.push.apply(colorElementIds, (_a = item.elementIds) !== null && _a !== void 0 ? _a : []);
                                        });
                                        withThemeElementIds = new Set(colorElementIds);
                                        withoutThemeElementIds = ((_c = item.elementIds) !== null && _c !== void 0 ? _c : []).filter(function (elementId) { return !withThemeElementIds.has(elementId); });
                                        if (withoutThemeElementIds.length) {
                                            colorItems === null || colorItems === void 0 ? void 0 : colorItems.push((0, tslib_1.__assign)({ elementIds: withoutThemeElementIds }, this_5.defaultTheme.color[themeC]));
                                            cell.theme.color = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, cell.theme.color), (_0 = {}, _0[themeC] = colorItems, _0));
                                        }
                                        switchElementIds = [];
                                        if (!hideOther) return [3 /*break*/, 4];
                                        _loop_6 = function (r) {
                                            var intersectElementIds_1;
                                            return (0, tslib_1.__generator)(this, function (_2) {
                                                switch (_2.label) {
                                                    case 0:
                                                        if (!isCoverSameKindRepr &&
                                                            r.type !== types_1.RepresentationType.Ribbon &&
                                                            reprType !== types_1.RepresentationType.Ribbon) {
                                                            intersectElementIds_1 = (0, utils_1.overlapRepresentationByElementIds)(
                                                            // Repr Cache Compatible
                                                            r.state, (_d = item.elementIds) !== null && _d !== void 0 ? _d : []);
                                                            if (intersectElementIds_1.length) {
                                                                item.elementIds = (_e = item.elementIds) === null || _e === void 0 ? void 0 : _e.filter(function (elementId) { return !intersectElementIds_1.includes(elementId); });
                                                                return [2 /*return*/, "continue"];
                                                            }
                                                        }
                                                        if (r.type === reprType ||
                                                            r.type === types_1.RepresentationType.Ribbon ||
                                                            r.isHidden ||
                                                            (0, utils_1.isRepresentationIntersectElementIds)(
                                                            // Repr Cache Compatible
                                                            r.state, (_f = item.elementIds) !== null && _f !== void 0 ? _f : []) === types_1.Intersection.Not)
                                                            return [2 /*return*/, "continue"];
                                                        switchElementIds.push.apply(switchElementIds, (0, utils_1.overlapRepresentationByElementIds)(r === null || r === void 0 ? void 0 : r.state, (_g = item.elementIds) !== null && _g !== void 0 ? _g : []));
                                                        return [4 /*yield*/, (0, utils_1.removeElementIdsInRepresentation)(r === null || r === void 0 ? void 0 : r.state, (_h = item.elementIds) !== null && _h !== void 0 ? _h : [], r === null || r === void 0 ? void 0 : r.type, function (structure) {
                                                                var _a;
                                                                return _this.createTheme(r === null || r === void 0 ? void 0 : r.type, structure, {
                                                                    color: { name: 'multi-theme', props: { themes: colorItems } },
                                                                    size: cell.theme.size && ((_a = cell.theme.size[themeC]) === null || _a === void 0 ? void 0 : _a.length) ? cell.theme.size[themeC][0] : _this.defaultTheme.size[r === null || r === void 0 ? void 0 : r.type]
                                                                });
                                                            }, function (structure) {
                                                                return _this.createTransparencyLayers(structure, cell === null || cell === void 0 ? void 0 : cell.theme.transparency[themeC]);
                                                            })];
                                                    case 1:
                                                        _2.sent();
                                                        (_j = updatedReprMap.get(item.ref)) === null || _j === void 0 ? void 0 : _j.add(r.type);
                                                        return [2 /*return*/];
                                                }
                                            });
                                        };
                                        _x = 0, _y = Array.from(cell.representations);
                                        _1.label = 1;
                                    case 1:
                                        if (!(_x < _y.length)) return [3 /*break*/, 4];
                                        _z = _y[_x], r = _z[1];
                                        return [5 /*yield**/, _loop_6(r)];
                                    case 2:
                                        _1.sent();
                                        _1.label = 3;
                                    case 3:
                                        _x++;
                                        return [3 /*break*/, 1];
                                    case 4:
                                        switchElementIdsSet = new Set(switchElementIds);
                                        if (!representation) return [3 /*break*/, 6];
                                        existedElementIds = 
                                        // Repr Cache Compatible
                                        (_k = (0, utils_1.getElementIdsFromRepresentation)(representation.state)) !== null && _k !== void 0 ? _k : [];
                                        newStructure = (0, utils_1.getStructureByElementIds)(sourceStructure, Array.from(new Set(existedElementIds.concat((types_1.AtomReprType.has(reprType) && this_5.showPolarHydrogenOnly ? ((_l = item.elementIds) !== null && _l !== void 0 ? _l : []).filter(function (elementId) { return switchElementIdsSet.has(elementId) || !(0, utils_1.isNonPolarHydrogen)(sourceStructure, elementId); }) : (_m = item.elementIds) !== null && _m !== void 0 ? _m : [])))));
                                        transparency = this_5.createTransparencyLayers(newStructure, cell === null || cell === void 0 ? void 0 : cell.theme.transparency[themeC]);
                                        return [4 /*yield*/, representation_1.MolecularRepresentation[reprType].update(representation === null || representation === void 0 ? void 0 : representation.state, newStructure, this_5.ctx, this_5.createTheme(reprType, newStructure, {
                                                color: { name: 'multi-theme', props: { themes: colorItems } },
                                                size: cell.theme.size && ((_o = cell.theme.size[themeC]) === null || _o === void 0 ? void 0 : _o.length) ? cell.theme.size[themeC][0] : this_5.defaultTheme.size[reprType]
                                            }))];
                                    case 5:
                                        _1.sent();
                                        (_p = updatedReprMap.get(item.ref)) === null || _p === void 0 ? void 0 : _p.add(reprType);
                                        // Repr Cache Compatible
                                        representation.state.setState({
                                            transparency: transparency
                                        });
                                        return [3 /*break*/, 8];
                                    case 6:
                                        newStructure = (0, utils_1.getStructureByElementIds)(sourceStructure, types_1.AtomReprType.has(reprType) && this_5.showPolarHydrogenOnly ? item.elementIds.filter(function (elementId) { return switchElementIdsSet.has(elementId) || !(0, utils_1.isNonPolarHydrogen)(sourceStructure, elementId); }) : item.elementIds);
                                        transparency = this_5.createTransparencyLayers(cell === null || cell === void 0 ? void 0 : cell.model.structure, cell === null || cell === void 0 ? void 0 : cell.theme.transparency[themeC]);
                                        return [4 /*yield*/, representation_1.MolecularRepresentation[reprType].create(newStructure, this_5.plugin.managers.representation.ctx, this_5.createTheme(reprType, newStructure, {
                                                color: { name: 'multi-theme', props: { themes: colorItems } },
                                                size: cell.theme.size && ((_q = cell.theme.size[themeC]) === null || _q === void 0 ? void 0 : _q.length) ? cell.theme.size[themeC][0] : this_5.defaultTheme.size[reprType]
                                            }))];
                                    case 7:
                                        newRepr = _1.sent();
                                        (_r = updatedReprMap.get(item.ref)) === null || _r === void 0 ? void 0 : _r.add(reprType);
                                        (_s = this_5.plugin.canvas3d) === null || _s === void 0 ? void 0 : _s.add(newRepr);
                                        newRepr.setState({
                                            transparency: transparency
                                        });
                                        cell.representations.set(reprType, {
                                            state: newRepr,
                                            isHidden: false,
                                            type: reprType
                                        });
                                        _1.label = 8;
                                    case 8:
                                        if (cell.dependency.by.length) {
                                            dependencyByRefs.push.apply(dependencyByRefs, cell.dependency.by);
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_5 = this;
                        _t = 0, validItems_2 = validItems;
                        _v.label = 6;
                    case 6:
                        if (!(_t < validItems_2.length)) return [3 /*break*/, 9];
                        item = validItems_2[_t];
                        return [5 /*yield**/, _loop_5(item)];
                    case 7:
                        _v.sent();
                        _v.label = 8;
                    case 8:
                        _t++;
                        return [3 /*break*/, 6];
                    case 9:
                        selection = this.plugin.managers.selection.structure.getSelection();
                        updatedReprMap.forEach(function (typeSet, ref) {
                            var _a;
                            if (!typeSet.size)
                                return;
                            var cell = _this.plugin.cells.get(ref);
                            var cellSelection = (_a = selection[ref]) !== null && _a !== void 0 ? _a : [];
                            typeSet.forEach(function (type) {
                                var _a;
                                var repr = cell === null || cell === void 0 ? void 0 : cell.representations.get(type);
                                if (!repr)
                                    return;
                                var loci = 
                                // Repr Cache Compatible
                                (0, utils_1.getLoci)((0, utils_1.getStructureFromRepresentation)(repr.state), cellSelection);
                                (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark({
                                    loci: loci,
                                    repr: repr.state
                                }, marker_action_1.MarkerAction.Select);
                            });
                        });
                        updateRefs = Array.from(new Set(dependencyByRefs).values());
                        for (_u = 0, updateRefs_1 = updateRefs; _u < updateRefs_1.length; _u++) {
                            dependencyRef = updateRefs_1[_u];
                            dependencyCell = this.plugin.cells.get(dependencyRef);
                            if (dependencyCell) {
                                dependencyCell.representations.forEach(function (representation, type) {
                                    if (type === types_1.RepresentationType.IntraInteractions && updateInteraction) {
                                        _this.plugin.managers.representation.showGlobalInteraction(true, 'lightPlugin.managers.representation.setMolecularRepr');
                                    }
                                });
                            }
                        }
                        this.plugin.managers.snapshot.event.changed.next({
                            from: 'repr: setMolecularRepr'
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    RepresentationManager.prototype.showOrHideHs = function (isShowPolar, isShowNonPolar, items) {
        var _this = this;
        var selection = items !== null && items !== void 0 ? items : this.plugin.managers.selection.structure.getSelectionCellItems();
        var dependencyByRefs = [];
        selection.forEach(function (item) {
            var cell = _this.plugin.cells.get(item.ref);
            if (!cell)
                return;
            var structure = (0, utils_1.getStructureByCell)(cell);
            if (!structure)
                return;
            if (!item.elementIds) {
                Object.assign(item, { elementIds: (0, utils_1.getElementsFromStructure)(structure) });
            }
            var hydrogenType = item.elementIds.map(function (elementId) {
                return (0, utils_1.getHydrogenType)(structure, elementId);
            });
            var reprAtoms = new Map();
            var reprElementIds = new Map();
            // 获取每个repr展示着的原子id
            cell.representations.forEach(function (repr, reprType) {
                if ([
                    types_1.RepresentationType.BallAndStick,
                    types_1.RepresentationType.CPK,
                    types_1.RepresentationType.Stick,
                    types_1.RepresentationType.Line
                ].includes(reprType)) {
                    // Repr Cache Compatible
                    var loci = (0, utils_1.transformLociToElementLoci)(repr.state.getLoci());
                    if (!loci)
                        return;
                    var elementIds = (0, utils_1.getElementIdsByLoci)(loci);
                    reprElementIds.set(reprType, (0, tslib_1.__spreadArray)([], elementIds, true));
                    elementIds.forEach(function (elementId) {
                        reprAtoms.set(elementId, reprType);
                    });
                }
            });
            // 展示策略： 展示所有选中且展示着的重原子相连的氢，展示所有选中的且与其相连的重原子也展示着的氢原子
            // 隐藏策略： 隐藏所有选中的氢原子
            var hideAtoms = new Map();
            var showAtoms = new Map();
            hydrogenType.forEach(function (variant, index) {
                var _a;
                if (!item.elementIds)
                    return;
                var elementId = item.elementIds[index];
                var unit = structure.units.filter(function (item) { return int_1.SortedArray.indexOf(item.elements, elementId) !== -1; })[0];
                if (((!isShowNonPolar && variant === types_1.HydrogenVariant.NonPolar) ||
                    (!isShowPolar && variant === types_1.HydrogenVariant.Polar)) &&
                    reprAtoms.has(elementId)) {
                    if (hideAtoms.has(reprAtoms.get(elementId))) {
                        (_a = hideAtoms.get(reprAtoms.get(elementId))) === null || _a === void 0 ? void 0 : _a.add(elementId);
                    }
                    else {
                        hideAtoms.set(reprAtoms.get(elementId), new Set([elementId]));
                    }
                    return;
                }
                if ((!isShowNonPolar && variant === types_1.HydrogenVariant.ConnectNonPolar) ||
                    (!isShowPolar && variant === types_1.HydrogenVariant.ConnectPolar)) {
                    (0, util_1.eachBondedAtom)(structure, unit, unit.elements.indexOf(elementId), function (unit, index) {
                        var _a;
                        if (unit.model.atomicHierarchy.derived.atom.atomicNumber[unit.elements[index]] === 1 &&
                            reprAtoms.has(unit.elements[index])) {
                            if (hideAtoms.has(reprAtoms.get(elementId))) {
                                (_a = hideAtoms
                                    .get(reprAtoms.get(elementId))) === null || _a === void 0 ? void 0 : _a.add(unit.elements[index]);
                            }
                            else {
                                hideAtoms.set(reprAtoms.get(elementId), new Set([unit.elements[index]]));
                            }
                        }
                    });
                }
                if (((isShowNonPolar && variant === types_1.HydrogenVariant.NonPolar) ||
                    (isShowPolar && variant === types_1.HydrogenVariant.Polar)) &&
                    !reprAtoms.has(elementId)) {
                    (0, util_1.eachBondedAtom)(structure, unit, unit.elements.indexOf(elementId), function (unit, index) {
                        var _a;
                        if (unit.model.atomicHierarchy.derived.atom.atomicNumber[unit.elements[index]] !== 1 &&
                            reprAtoms.has(unit.elements[index])) {
                            if (showAtoms.has(reprAtoms.get(unit.elements[index]))) {
                                (_a = showAtoms
                                    .get(reprAtoms.get(unit.elements[index]))) === null || _a === void 0 ? void 0 : _a.add(elementId);
                            }
                            else {
                                showAtoms.set(reprAtoms.get(unit.elements[index]), new Set([elementId]));
                            }
                        }
                    });
                    return;
                }
                if (((isShowNonPolar && variant === types_1.HydrogenVariant.ConnectNonPolar) ||
                    (isShowPolar && variant === types_1.HydrogenVariant.ConnectPolar)) &&
                    reprAtoms.has(elementId)) {
                    (0, util_1.eachBondedAtom)(structure, unit, unit.elements.indexOf(elementId), function (unit, index) {
                        var _a;
                        if (unit.model.atomicHierarchy.derived.atom.atomicNumber[unit.elements[index]] === 1 &&
                            !reprAtoms.has(unit.elements[index])) {
                            if (showAtoms.has(reprAtoms.get(elementId))) {
                                (_a = showAtoms
                                    .get(reprAtoms.get(elementId))) === null || _a === void 0 ? void 0 : _a.add(unit.elements[index]);
                            }
                            else {
                                showAtoms.set(reprAtoms.get(elementId), new Set([unit.elements[index]]));
                            }
                        }
                    });
                }
            });
            cell.representations.forEach(function (repr, reprType) {
                var _a;
                if ([
                    types_1.RepresentationType.BallAndStick,
                    types_1.RepresentationType.CPK,
                    types_1.RepresentationType.Stick,
                    types_1.RepresentationType.Line
                ].includes(reprType)) {
                    var isUpdate = false;
                    var elementIds = reprElementIds.get(reprType);
                    if (hideAtoms.has(reprType) && hideAtoms.get(reprType).size > 0) {
                        var reprHideAtoms_1 = hideAtoms.get(reprType);
                        elementIds = elementIds === null || elementIds === void 0 ? void 0 : elementIds.filter(function (elementId) { return !reprHideAtoms_1.has(elementId); });
                        isUpdate = true;
                    }
                    if (showAtoms.has(reprType) && showAtoms.get(reprType).size > 0) {
                        var reprShowAtoms = showAtoms.get(reprType);
                        elementIds = Array.from(new Set((0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], Array.from(reprShowAtoms.values()), true), elementIds, true)));
                        isUpdate = true;
                    }
                    if (isUpdate) {
                        var updateStructure = (0, utils_1.getStructureByElementIds)(structure, elementIds);
                        var colorItems = cell.theme.color[types_1.ThemeC.ATOM];
                        representation_1.MolecularRepresentation[reprType].update(
                        // Repr Cache Compatible
                        repr.state, updateStructure, _this.ctx, _this.createTheme(reprType, updateStructure, {
                            color: { name: 'multi-theme', props: { themes: colorItems } },
                            size: cell.theme.size && ((_a = cell.theme.size[types_1.ThemeC.ATOM]) === null || _a === void 0 ? void 0 : _a.length) ? cell.theme.size[types_1.ThemeC.ATOM][0] : _this.defaultTheme.size[reprType]
                        }));
                    }
                }
            });
            if (cell.dependency.by.length) {
                dependencyByRefs.push.apply(dependencyByRefs, cell.dependency.by);
            }
        });
        var updateRefs = Array.from(new Set(dependencyByRefs).values());
        for (var _i = 0, updateRefs_2 = updateRefs; _i < updateRefs_2.length; _i++) {
            var dependencyRef = updateRefs_2[_i];
            var dependencyCell = this.plugin.cells.get(dependencyRef);
            if (dependencyCell) {
                dependencyCell.representations.forEach(function (representation, type) {
                    if (type === types_1.RepresentationType.IntraInteractions) {
                        _this.plugin.managers.representation.showGlobalInteraction(true, 'lightPlugin.managers.representation.showOrHideHs');
                    }
                });
            }
        }
    };
    RepresentationManager.prototype.redraw = function () {
        var _this = this;
        if (!this.plugin.canvas3d)
            return;
        this.plugin.canvas3d.clear();
        Array.from(this.plugin.cells.values()).forEach(function (cell) {
            cell.representations.forEach(function (repr) {
                var _a;
                if (repr.isHidden !== true && repr.state) {
                    (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.add(repr.state);
                }
            });
        });
    };
    return RepresentationManager;
}(interactions_1.RepresentationInteractions));
exports.RepresentationManager = RepresentationManager;
//# sourceMappingURL=index.js.map