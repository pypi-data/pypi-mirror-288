"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SurfaceRepr = void 0;
var tslib_1 = require("tslib");
var types_1 = require("../types");
var molecular_surface_1 = require("../../mol-repr/structure/representation/molecular-surface");
var structure_1 = require("../../mol-model/structure");
var utils_1 = require("../utils");
exports.SurfaceRepr = {
    parse: function (item, plugin) {
        var _a;
        var cell = plugin.managers.cell.get(item.ref);
        var structure = (0, utils_1.getStructureByCell)(cell);
        if (!structure)
            return structure_1.Structure.Empty;
        return (0, utils_1.getStructureByElementIds)(structure, (_a = item.elementIds) !== null && _a !== void 0 ? _a : [], true);
    },
    createTheme: function (item, plugin, theme) {
        return plugin.managers.representation.createTheme(types_1.RepresentationType.Surface, this.parse(item, plugin), theme);
    },
    create: function (structure, 
    // item: CellItem,
    ctx, theme) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var repr;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        repr = molecular_surface_1.MolecularSurfaceRepresentationProvider.factory(ctx, molecular_surface_1.MolecularSurfaceRepresentationProvider.getParams);
                        repr.setTheme(theme !== null && theme !== void 0 ? theme : {
                            color: ctx.colorThemeRegistry.create('element-symbol', {
                                structure: structure
                            }),
                            size: ctx.sizeThemeRegistry.create('physical', {
                                structure: structure
                            })
                        });
                        return [4 /*yield*/, repr
                                .createOrUpdate((0, tslib_1.__assign)((0, tslib_1.__assign)({}, molecular_surface_1.MolecularSurfaceRepresentationProvider.defaultValues), { quality: 'auto' }), structure)
                                .run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, repr];
                }
            });
        });
    },
    update: function (representation, structure, ctx, theme) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        representation.setTheme(theme !== null && theme !== void 0 ? theme : {
                            color: ctx.colorThemeRegistry.create('element-symbol', {
                                structure: structure
                            }),
                            size: ctx.sizeThemeRegistry.create('physical', {
                                structure: structure
                            })
                        });
                        return [4 /*yield*/, representation.createOrUpdate({}, structure).run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
};
//# sourceMappingURL=surface.js.map