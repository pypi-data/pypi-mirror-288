"use strict";
/**
 * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEmptySubstance = exports.createSubstance = exports.clearSubstance = exports.applySubstanceMaterial = void 0;
var mol_util_1 = require("../../mol-util");
var linear_algebra_1 = require("../../mol-math/linear-algebra");
var util_1 = require("../../mol-gl/renderable/util");
var texture_1 = require("../../mol-gl/webgl/texture");
var material_1 = require("../../mol-util/material");
function applySubstanceMaterial(array, start, end, material) {
    for (var i = start; i < end; ++i) {
        material_1.Material.toArray(material, array, i * 4);
        array[i * 4 + 3] = 255;
    }
    return true;
}
exports.applySubstanceMaterial = applySubstanceMaterial;
function clearSubstance(array, start, end) {
    array.fill(0, start * 4, end * 4);
    return true;
}
exports.clearSubstance = clearSubstance;
function createSubstance(count, substanceData) {
    var substance = (0, util_1.createTextureImage)(Math.max(1, count), 4, Uint8Array, substanceData && substanceData.tSubstance.ref.value.array);
    if (substanceData) {
        mol_util_1.ValueCell.update(substanceData.tSubstance, substance);
        mol_util_1.ValueCell.update(substanceData.uSubstanceTexDim, linear_algebra_1.Vec2.create(substance.width, substance.height));
        mol_util_1.ValueCell.updateIfChanged(substanceData.dSubstance, count > 0);
        return substanceData;
    }
    else {
        return {
            tSubstance: mol_util_1.ValueCell.create(substance),
            uSubstanceTexDim: mol_util_1.ValueCell.create(linear_algebra_1.Vec2.create(substance.width, substance.height)),
            dSubstance: mol_util_1.ValueCell.create(count > 0),
            tSubstanceGrid: mol_util_1.ValueCell.create((0, texture_1.createNullTexture)()),
            uSubstanceGridDim: mol_util_1.ValueCell.create(linear_algebra_1.Vec3.create(1, 1, 1)),
            uSubstanceGridTransform: mol_util_1.ValueCell.create(linear_algebra_1.Vec4.create(0, 0, 0, 1)),
            dSubstanceType: mol_util_1.ValueCell.create('groupInstance')
        };
    }
}
exports.createSubstance = createSubstance;
var emptySubstanceTexture = { array: new Uint8Array(4), width: 1, height: 1 };
function createEmptySubstance(substanceData) {
    if (substanceData) {
        mol_util_1.ValueCell.update(substanceData.tSubstance, emptySubstanceTexture);
        mol_util_1.ValueCell.update(substanceData.uSubstanceTexDim, linear_algebra_1.Vec2.create(1, 1));
        return substanceData;
    }
    else {
        return {
            tSubstance: mol_util_1.ValueCell.create(emptySubstanceTexture),
            uSubstanceTexDim: mol_util_1.ValueCell.create(linear_algebra_1.Vec2.create(1, 1)),
            dSubstance: mol_util_1.ValueCell.create(false),
            tSubstanceGrid: mol_util_1.ValueCell.create((0, texture_1.createNullTexture)()),
            uSubstanceGridDim: mol_util_1.ValueCell.create(linear_algebra_1.Vec3.create(1, 1, 1)),
            uSubstanceGridTransform: mol_util_1.ValueCell.create(linear_algebra_1.Vec4.create(0, 0, 0, 1)),
            dSubstanceType: mol_util_1.ValueCell.create('groupInstance')
        };
    }
}
exports.createEmptySubstance = createEmptySubstance;
//# sourceMappingURL=substance-data.js.map