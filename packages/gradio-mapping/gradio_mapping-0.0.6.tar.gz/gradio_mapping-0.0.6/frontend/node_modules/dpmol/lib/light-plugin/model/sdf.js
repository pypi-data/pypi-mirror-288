"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdfModel = void 0;
var tslib_1 = require("tslib");
var structure_1 = require("../../mol-model/structure/structure/structure");
var parser_1 = require("../../mol-io/reader/sdf/parser");
var sdf_1 = require("../../mol-model-formats/structure/sdf");
var writer_1 = require("../utils/writer");
var utils_1 = require("../utils");
exports.SdfModel = {
    parse: function (data) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var structures, items, _i, items_1, item, parsed, _a, _b, value, model, structure;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!data.trim())
                            return [2 /*return*/, [(0, utils_1.createEmptyStructure)()]];
                        structures = [];
                        items = (0, writer_1.splitSdfContent)(data);
                        _i = 0, items_1 = items;
                        _c.label = 1;
                    case 1:
                        if (!(_i < items_1.length)) return [3 /*break*/, 7];
                        item = items_1[_i];
                        return [4 /*yield*/, (0, parser_1.parseSdf)(item).run()];
                    case 2:
                        parsed = _c.sent();
                        if (parsed.isError)
                            throw parsed;
                        _a = 0, _b = parsed.result.compounds;
                        _c.label = 3;
                    case 3:
                        if (!(_a < _b.length)) return [3 /*break*/, 6];
                        value = _b[_a];
                        return [4 /*yield*/, (0, sdf_1.trajectoryFromSdf)(value).run()];
                    case 4:
                        model = _c.sent();
                        structure = structure_1.Structure.ofModel(model.representative);
                        structures.push(structure);
                        _c.label = 5;
                    case 5:
                        _a++;
                        return [3 /*break*/, 3];
                    case 6:
                        _i++;
                        return [3 /*break*/, 1];
                    case 7: return [2 /*return*/, structures];
                }
            });
        });
    }
};
//# sourceMappingURL=sdf.js.map