"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RibbonRepr = void 0;
var tslib_1 = require("tslib");
var secondary_structure_1 = require("../../../mol-model-props/computed/secondary-structure");
var synchronous_1 = require("../../../mol-task/execution/synchronous");
var assets_1 = require("../../../mol-util/assets");
var cartoon_1 = require("../../../mol-repr/structure/representation/cartoon");
exports.RibbonRepr = {
    create: function (structure, ctx, theme) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var representation;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!structure.elementCount) return [3 /*break*/, 2];
                        return [4 /*yield*/, secondary_structure_1.SecondaryStructureProvider.attach({ runtime: synchronous_1.SyncRuntimeContext, assetManager: new assets_1.AssetManager() }, structure)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        representation = cartoon_1.CartoonRepresentationProvider.factory(ctx, cartoon_1.CartoonRepresentationProvider.getParams);
                        representation.setTheme(theme !== null && theme !== void 0 ? theme : {
                            color: ctx.colorThemeRegistry.create('element-symbol', {
                                structure: structure
                            }),
                            size: ctx.sizeThemeRegistry.create('uniform', { structure: structure })
                        });
                        return [4 /*yield*/, representation
                                .createOrUpdate((0, tslib_1.__assign)((0, tslib_1.__assign)({}, cartoon_1.CartoonRepresentationProvider.defaultValues), { quality: 'auto' }), structure)
                                .run()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, representation];
                }
            });
        });
    },
    update: function (representation, structure, ctx, theme) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        representation.setTheme(theme !== null && theme !== void 0 ? theme : {
                            color: ctx.colorThemeRegistry.create('element-symbol', {
                                structure: structure
                            }),
                            size: ctx.sizeThemeRegistry.create('uniform', { structure: structure })
                        });
                        if (!structure.elementCount) return [3 /*break*/, 2];
                        return [4 /*yield*/, secondary_structure_1.SecondaryStructureProvider.attach({ runtime: synchronous_1.SyncRuntimeContext, assetManager: new assets_1.AssetManager() }, structure)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, representation.createOrUpdate({}, structure).run()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
};
//# sourceMappingURL=ribbon.js.map