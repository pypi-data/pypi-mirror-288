import { RepresentationContext, RepresentationType } from '../types';
import { Representation } from '../../mol-repr/representation';
import { Coordinates } from '../../mol-model/structure/coordinates/coordinates';
import { Model } from '../../mol-model/structure/model/model';
import { Structure } from '../../mol-model/structure/structure/structure';
import { Trajectory } from '../../mol-model/structure/trajectory';
export declare const TrajectoryRepr: {
    createByTrajectory: (data: {
        trajectory: Trajectory;
        frameIndex: number;
    }, ctx: RepresentationContext) => Promise<{
        model: Trajectory;
        reprs: ({
            state: Representation<Structure, {
                sizeFactor: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                visuals: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"polymer-trace" | "polymer-gap" | "nucleotide-ring" | "nucleotide-block" | "direction-wedge">;
                bumpFrequency: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                unitKinds: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"spheres" | "gaussians" | "atomic">;
                includeParent: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                doubleSided: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                flipSided: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                flatShaded: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                ignoreLight: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                xrayShaded: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                bumpAmplitude: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                alpha: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                quality: import("../../mol-util/param-definition").ParamDefinition.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
                material: import("../../mol-util/param-definition").ParamDefinition.Group<import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                    metalness: number;
                    roughness: number;
                    bumpiness: number;
                }>>;
                clip: import("../../mol-util/param-definition").ParamDefinition.Group<import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                    variant: import("../../mol-util/clip").Clip.Variant;
                    objects: import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                        type: any;
                        invert: any;
                        position: any;
                        rotation: any;
                        scale: any;
                    }>[];
                }>>;
                radialSegments: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                detail: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                aspectRatio: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                arrowFactor: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                tubularHelices: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                helixProfile: import("../../mol-util/param-definition").ParamDefinition.Select<"square" | "elliptical" | "rounded">;
                linearSegments: import("../../mol-util/param-definition").ParamDefinition.Numeric;
            }, import("../../mol-repr/structure/representation").StructureRepresentationState>;
            type: RepresentationType;
        } | {
            state: Representation<Structure, {
                includeParent: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                unitKinds: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"spheres" | "gaussians" | "atomic">;
                sizeFactor: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                sizeAspectRatio: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                visuals: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"element-sphere" | "intra-bond" | "inter-bond" | "charge-text">;
                bumpFrequency: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                tryUseImpostor: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                adjustCylinderLength: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                includeTypes: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"covalent" | "metal-coordination" | "hydrogen-bond" | "disulfide" | "aromatic" | "computed">;
                excludeTypes: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"covalent" | "metal-coordination" | "hydrogen-bond" | "disulfide" | "aromatic" | "computed">;
                ignoreHydrogens: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                aromaticBonds: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                multipleBonds: import("../../mol-util/param-definition").ParamDefinition.Select<"offset" | "off" | "symmetric">;
                linkScale: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                linkSpacing: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                linkCap: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                aromaticScale: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                aromaticSpacing: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                aromaticDashCount: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                dashCount: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                dashScale: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                dashCap: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                stubCap: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                radialSegments: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                doubleSided: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                ignoreLight: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                xrayShaded: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                bumpAmplitude: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                alpha: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                quality: import("../../mol-util/param-definition").ParamDefinition.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
                material: import("../../mol-util/param-definition").ParamDefinition.Group<import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                    metalness: number;
                    roughness: number;
                    bumpiness: number;
                }>>;
                clip: import("../../mol-util/param-definition").ParamDefinition.Group<import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                    variant: import("../../mol-util/clip").Clip.Variant;
                    objects: import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                        type: any;
                        invert: any;
                        position: any;
                        rotation: any;
                        scale: any;
                    }>[];
                }>>;
                flipSided: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                flatShaded: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                traceOnly: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                detail: import("../../mol-util/param-definition").ParamDefinition.Numeric;
            }, import("../../mol-repr/structure/representation").StructureRepresentationState>;
            type: RepresentationType;
        })[];
    }>;
    create: (data: {
        model: Model;
        coordinates: Coordinates;
        frameIndex: number;
    }, ctx: RepresentationContext) => Promise<{
        model: Trajectory;
        reprs: ({
            state: Representation<Structure, {
                sizeFactor: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                visuals: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"polymer-trace" | "polymer-gap" | "nucleotide-ring" | "nucleotide-block" | "direction-wedge">;
                bumpFrequency: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                unitKinds: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"spheres" | "gaussians" | "atomic">;
                includeParent: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                doubleSided: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                flipSided: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                flatShaded: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                ignoreLight: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                xrayShaded: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                bumpAmplitude: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                alpha: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                quality: import("../../mol-util/param-definition").ParamDefinition.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
                material: import("../../mol-util/param-definition").ParamDefinition.Group<import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                    metalness: number;
                    roughness: number;
                    bumpiness: number;
                }>>;
                clip: import("../../mol-util/param-definition").ParamDefinition.Group<import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                    variant: import("../../mol-util/clip").Clip.Variant;
                    objects: import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                        type: any;
                        invert: any;
                        position: any;
                        rotation: any;
                        scale: any;
                    }>[];
                }>>;
                radialSegments: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                detail: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                aspectRatio: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                arrowFactor: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                tubularHelices: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                helixProfile: import("../../mol-util/param-definition").ParamDefinition.Select<"square" | "elliptical" | "rounded">;
                linearSegments: import("../../mol-util/param-definition").ParamDefinition.Numeric;
            }, import("../../mol-repr/structure/representation").StructureRepresentationState>;
            type: RepresentationType;
        } | {
            state: Representation<Structure, {
                includeParent: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                unitKinds: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"spheres" | "gaussians" | "atomic">;
                sizeFactor: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                sizeAspectRatio: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                visuals: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"element-sphere" | "intra-bond" | "inter-bond" | "charge-text">;
                bumpFrequency: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                tryUseImpostor: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                adjustCylinderLength: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                includeTypes: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"covalent" | "metal-coordination" | "hydrogen-bond" | "disulfide" | "aromatic" | "computed">;
                excludeTypes: import("../../mol-util/param-definition").ParamDefinition.MultiSelect<"covalent" | "metal-coordination" | "hydrogen-bond" | "disulfide" | "aromatic" | "computed">;
                ignoreHydrogens: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                aromaticBonds: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                multipleBonds: import("../../mol-util/param-definition").ParamDefinition.Select<"offset" | "off" | "symmetric">;
                linkScale: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                linkSpacing: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                linkCap: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                aromaticScale: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                aromaticSpacing: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                aromaticDashCount: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                dashCount: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                dashScale: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                dashCap: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                stubCap: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                radialSegments: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                doubleSided: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                ignoreLight: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                xrayShaded: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                bumpAmplitude: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                alpha: import("../../mol-util/param-definition").ParamDefinition.Numeric;
                quality: import("../../mol-util/param-definition").ParamDefinition.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
                material: import("../../mol-util/param-definition").ParamDefinition.Group<import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                    metalness: number;
                    roughness: number;
                    bumpiness: number;
                }>>;
                clip: import("../../mol-util/param-definition").ParamDefinition.Group<import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                    variant: import("../../mol-util/clip").Clip.Variant;
                    objects: import("../../mol-util/param-definition").ParamDefinition.Normalize<{
                        type: any;
                        invert: any;
                        position: any;
                        rotation: any;
                        scale: any;
                    }>[];
                }>>;
                flipSided: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                flatShaded: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                traceOnly: import("../../mol-util/param-definition").ParamDefinition.BooleanParam;
                detail: import("../../mol-util/param-definition").ParamDefinition.Numeric;
            }, import("../../mol-repr/structure/representation").StructureRepresentationState>;
            type: RepresentationType;
        })[];
    }>;
    update: (representations: Representation<any>[], data: {
        trajectory: Trajectory;
        frameIndex: number;
    }, ctx: RepresentationContext) => Promise<void>;
};
