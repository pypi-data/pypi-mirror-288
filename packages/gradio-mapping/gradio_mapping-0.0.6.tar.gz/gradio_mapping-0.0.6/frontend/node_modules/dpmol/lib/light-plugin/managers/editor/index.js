"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditorManager = exports.BOND_ORDER = exports.EditorMode = void 0;
var tslib_1 = require("tslib");
var marker_action_1 = require("../../../mol-util/marker-action");
var rx_event_helper_1 = require("../../../mol-util/rx-event-helper");
var model_1 = require("../../model");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var structure_1 = require("../../utils/structure");
var drag_1 = require("./drag");
var draw_1 = require("./draw");
var rotate_1 = require("./rotate");
var EditorMode;
(function (EditorMode) {
    EditorMode[EditorMode["None"] = 0] = "None";
    EditorMode[EditorMode["Drag"] = 1] = "Drag";
    EditorMode[EditorMode["Rotate"] = 2] = "Rotate";
    EditorMode[EditorMode["Draw"] = 3] = "Draw";
})(EditorMode = exports.EditorMode || (exports.EditorMode = {}));
// 常见键级只有1-3,暂时只处理1-3
var BOND_ORDER;
(function (BOND_ORDER) {
    BOND_ORDER[BOND_ORDER["SINGLE"] = 1] = "SINGLE";
    BOND_ORDER[BOND_ORDER["DOUBLE"] = 2] = "DOUBLE";
    BOND_ORDER[BOND_ORDER["TRIPLE"] = 3] = "TRIPLE";
    BOND_ORDER[BOND_ORDER["AROMATIC"] = 4] = "AROMATIC";
    BOND_ORDER[BOND_ORDER["SINGLE_OR_DOUBLE"] = 5] = "SINGLE_OR_DOUBLE";
    BOND_ORDER[BOND_ORDER["SINGLE_OR_AROMATIC"] = 6] = "SINGLE_OR_AROMATIC";
    BOND_ORDER[BOND_ORDER["DOUBLE_OR_AROMATIC"] = 7] = "DOUBLE_OR_AROMATIC";
    BOND_ORDER[BOND_ORDER["ANY"] = 8] = "ANY";
})(BOND_ORDER = exports.BOND_ORDER || (exports.BOND_ORDER = {}));
var BondOrders = [BOND_ORDER.SINGLE, BOND_ORDER.DOUBLE, BOND_ORDER.TRIPLE];
var EditorManager = /** @class */ (function () {
    function EditorManager(plugin) {
        var _a;
        this.state = {
            mode: EditorMode.None,
            editAtomDisabled: false,
            addBondDisabled: false,
            editBondDisabled: false,
            selectedPdb: false,
            isMergeNeeded: false,
        };
        this.ev = rx_event_helper_1.RxEventHelper.create();
        this.editStateUpdated = this.ev();
        this.editStructureUpdated = this.ev();
        this.plugin = plugin;
        this.instance = (_a = {},
            _a[EditorMode.Drag] = new drag_1.DragEditor(plugin),
            _a[EditorMode.Rotate] = new rotate_1.RotateEditor(plugin),
            _a[EditorMode.Draw] = new draw_1.DrawEditor(plugin),
            _a[EditorMode.None] = undefined,
            _a);
    }
    Object.defineProperty(EditorManager.prototype, "isEditing", {
        get: function () {
            var _a;
            return !!((_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.controls.isEditing);
        },
        set: function (state) {
            var _a, _b;
            var needUpdate = ((_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.controls.isEditing) === false && state;
            (_b = this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.controls.setEditState(state);
            if (needUpdate) {
                this.setState(this.getEditState());
            }
            if (!state) {
                var cellItems_1 = [];
                this.plugin.cells.forEach(function (cell, ref) {
                    if (cell.representations.has(types_1.RepresentationType.RotateArrow)) {
                        cellItems_1.push({ ref: ref });
                    }
                });
                this.plugin.managers.cell.remove(cellItems_1);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorManager.prototype, "disabledInteraction", {
        get: function () {
            var _a;
            return ((_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.controls.disabledInteraction) || [];
        },
        set: function (state) {
            var _a;
            (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.controls.setDisabledInteractionState(state);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorManager.prototype, "isLockCamera", {
        get: function () {
            var _a;
            return !!((_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.controls.isLockCamera);
        },
        set: function (state) {
            var _a;
            (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.controls.setLockCameraState(state);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorManager.prototype, "drawEditor", {
        get: function () {
            return this.instance[EditorMode.Draw];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorManager.prototype, "rotateEditor", {
        get: function () {
            return this.instance[EditorMode.Rotate];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorManager.prototype, "dragEditor", {
        get: function () {
            return this.instance[EditorMode.Drag];
        },
        enumerable: false,
        configurable: true
    });
    EditorManager.prototype.setState = function (newState) {
        Object.assign(this.state, newState);
        this.editStateUpdated.next(this.state);
    };
    EditorManager.prototype.setEditorMode = function (mode, isLockCamera, disabledInteraction) {
        if (isLockCamera === void 0) { isLockCamera = false; }
        if (disabledInteraction === void 0) { disabledInteraction = ['click', 'drag']; }
        this.isEditing = mode;
        this.isLockCamera = isLockCamera;
        this.disabledInteraction = disabledInteraction;
    };
    EditorManager.prototype.getEditState = function () {
        var _this = this;
        var _a, _b, _c, _d;
        var editAtomDisabled = true;
        var addBondDisabled = true;
        var editBondDisabled = true;
        var selectedPdb = false;
        var isMergeNeeded = false;
        if (!this.isEditing)
            return {
                editAtomDisabled: editAtomDisabled,
                addBondDisabled: addBondDisabled,
                editBondDisabled: editBondDisabled,
                selectedPdb: selectedPdb,
                isMergeNeeded: isMergeNeeded,
            };
        var selection = this.plugin.managers.selection.structure.selection;
        // 编辑原子只要选中了原子就行
        // 编辑（改键级/删）键的前提条件：selection中只有同一个cRef下的两个element id且这两个element间有联边(getEdgeIndex)
        // 加键只需要选中了俩原子就可以
        var selectionCrefs = [];
        selection.forEach(function (_, key) {
            selectionCrefs.push(key);
            selectedPdb = selectedPdb || _this.plugin.managers.cell.isFromPdb(key);
        });
        if (selectionCrefs.length > 0) {
            for (var i = 0, l = selectionCrefs.length; i < l; i++) {
                var cRef = selectionCrefs[i];
                if (selection.has(cRef)) {
                    editAtomDisabled = false;
                }
            }
        }
        if (selectionCrefs.length === 0 || selectionCrefs.length > 2) {
            return {
                editAtomDisabled: editAtomDisabled,
                addBondDisabled: addBondDisabled,
                editBondDisabled: editBondDisabled,
                selectedPdb: selectedPdb,
                isMergeNeeded: isMergeNeeded,
            };
        }
        if (selectionCrefs.length === 2) {
            var elementIds = (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], ((_a = selection.get(selectionCrefs[0])) !== null && _a !== void 0 ? _a : []), true), ((_b = selection.get(selectionCrefs[1])) !== null && _b !== void 0 ? _b : []), true);
            if (elementIds.length === 2) {
                addBondDisabled = false;
                isMergeNeeded = true;
            }
        }
        else if (selectionCrefs.length === 1) {
            var elementIds = selection.get(selectionCrefs[0]);
            if ((elementIds === null || elementIds === void 0 ? void 0 : elementIds.length) === 2) {
                addBondDisabled = false;
                var cell = this.plugin.cells.get(selectionCrefs[0]);
                if (((_c = cell === null || cell === void 0 ? void 0 : cell.model.structure) === null || _c === void 0 ? void 0 : _c.units.length) &&
                    ((_d = cell === null || cell === void 0 ? void 0 : cell.model.structure) === null || _d === void 0 ? void 0 : _d.units[0]).bonds.getEdgeIndex(elementIds[0], elementIds[1]) !== -1) {
                    editBondDisabled = false;
                }
            }
        }
        return {
            editAtomDisabled: editAtomDisabled,
            addBondDisabled: addBondDisabled,
            editBondDisabled: editBondDisabled,
            selectedPdb: selectedPdb,
            isMergeNeeded: isMergeNeeded,
        };
    };
    EditorManager.prototype.executeEdit = function (ref, editMolFunc, editPDBFunc, forceKind) {
        var _a, _b, _c;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var cell, structure, structures, editedCell, format;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        cell = this.plugin.cells.get(ref);
                        structure = (_a = cell === null || cell === void 0 ? void 0 : cell.model) === null || _a === void 0 ? void 0 : _a.structure;
                        if (!structure)
                            return [2 /*return*/];
                        return [4 /*yield*/, (0, structure_1.generateStructureByEditFuncAndStructure)(structure, editMolFunc, editPDBFunc, forceKind)];
                    case 1:
                        structures = _d.sent();
                        if (structures.length <= 0)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.plugin.managers.representation.updateMolecular({
                                ref: ref,
                                structure: structures[0]
                            })];
                    case 2:
                        editedCell = _d.sent();
                        editedCell.model.structure = structures[0];
                        format = ((_c = (_b = (0, structure_1.getModelByStructure)(structures[0])) === null || _b === void 0 ? void 0 : _b.sourceData) === null || _c === void 0 ? void 0 : _c.kind) !== 'mmCIF' ? types_1.Format.Sdf : types_1.Format.Pdb;
                        this.plugin.managers.cell.update(ref, {
                            model: editedCell.model,
                            representations: Array.from(editedCell.representations.values()),
                            assets: [{ format: format, data: (0, structure_1.getTextFromStructure)(structures[0], format) }],
                        });
                        this.editStructureUpdated.next(ref);
                        this.plugin.managers.cell.traverse(function (cell, repr) {
                            if (repr.type === types_1.RepresentationType.IntraInteractions) {
                                _this.plugin.managers.representation.showGlobalInteraction(true, 'lightPlugin.managers.editor.executeEdit');
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    EditorManager.prototype.coverSourceData = function (ref, format, data, resetReprType) {
        var _a, _b, _c, _d, _e, _f, _g;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var structures, _h, _j, cell, selection_1, cellSelection_1, repr, loci, editedCell, selection, cellSelection;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        if (!this.plugin.cells.has(ref))
                            return [2 /*return*/];
                        _j = (_h = model_1.FormatProvider[format]).parse;
                        return [4 /*yield*/, (0, utils_1.readAsString)(data)];
                    case 1: return [4 /*yield*/, _j.apply(_h, [_k.sent()])];
                    case 2:
                        structures = (_k.sent());
                        if (!resetReprType) return [3 /*break*/, 4];
                        cell = this.plugin.cells.get(ref);
                        cell === null || cell === void 0 ? void 0 : cell.representations.forEach(function (repr) {
                            var _a;
                            if (repr.state) {
                                (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.remove(repr.state);
                            }
                        });
                        this.plugin.managers.cell.update(ref, {
                            model: {
                                structure: structures[0]
                            },
                            representations: [],
                            assets: [{ format: format, data: data }],
                        });
                        cell.representations = new Map();
                        return [4 /*yield*/, this.plugin.managers.representation.setMolecularRepr([{ ref: ref, elementIds: (0, structure_1.getElementsFromStructure)(structures[0]) }], resetReprType, false)
                            // 更新selection的mark
                        ];
                    case 3:
                        _k.sent();
                        selection_1 = this.plugin.managers.selection.structure.getSelection();
                        cellSelection_1 = (_a = selection_1[ref]) !== null && _a !== void 0 ? _a : [];
                        repr = (_b = this.plugin.cells.get(ref)) === null || _b === void 0 ? void 0 : _b.representations.get(resetReprType);
                        if (repr) {
                            loci = (0, utils_1.getLoci)((0, structure_1.getStructureFromRepresentation)(repr.state), cellSelection_1);
                            (_c = this.plugin.canvas3d) === null || _c === void 0 ? void 0 : _c.mark({
                                loci: loci,
                                repr: repr.state
                            }, marker_action_1.MarkerAction.Select);
                        }
                        return [2 /*return*/];
                    case 4: return [4 /*yield*/, this.plugin.managers.representation.updateMolecular({
                            ref: ref,
                            structure: structures[0]
                        })];
                    case 5:
                        editedCell = _k.sent();
                        editedCell.model.structure = structures[0];
                        this.plugin.managers.cell.update(ref, {
                            model: editedCell.model,
                            representations: Array.from(editedCell.representations.values()),
                            assets: [{ format: format, data: data }],
                        });
                        selection = this.plugin.managers.selection.structure.getSelection();
                        cellSelection = (_d = selection[ref]) !== null && _d !== void 0 ? _d : [];
                        (_e = this.plugin.cells.get(ref)) === null || _e === void 0 ? void 0 : _e.representations.values();
                        Array.from((_g = (_f = this.plugin.cells.get(ref)) === null || _f === void 0 ? void 0 : _f.representations.values()) !== null && _g !== void 0 ? _g : []).forEach(function (repr) {
                            var _a;
                            var loci = 
                            // Repr Cache Compatible
                            (0, utils_1.getLoci)((0, structure_1.getStructureFromRepresentation)(repr.state), cellSelection);
                            (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark({
                                loci: loci,
                                repr: repr.state
                            }, marker_action_1.MarkerAction.Select);
                        });
                        this.plugin.managers.cell.traverse(function (cell, repr) {
                            if (repr.type === types_1.RepresentationType.IntraInteractions) {
                                _this.plugin.managers.representation.showGlobalInteraction(true, 'lightPlugin.managers.editor.coverSourceData');
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    EditorManager.prototype.edit = function (func, items) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var currIsLockCamera, data, selection;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currIsLockCamera = this.isLockCamera;
                        this.isLockCamera = true;
                        data = items !== null && items !== void 0 ? items : this.plugin.managers.selection.structure.getSelectionCellItems();
                        return [4 /*yield*/, Promise.all(data.map(function (item) {
                                var ref = item.ref, elementIds = item.elementIds;
                                return func(ref, elementIds !== null && elementIds !== void 0 ? elementIds : []);
                            }))
                            // 更新selection的mark
                        ];
                    case 1:
                        _a.sent();
                        selection = this.plugin.managers.selection.structure.getSelection();
                        data.forEach(function (_a) {
                            var _b, _c;
                            var ref = _a.ref;
                            var cell = _this.plugin.cells.get(ref);
                            var cellSelection = (_b = selection[ref]) !== null && _b !== void 0 ? _b : [];
                            Array.from((_c = cell === null || cell === void 0 ? void 0 : cell.representations.values()) !== null && _c !== void 0 ? _c : []).forEach(function (repr) {
                                var _a;
                                var loci = 
                                // Repr Cache Compatible
                                (0, utils_1.getLoci)((0, structure_1.getStructureFromRepresentation)(repr.state), cellSelection);
                                (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark({
                                    loci: loci,
                                    repr: repr.state
                                }, marker_action_1.MarkerAction.Select);
                            });
                        });
                        this.isLockCamera = currIsLockCamera;
                        return [2 /*return*/];
                }
            });
        });
    };
    EditorManager.prototype.deleteAtoms = function (items) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var updateAtoms, func;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        updateAtoms = {};
                        func = function (ref, elementIds) {
                            return _this.executeEdit(ref, function (atomList, bondList) {
                                var elementIdsSet = new Set(elementIds);
                                var atomIdMap = new Map();
                                var editedAtomList = [];
                                atomList.forEach(function (atom) {
                                    var isDel = elementIdsSet.has(atom.elementId);
                                    if (!isDel) {
                                        updateAtoms[atom.elementId] = editedAtomList.length;
                                        editedAtomList.push((0, tslib_1.__assign)({}, atom));
                                        atomIdMap.set(atom.elementId + 1, editedAtomList.length);
                                    }
                                    return !isDel;
                                });
                                var editedBondList = bondList.filter(function (bond) {
                                    var isDel = elementIdsSet.has(bond.a - 1) || elementIdsSet.has(bond.b - 1);
                                    if (atomIdMap.has(bond.a)) {
                                        bond.a = atomIdMap.get(bond.a);
                                    }
                                    if (atomIdMap.has(bond.b)) {
                                        bond.b = atomIdMap.get(bond.b);
                                    }
                                    return !isDel;
                                });
                                return {
                                    editedAtomList: editedAtomList,
                                    editedBondList: editedBondList
                                };
                            }, function (atomList, bondList) {
                                var elementIdsSet = new Set(elementIds);
                                var editedAtomList = [];
                                atomList.forEach(function (atom) {
                                    if (!elementIdsSet.has(atom.elementId)) {
                                        updateAtoms[atom.elementId] = editedAtomList.length;
                                        editedAtomList.push(atom);
                                    }
                                });
                                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                                var affectedAtomIds = [];
                                return {
                                    editedAtomList: editedAtomList,
                                    editedBondList: editedBondList,
                                    affectedAtomIds: affectedAtomIds
                                };
                            });
                        };
                        return [4 /*yield*/, this.edit(func, items)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, updateAtoms];
                }
            });
        });
    };
    EditorManager.prototype.editAtomCharge = function (charge, items) {
        var _this = this;
        var func = function (ref, elementIds) {
            return _this.executeEdit(ref, function (atomList, bondList) {
                var elementIdsSet = new Set(elementIds);
                var editedAtomList = (0, tslib_1.__spreadArray)([], atomList, true);
                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                var affectedAtomIds = [];
                editedAtomList.forEach(function (atom) {
                    if (elementIdsSet.has(atom.elementId)) {
                        var newCharge = atom.charge !== undefined ? atom.charge + charge : charge;
                        if (newCharge <= 3 && newCharge >= -3) {
                            atom.charge = newCharge;
                            affectedAtomIds.push(parseInt(atom.atom_id, 10));
                        }
                    }
                });
                return {
                    editedAtomList: editedAtomList,
                    editedBondList: editedBondList,
                    affectedAtomIds: affectedAtomIds
                };
            }, function (atomList, bondList) {
                var elementIdsSet = new Set(elementIds);
                var editedAtomList = (0, tslib_1.__spreadArray)([], atomList, true);
                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                var affectedAtomIds = [];
                editedAtomList.forEach(function (atom) {
                    if (elementIdsSet.has(atom.elementId)) {
                        var newCharge = atom.charge !== undefined ? atom.charge + charge : charge;
                        if (newCharge <= 3 && newCharge >= -3) {
                            atom.charge = newCharge;
                            affectedAtomIds.push(parseInt(atom.atom_id, 10));
                        }
                    }
                });
                return {
                    editedAtomList: editedAtomList,
                    editedBondList: editedBondList,
                    affectedAtomIds: affectedAtomIds
                };
            });
        };
        return this.edit(func, items);
    };
    EditorManager.prototype.editAtomType = function (elementType, items) {
        var _this = this;
        var type = elementType !== null && elementType !== void 0 ? elementType : this.instance[EditorMode.Draw].state.elementType;
        var func = function (ref, elementIds) {
            return _this.executeEdit(ref, function (atomList, bondList) {
                var elementIdsSet = new Set(elementIds);
                var editedAtomList = (0, tslib_1.__spreadArray)([], atomList, true);
                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                var affectedAtomIds = [];
                editedAtomList.forEach(function (atom) {
                    if (elementIdsSet.has(atom.elementId)) {
                        atom.auth_atom_id = type;
                        atom.type_symbol = type;
                        affectedAtomIds.push(parseInt(atom.atom_id, 10));
                    }
                });
                return {
                    editedAtomList: editedAtomList,
                    editedBondList: editedBondList,
                    affectedAtomIds: affectedAtomIds
                };
            }, function (atomList, bondList) {
                var elementIdsSet = new Set(elementIds);
                var editedAtomList = (0, tslib_1.__spreadArray)([], atomList, true);
                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                var affectedAtomIds = [];
                editedAtomList.forEach(function (atom) {
                    if (elementIdsSet.has(atom.elementId)) {
                        atom.auth_atom_id = type;
                        atom.type_symbol = type;
                        affectedAtomIds.push(parseInt(atom.atom_id, 10));
                    }
                });
                return {
                    editedAtomList: editedAtomList,
                    editedBondList: editedBondList,
                    affectedAtomIds: affectedAtomIds
                };
            });
        };
        return this.edit(func, items);
    };
    EditorManager.prototype.editBondOrder = function (offset, items) {
        var _this = this;
        var func = function (ref, elementIds) {
            return _this.executeEdit(ref, function (atomList, bondList) {
                var editedAtomList = (0, tslib_1.__spreadArray)([], atomList, true);
                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                var affectedAtomIds = new Set();
                editedBondList.forEach(function (bond) {
                    if ((bond.a - 1 === elementIds[0] && bond.b - 1 === elementIds[1]) ||
                        (bond.a - 1 === elementIds[1] && bond.b - 1 === elementIds[0])) {
                        // TODO：当bond.order > 3时，该如何处理？ by xuh
                        var newOrder = bond.order + offset;
                        if (BondOrders.includes(newOrder)) {
                            bond.order = newOrder;
                            affectedAtomIds.add(bond.a - 1);
                            affectedAtomIds.add(bond.b - 1);
                        }
                    }
                });
                return {
                    editedAtomList: editedAtomList,
                    editedBondList: editedBondList,
                    affectedAtomIds: Array.from(affectedAtomIds)
                };
            }, function (atomList, bondList) {
                var editedAtomList = (0, tslib_1.__spreadArray)([], atomList, true);
                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                var affectedAtomIds = new Set();
                editedBondList.forEach(function (bond) {
                    if ((bond.a === elementIds[0] && bond.b === elementIds[1]) ||
                        (bond.a === elementIds[1] && bond.b === elementIds[0])) {
                        var newOrder = bond.order + offset;
                        if (BondOrders.includes(newOrder)) {
                            bond.order = newOrder;
                            affectedAtomIds.add(bond.atom_idA === undefined
                                ? bond.a - 1
                                : parseInt(bond.atom_idA, 10));
                            affectedAtomIds.add(bond.atom_idB === undefined
                                ? bond.b - 1
                                : parseInt(bond.atom_idB, 10));
                        }
                    }
                });
                return {
                    editedAtomList: editedAtomList,
                    editedBondList: editedBondList,
                    affectedAtomIds: Array.from(affectedAtomIds)
                };
            });
        };
        return this.edit(func, items);
    };
    EditorManager.prototype.addOrDelBond = function (isAdd, items) {
        var _this = this;
        var _a;
        if (items && (items.length !== 1 || ((_a = items[0].elementIds) === null || _a === void 0 ? void 0 : _a.length) !== 2)) {
            return;
        }
        if (!items) {
            var selection = this.plugin.managers.selection.structure.selection;
            if (selection.size !== 1 &&
                Array.from(selection.values())[0].length !== 2) {
                return;
            }
        }
        var func = function (ref, elementIds) {
            return _this.executeEdit(ref, function (atomList, bondList) {
                var editedAtomList = (0, tslib_1.__spreadArray)([], atomList, true);
                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                var affectedAtomIds = (0, tslib_1.__spreadArray)([], elementIds, true);
                if (!isAdd) {
                    editedBondList = editedBondList.filter(function (bond) {
                        if ((bond.a - 1 === elementIds[0] &&
                            bond.b - 1 === elementIds[1]) ||
                            (bond.a - 1 === elementIds[1] && bond.b - 1 === elementIds[0])) {
                            return false;
                        }
                        return true;
                    });
                }
                else if (editedBondList.filter(function (bond) {
                    if ((bond.a - 1 === elementIds[0] &&
                        bond.b - 1 === elementIds[1]) ||
                        (bond.a - 1 === elementIds[1] && bond.b - 1 === elementIds[0])) {
                        return true;
                    }
                    return false;
                }).length === 0) {
                    editedBondList.push({
                        a: elementIds[0] + 1,
                        b: elementIds[1] + 1,
                        order: 1
                    });
                }
                return {
                    editedAtomList: editedAtomList,
                    editedBondList: editedBondList,
                    affectedAtomIds: affectedAtomIds
                };
            }, function (atomList, bondList) {
                var _a;
                var editedAtomList = (0, tslib_1.__spreadArray)([], atomList, true);
                var editedBondList = (0, tslib_1.__spreadArray)([], bondList, true);
                var affectedAtomIds = [];
                if (!isAdd) {
                    editedBondList = editedBondList.filter(function (bond) {
                        if ((bond.a === elementIds[0] && bond.b === elementIds[1]) ||
                            (bond.a === elementIds[1] && bond.b === elementIds[0])) {
                            // 1
                            affectedAtomIds.push(bond.atom_idA === undefined
                                ? bond.a - 1
                                : parseInt(bond.atom_idA, 10), bond.atom_idB === undefined
                                ? bond.b - 1
                                : parseInt(bond.atom_idB, 10));
                            return false;
                        }
                        return true;
                    });
                }
                else if (editedBondList.filter(function (bond) {
                    if ((bond.a === elementIds[0] && bond.b === elementIds[1]) ||
                        (bond.a === elementIds[1] && bond.b === elementIds[0])) {
                        return true;
                    }
                    return false;
                }).length === 0) {
                    var structure = (_a = _this.plugin.cells.get(ref)) === null || _a === void 0 ? void 0 : _a.model.structure;
                    if (structure && structure.units.length > 0) {
                        var unit = structure.units[0];
                        var atomIdA = unit.model.atomicConformation.atomId.value(elementIds[0]);
                        var atomIdB = unit.model.atomicConformation.atomId.value(elementIds[1]);
                        editedBondList.push({
                            a: elementIds[0],
                            b: elementIds[1],
                            order: 1,
                            atom_idA: "".concat(atomIdA),
                            atom_idB: "".concat(atomIdB)
                        });
                        affectedAtomIds.push(atomIdA, atomIdB);
                    }
                }
                return {
                    editedAtomList: editedAtomList,
                    editedBondList: editedBondList,
                    affectedAtomIds: affectedAtomIds
                };
            });
        };
        return this.edit(func, items);
    };
    EditorManager.prototype.changeEditorMode = function (mode) {
        var editor = this.instance[this.state.mode];
        this.isLockCamera = false;
        this.disabledInteraction = [];
        if (editor) {
            editor.end();
        }
        var newEditor = this.instance[mode];
        if (newEditor) {
            this.isEditing = true;
            this.isLockCamera = true;
            newEditor.start();
        }
        this.setState({
            mode: mode
        });
    };
    EditorManager.prototype.start = function () {
        var _this = this;
        this.plugin.managers.selection.event.changed.subscribe(function () {
            _this.setState(_this.getEditState());
        });
    };
    return EditorManager;
}());
exports.EditorManager = EditorManager;
//# sourceMappingURL=index.js.map