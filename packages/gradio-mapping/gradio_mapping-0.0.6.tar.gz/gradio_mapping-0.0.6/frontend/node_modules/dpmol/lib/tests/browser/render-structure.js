"use strict";
/**
 * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var canvas3d_1 = require("../../mol-canvas3d/canvas3d");
// import { CIF, CifFrame } from '../../mol-io/reader/cif'
// import { Model, Structure } from '../../mol-model/structure'
var structure_1 = require("../../mol-model/structure");
var color_1 = require("../../mol-theme/color");
var size_1 = require("../../mol-theme/size");
var cartoon_1 = require("../../mol-repr/structure/representation/cartoon");
// import { trajectoryFromMmCIF } from '../../mol-model-formats/structure/mmcif'
var molecular_surface_1 = require("../../mol-repr/structure/representation/molecular-surface");
var ball_and_stick_1 = require("../../mol-repr/structure/representation/ball-and-stick");
var gaussian_surface_1 = require("../../mol-repr/structure/representation/gaussian-surface");
var util_1 = require("../../mol-canvas3d/util");
// import { Representation } from '../../mol-repr/representation'
// import { throttleTime } from 'rxjs/operators'
var marker_action_1 = require("../../mol-util/marker-action");
// import { EveryLoci } from '../../mol-model/loci'
// import { lociLabel } from '../../mol-theme/label'
var interactions_1 = require("../../mol-model-props/computed/representations/interactions");
// import { InteractionsProvider } from '../../mol-model-props/computed/interactions'
// import { SecondaryStructureProvider } from '../../mol-model-props/computed/secondary-structure'
// import { SyncRuntimeContext } from '../../mol-task/execution/synchronous'
// import { AssetManager } from '../../mol-util/assets'
var mol_1 = require("../../mol-model-formats/structure/mol");
var parser_1 = require("../../mol-io/reader/mol/parser");
// import { MembraneOrientationProvider } from '../../extensions/anvil/prop';
// import { MembraneOrientationRepresentationProvider } from '../../extensions/anvil/representation';
var parent = document.getElementById('app');
parent.style.width = '100%';
parent.style.height = '100%';
var canvas = document.createElement('canvas');
parent.appendChild(canvas);
(0, util_1.resizeCanvas)(canvas, parent);
var canvas3d = canvas3d_1.Canvas3D.create(canvas3d_1.Canvas3DContext.fromCanvas(canvas));
canvas3d.animate();
var info = document.createElement('div');
info.style.position = 'absolute';
info.style.fontFamily = 'sans-serif';
info.style.fontSize = '16pt';
info.style.bottom = '20px';
info.style.right = '20px';
info.style.color = 'white';
parent.appendChild(info);
// let prevReprLoci = Representation.Loci.Empty
// canvas3d.input.move.pipe(throttleTime(100)).subscribe(({ x, y }) => {
//   const pickingId = canvas3d.identify(x, y)?.id
//   let label = ''
//   if (pickingId) {
//     const reprLoci = canvas3d.getLoci(pickingId)
//     label = lociLabel(reprLoci.loci)
//     if (!Representation.Loci.areEqual(prevReprLoci, reprLoci)) {
//       canvas3d.mark(prevReprLoci, MarkerAction.RemoveHighlight)
//       canvas3d.mark(reprLoci, MarkerAction.Highlight)
//       prevReprLoci = reprLoci
//     }
//   } else {
//     // canvas3d.mark({ loci: EveryLoci }, MarkerAction.RemoveHighlight)
//     prevReprLoci = Representation.Loci.Empty
//   }
//   info.innerHTML = label
// })
canvas3d.interaction.click.subscribe(function (_a) {
    var current = _a.current, button = _a.button, modifiers = _a.modifiers;
    // console.log(x, y)
    // const pickingId = canvas3d.identify(x, y)?.id
    // if (pickingId) {
    //   const reprLoci = canvas3d.getLoci(pickingId)
    //   canvas3d.mark(current.repr.getLoci(), MarkerAction.Highlight)
    // }
    canvas3d.mark(current, marker_action_1.MarkerAction.Highlight);
    // current!.repr!.destroy()
    console.log(current);
});
// async function parseCif(data: string | Uint8Array) {
//   const comp = CIF.parse(data)
//   const parsed = await comp.run()
//   if (parsed.isError) throw parsed
//   return parsed.result
// }
// async function downloadCif(url: string, isBinary: boolean) {
//   const data = await fetch(url)
//   return parseCif(
//     isBinary ? new Uint8Array(await data.arrayBuffer()) : await data.text()
//   )
// }
// async function downloadFromPdb(pdb: string) {
//   const parsed = await downloadCif(`https://models.rcsb.org/${pdb}.bcif`, true)
//   return parsed.blocks[0]
// }
//
// async function getModels(frame: CifFrame) {
//   return await trajectoryFromMmCIF(frame).run()
// }
//
// async function getStructure(model: Model) {
//   return Structure.ofModel(model)
// }
var reprCtx = {
    webgl: canvas3d.webgl,
    colorThemeRegistry: color_1.ColorTheme.createRegistry(),
    sizeThemeRegistry: size_1.SizeTheme.createRegistry()
};
function getCartoonRepr() {
    return cartoon_1.CartoonRepresentationProvider.factory(reprCtx, cartoon_1.CartoonRepresentationProvider.getParams);
}
function getInteractionRepr() {
    return interactions_1.InteractionsRepresentationProvider.factory(reprCtx, interactions_1.InteractionsRepresentationProvider.getParams);
}
function getBallAndStickRepr() {
    return ball_and_stick_1.BallAndStickRepresentationProvider.factory(reprCtx, ball_and_stick_1.BallAndStickRepresentationProvider.getParams);
}
function getMolecularSurfaceRepr() {
    return molecular_surface_1.MolecularSurfaceRepresentationProvider.factory(reprCtx, molecular_surface_1.MolecularSurfaceRepresentationProvider.getParams);
}
function getGaussianSurfaceRepr() {
    return gaussian_surface_1.GaussianSurfaceRepresentationProvider.factory(reprCtx, gaussian_surface_1.GaussianSurfaceRepresentationProvider.getParams);
}
// function getMembraneOrientationRepr() {
//     return MembraneOrientationRepresentationProvider.factory(reprCtx, MembraneOrientationRepresentationProvider.getParams);
// }
function init() {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var mol, parsed, _a, _b, show, cartoonRepr, interactionRepr, ballAndStickRepr, molecularSurfaceRepr, gaussianSurfaceRepr, sdfRepr;
        return (0, tslib_1.__generator)(this, function (_c) {
            switch (_c.label) {
                case 0:
                    mol = "1a\n                    3D\n Structure written by MMmdl.\n 27 29  0  0  1  0            999 V2000\n  -15.3524  -19.2206  -25.9684 C   0  0  0  0  0  0\n  -14.6526  -19.7081  -27.0823 C   0  0  0  0  0  0\n  -15.8555  -20.1235  -25.0241 C   0  0  0  0  0  0\n  -14.4541  -21.0636  -27.2485 C   0  0  0  0  0  0\n  -15.6357  -21.4854  -25.1840 C   0  0  0  0  0  0\n  -15.0526  -16.9445  -26.6871 N   0  0  0  0  0  0\n  -14.9347  -21.9631  -26.2988 C   0  0  0  0  0  0\n  -15.2162  -15.5610  -26.5929 C   0  0  0  0  0  0\n  -15.9031  -15.0059  -25.5037 C   0  0  0  0  0  0\n  -15.4462  -12.8187  -26.3599 C   0  0  0  0  0  0\n  -14.7773  -13.3552  -27.4525 C   0  0  0  0  0  0\n  -16.0203  -13.6235  -25.3815 C   0  0  0  0  0  0\n  -14.6768  -14.7359  -27.5934 C   0  0  0  0  0  0\n  -16.5313  -15.9392  -24.4895 C   0  0  0  0  0  0\n  -16.2584  -17.2435  -24.7671 N   0  0  0  0  0  0\n  -15.5317  -17.7669  -25.8203 C   0  0  0  0  0  0\n  -17.2406  -15.6098  -23.5374 O   0  0  0  0  0  0\n  -14.2525  -19.0464  -27.8382 H   0  0  0  0  0  0\n  -16.3981  -19.7943  -24.1510 H   0  0  0  0  0  0\n  -13.8938  -21.4078  -28.1049 H   0  0  0  0  0  0\n  -15.9903  -22.1635  -24.4209 H   0  0  0  0  0  0\n  -14.3604  -12.6891  -28.1964 H   0  0  0  0  0  0\n  -16.5458  -13.1713  -24.5494 H   0  0  0  0  0  0\n  -16.7352  -17.8915  -24.1540 H   0  0  0  0  0  0\n  -14.1941  -15.1755  -28.4537 H   0  0  0  0  0  0\n  -15.5319  -11.7476  -26.2520 H   0  0  0  0  0  0\n  -14.7660  -23.0224  -26.4244 H   0  0  0  0  0  0\n  1  2  1  0  0  0\n  1  3  2  0  0  0\n  1 16  1  0  0  0\n  2  4  2  0  0  0\n  2 18  1  0  0  0\n  3  5  1  0  0  0\n  3 19  1  0  0  0\n  4  7  1  0  0  0\n  4 20  1  0  0  0\n  5  7  2  0  0  0\n  5 21  1  0  0  0\n  6  8  1  0  0  0\n  6 16  2  0  0  0\n  7 27  1  0  0  0\n  8  9  2  0  0  0\n  8 13  1  0  0  0\n  9 12  1  0  0  0\n  9 14  1  0  0  0\n 10 11  1  0  0  0\n 10 12  2  0  0  0\n 10 26  1  0  0  0\n 11 13  2  0  0  0\n 11 22  1  0  0  0\n 12 23  1  0  0  0\n 13 25  1  0  0  0\n 14 15  1  0  0  0\n 14 17  2  0  0  0\n 15 16  1  0  0  0\n 15 24  1  0  0  0\nM  END\n";
                    return [4 /*yield*/, (0, parser_1.parseMol)(mol).run()];
                case 1:
                    parsed = _c.sent();
                    if (parsed.isError)
                        return [2 /*return*/];
                    // @ts-ignore
                    window._molFile = parsed.result;
                    // @ts-ignore
                    _a = window;
                    return [4 /*yield*/, (0, mol_1.trajectoryFromMol)(window._molFile).run()
                        // @ts-ignore
                    ];
                case 2:
                    // @ts-ignore
                    _a._modelsSdf = _c.sent();
                    // @ts-ignore
                    _b = window;
                    return [4 /*yield*/, structure_1.Structure.ofModel(
                        // @ts-ignore
                        window._modelsSdf.representative)
                        // console.time('compute SecondaryStructure')
                        // await SecondaryStructureProvider.attach(ctx, structure)
                        // console.timeEnd('compute SecondaryStructure')
                        //
                        // console.time('compute Membrane Orientation')
                        // // await MembraneOrientationProvider.attach(ctx, structure);
                        // console.timeEnd('compute Membrane Orientation')
                        //
                        // console.time('compute Interactions')
                        // await InteractionsProvider.attach(ctx, structure)
                        // console.timeEnd('compute Interactions')
                        // console.log(InteractionsProvider.get(structure).value)
                    ];
                case 3:
                    // @ts-ignore
                    _b._structureSdf = _c.sent();
                    show = {
                        cartoon: false,
                        interaction: false,
                        ballAndStick: false,
                        molecularSurface: false,
                        gaussianSurface: false,
                        membrane: false
                    };
                    cartoonRepr = getCartoonRepr();
                    interactionRepr = getInteractionRepr();
                    ballAndStickRepr = getBallAndStickRepr();
                    molecularSurfaceRepr = getMolecularSurfaceRepr();
                    gaussianSurfaceRepr = getGaussianSurfaceRepr();
                    sdfRepr = getBallAndStickRepr();
                    // const membraneOrientationRepr = getMembraneOrientationRepr();
                    sdfRepr.setTheme({
                        color: reprCtx.colorThemeRegistry.create('element-symbol', {
                            // @ts-ignore
                            structure: window._structureSdf
                        }),
                        size: reprCtx.sizeThemeRegistry.create('uniform', {
                            // @ts-ignore
                            structure: window._structureSdf
                        })
                    });
                    return [4 /*yield*/, sdfRepr
                            .createOrUpdate((0, tslib_1.__assign)((0, tslib_1.__assign)({}, ball_and_stick_1.BallAndStickRepresentationProvider.defaultValues), { quality: 'auto' }), 
                        // @ts-ignore
                        window._structureSdf)
                            .run()
                        // @ts-ignore
                    ];
                case 4:
                    _c.sent();
                    // @ts-ignore
                    window._refresh = function () {
                        sdfRepr
                            .createOrUpdate((0, tslib_1.__assign)((0, tslib_1.__assign)({}, ball_and_stick_1.BallAndStickRepresentationProvider.defaultValues), { quality: 'auto' }), 
                        // @ts-ignore
                        window._structureSdf)
                            .run();
                    };
                    // @ts-ignore
                    window._sdfRepr = sdfRepr;
                    // if (show.cartoon) {
                    //   cartoonRepr.setTheme({
                    //     color: reprCtx.colorThemeRegistry.create('element-symbol', { structure }),
                    //     size: reprCtx.sizeThemeRegistry.create('uniform', { structure })
                    //   })
                    //   await cartoonRepr
                    //     .createOrUpdate(
                    //       { ...CartoonRepresentationProvider.defaultValues, quality: 'auto' },
                    //       structure
                    //     )
                    //     .run()
                    // }
                    //
                    // if (show.interaction) {
                    //   interactionRepr.setTheme({
                    //     color: reprCtx.colorThemeRegistry.create('interaction-type', {
                    //       structure
                    //     }),
                    //     size: reprCtx.sizeThemeRegistry.create('uniform', { structure })
                    //   })
                    //   await interactionRepr
                    //     .createOrUpdate(
                    //       {
                    //         ...InteractionsRepresentationProvider.defaultValues,
                    //         quality: 'auto'
                    //       },
                    //       structure
                    //     )
                    //     .run()
                    // }
                    //
                    // if (show.ballAndStick) {
                    //   ballAndStickRepr.setTheme({
                    //     color: reprCtx.colorThemeRegistry.create('element-symbol', { structure }),
                    //     size: reprCtx.sizeThemeRegistry.create(
                    //       'uniform',
                    //       { structure },
                    //       { value: 1 }
                    //     )
                    //   })
                    //   await ballAndStickRepr
                    //     .createOrUpdate(
                    //       {
                    //         ...BallAndStickRepresentationProvider.defaultValues,
                    //         quality: 'auto'
                    //       },
                    //       structure
                    //     )
                    //     .run()
                    // }
                    //
                    // if (show.molecularSurface) {
                    //   molecularSurfaceRepr.setTheme({
                    //     color: reprCtx.colorThemeRegistry.create('secondary-structure', {
                    //       structure
                    //     }),
                    //     size: reprCtx.sizeThemeRegistry.create('physical', { structure })
                    //   })
                    //   console.time('molecular surface')
                    //   await molecularSurfaceRepr
                    //     .createOrUpdate(
                    //       {
                    //         ...MolecularSurfaceRepresentationProvider.defaultValues,
                    //         quality: 'custom',
                    //         alpha: 0.5,
                    //         flatShaded: true,
                    //         doubleSided: true,
                    //         resolution: 0.3
                    //       },
                    //       structure
                    //     )
                    //     .run()
                    //   console.timeEnd('molecular surface')
                    // }
                    //
                    // if (show.gaussianSurface) {
                    //   gaussianSurfaceRepr.setTheme({
                    //     color: reprCtx.colorThemeRegistry.create('secondary-structure', {
                    //       structure
                    //     }),
                    //     size: reprCtx.sizeThemeRegistry.create('physical', { structure })
                    //   })
                    //   console.time('gaussian surface')
                    //   await gaussianSurfaceRepr
                    //     .createOrUpdate(
                    //       {
                    //         ...GaussianSurfaceRepresentationProvider.defaultValues,
                    //         quality: 'custom',
                    //         alpha: 1.0,
                    //         flatShaded: true,
                    //         doubleSided: true,
                    //         resolution: 0.3
                    //       },
                    //       structure
                    //     )
                    //     .run()
                    //   console.timeEnd('gaussian surface')
                    // }
                    // if (show.membrane) {
                    //     await membraneOrientationRepr.createOrUpdate({ ...MembraneOrientationRepresentationProvider.defaultValues, quality: 'auto' }, structure).run();
                    // }
                    if (show.cartoon)
                        canvas3d.add(cartoonRepr);
                    if (show.interaction)
                        canvas3d.add(interactionRepr);
                    if (show.ballAndStick)
                        canvas3d.add(ballAndStickRepr);
                    if (show.molecularSurface)
                        canvas3d.add(molecularSurfaceRepr);
                    if (show.gaussianSurface)
                        canvas3d.add(gaussianSurfaceRepr);
                    canvas3d.add(sdfRepr);
                    canvas3d.requestCameraReset();
                    return [2 /*return*/];
            }
        });
    });
}
init();
//# sourceMappingURL=render-structure.js.map