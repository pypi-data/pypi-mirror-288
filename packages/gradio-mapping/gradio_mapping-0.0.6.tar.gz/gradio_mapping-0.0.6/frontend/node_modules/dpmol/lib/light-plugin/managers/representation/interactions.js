"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepresentationInteractions = void 0;
var tslib_1 = require("tslib");
var types_1 = require("../../types");
var interactions_1 = require("../../representation/interactions");
var theme_1 = require("./theme");
var utils_1 = require("../../utils");
var rx_event_helper_1 = require("../../../mol-util/rx-event-helper");
var AtomReprTypeList = [
    types_1.RepresentationType.BallAndStick,
    types_1.RepresentationType.Line,
    types_1.RepresentationType.Stick,
    types_1.RepresentationType.CPK,
];
var RepresentationInteractions = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(RepresentationInteractions, _super);
    function RepresentationInteractions(plugin, defaultTheme, defaultInteractionParams) {
        var _this = _super.call(this, plugin, defaultTheme) || this;
        _this.ev = rx_event_helper_1.RxEventHelper.create();
        _this.event = {
            interactionParamsUpdated: _this.ev(),
            interactionUpdated: _this.ev(),
        };
        _this.plugin = plugin;
        _this.type = interactions_1.INTERACTION_TYPE.LigandReceptor;
        _this.interactionParams = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, defaultInteractionParams), (0, types_1.getDefaultInteractionParams)());
        return _this;
    }
    /*
    * 注意，应先调用showInteractionBetweenCellItems，结束后再调用setMolecularRepr，防止触发setMolecularRepr中的interaction更新逻辑
    */
    RepresentationInteractions.prototype.showInteractionInCellItems = function (items, type, theme, strictMode) {
        var _a;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var shownAtoms, validItems, _b, representation, ref, data;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        shownAtoms = new Map();
                        if (strictMode) {
                            Array.from(items.map(function (item) { return item.ref; })).forEach(function (ref) {
                                var cell = _this.plugin.cells.get(ref);
                                if (!cell)
                                    return;
                                var atoms = [];
                                types_1.ReprCBasedTheme[types_1.ThemeC.ATOM].forEach(function (type) {
                                    // Repr State Cache
                                    if (cell.representations.has(type) && cell.representations.get(type).state) {
                                        atoms.push.apply(atoms, (0, utils_1.getElementIdsByLoci)((0, utils_1.transformLociToElementLoci)(cell.representations.get(type).state.getLoci())));
                                    }
                                });
                                shownAtoms.set(ref, new Set(atoms));
                            });
                        }
                        validItems = strictMode ? items.map(function (_a) {
                            var _b, _c;
                            var ref = _a.ref, elementIds = _a.elementIds;
                            var validElementIds = elementIds ? elementIds.filter(function (elementId) { var _a; return (_a = shownAtoms.get(ref)) === null || _a === void 0 ? void 0 : _a.has(elementId); }) : Array.from((_c = (_b = shownAtoms.get(ref)) === null || _b === void 0 ? void 0 : _b.values()) !== null && _c !== void 0 ? _c : []);
                            return {
                                ref: ref,
                                elementIds: validElementIds,
                            };
                        }).filter(function (item) { return item.elementIds.length; }) : items;
                        return [4 /*yield*/, interactions_1.InteractionsRepr.createOrUpdateInCellItems(validItems, this.plugin, type, this.interactionParams, theme)];
                    case 1:
                        _b = _c.sent(), representation = _b.representation, ref = _b.ref;
                        data = {
                            representations: [
                                {
                                    state: representation,
                                    isHidden: false,
                                    type: types_1.RepresentationType.IntraInteractions
                                }
                            ],
                            model: { other: null },
                            dependency: {
                                on: items
                            }
                        };
                        (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.add(representation);
                        if (!ref) {
                            return [2 /*return*/, this.plugin.managers.cell.create(data)];
                        }
                        this.plugin.managers.cell.update(ref, data);
                        return [2 /*return*/, ref];
                }
            });
        });
    };
    /*
    * 注意，应先调用showInteractionBetweenCellItems，结束后再调用setMolecularRepr，防止触发setMolecularRepr中的interaction更新逻辑
    */
    RepresentationInteractions.prototype.showInteractionBetweenCellItems = function (itemsA, itemsB, theme, strictMode) {
        var _a;
        if (strictMode === void 0) { strictMode = false; }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var shownAtoms, validItemsA, validItemsB, _b, representation, ref, data;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        shownAtoms = new Map();
                        if (strictMode) {
                            Array.from((0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], itemsA, true), itemsB, true).map(function (item) { return item.ref; })).forEach(function (ref) {
                                var cell = _this.plugin.cells.get(ref);
                                if (!cell)
                                    return;
                                var atoms = [];
                                types_1.ReprCBasedTheme[types_1.ThemeC.ATOM].forEach(function (type) {
                                    // Repr State Cache
                                    if (cell.representations.has(type) && cell.representations.get(type).state) {
                                        atoms.push.apply(atoms, (0, utils_1.getElementIdsByLoci)((0, utils_1.transformLociToElementLoci)(cell.representations.get(type).state.getLoci())));
                                    }
                                });
                                shownAtoms.set(ref, new Set(atoms));
                            });
                        }
                        validItemsA = strictMode ? itemsA.map(function (_a) {
                            var _b, _c;
                            var ref = _a.ref, elementIds = _a.elementIds;
                            var validElementIds = elementIds ? elementIds.filter(function (elementId) { var _a; return (_a = shownAtoms.get(ref)) === null || _a === void 0 ? void 0 : _a.has(elementId); }) : Array.from((_c = (_b = shownAtoms.get(ref)) === null || _b === void 0 ? void 0 : _b.values()) !== null && _c !== void 0 ? _c : []);
                            return {
                                ref: ref,
                                elementIds: validElementIds,
                            };
                        }).filter(function (item) { return item.elementIds.length; }) : itemsA;
                        validItemsB = strictMode ? itemsB.map(function (_a) {
                            var _b, _c;
                            var ref = _a.ref, elementIds = _a.elementIds;
                            var validElementIds = elementIds ? elementIds.filter(function (elementId) { var _a; return (_a = shownAtoms.get(ref)) === null || _a === void 0 ? void 0 : _a.has(elementId); }) : Array.from((_c = (_b = shownAtoms.get(ref)) === null || _b === void 0 ? void 0 : _b.values()) !== null && _c !== void 0 ? _c : []);
                            return {
                                ref: ref,
                                elementIds: validElementIds,
                            };
                        }).filter(function (item) { return item.elementIds.length; }) : itemsB;
                        return [4 /*yield*/, interactions_1.InteractionsRepr.createOrUpdateBetweenCellItems(validItemsA, validItemsB, this.plugin, this.interactionParams, theme)];
                    case 1:
                        _b = _c.sent(), representation = _b.representation, ref = _b.ref;
                        if (!representation)
                            return [2 /*return*/];
                        data = {
                            representations: [
                                {
                                    state: representation,
                                    isHidden: false,
                                    type: types_1.RepresentationType.BetweenInteractions
                                }
                            ],
                            model: { other: { itemsA: validItemsA, itemsB: validItemsB } },
                            dependency: {
                                on: validItemsA.concat(validItemsB)
                            }
                        };
                        (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.add(representation);
                        if (!ref) {
                            return [2 /*return*/, this.plugin.managers.cell.create(data)];
                        }
                        this.plugin.managers.cell.update(ref, data);
                        return [2 /*return*/];
                }
            });
        });
    };
    RepresentationInteractions.prototype.setInteractionParams = function (options, type) {
        var _this = this;
        var displayOptions = new Set(Object.keys(this.interactionParams).filter(function (option) { var _a; return ((_a = _this.interactionParams[option]) === null || _a === void 0 ? void 0 : _a.name) === 'on'; }));
        if (this.type === type && options.length === displayOptions.size && options.every(function (option) { return displayOptions.has(option); })) {
            return false;
        }
        this.type = type;
        this.interactionParams = (0, types_1.getDefaultInteractionParams)(options);
        var hasUpdateInteraction = false;
        this.plugin.managers.cell.traverse(function (cell, repr) {
            if (repr.type === types_1.RepresentationType.IntraInteractions) {
                hasUpdateInteraction = true;
                _this.showGlobalInteraction(undefined, 'lightPlugin.managers.representation.interactions.setInteractionParams');
            }
        });
        this.event.interactionParamsUpdated.next({ params: this.interactionParams, type: type });
        return hasUpdateInteraction;
    };
    RepresentationInteractions.prototype.showGlobalInteraction = function (strictMode, from) {
        var _a;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var shownAtoms, globalCellItems, validItems, _b, representation, ref, interactionElementIds, data, filteredItems_1, reprElements_1, reprTypeItems_1, i, l, type;
            var _c;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        shownAtoms = new Map();
                        globalCellItems = (0, utils_1.getGlobalCellItems)(this.plugin);
                        if (strictMode) {
                            Array.from(globalCellItems.map(function (item) { return item.ref; })).forEach(function (ref) {
                                var cell = _this.plugin.cells.get(ref);
                                if (!cell)
                                    return;
                                var atoms = [];
                                types_1.ReprCBasedTheme[types_1.ThemeC.ATOM].forEach(function (type) {
                                    // Repr State Cache
                                    if (cell.representations.has(type) && cell.representations.get(type).state) {
                                        atoms.push.apply(atoms, (0, utils_1.getElementIdsByLoci)((0, utils_1.transformLociToElementLoci)(cell.representations.get(type).state.getLoci())));
                                    }
                                });
                                shownAtoms.set(ref, new Set(atoms));
                            });
                        }
                        validItems = strictMode ? globalCellItems.map(function (_a) {
                            var _b, _c;
                            var ref = _a.ref, elementIds = _a.elementIds;
                            var validElementIds = elementIds ? elementIds.filter(function (elementId) { var _a; return (_a = shownAtoms.get(ref)) === null || _a === void 0 ? void 0 : _a.has(elementId); }) : Array.from((_c = (_b = shownAtoms.get(ref)) === null || _b === void 0 ? void 0 : _b.values()) !== null && _c !== void 0 ? _c : []);
                            return {
                                ref: ref,
                                elementIds: validElementIds,
                            };
                        }).filter(function (item) { return item.elementIds.length; }) : undefined;
                        return [4 /*yield*/, interactions_1.InteractionsRepr.createOrUpdateGlobal(globalCellItems, this.plugin, this.type, this.interactionParams, undefined, validItems)];
                    case 1:
                        _b = _d.sent(), representation = _b.representation, ref = _b.ref, interactionElementIds = _b.interactionElementIds;
                        data = {
                            representations: [
                                {
                                    state: representation,
                                    isHidden: false,
                                    type: types_1.RepresentationType.IntraInteractions
                                }
                            ],
                            model: {
                                other: {
                                    type: this.type,
                                }
                            },
                            dependency: {
                                on: globalCellItems
                            }
                        };
                        (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.add(representation);
                        if (!!strictMode) return [3 /*break*/, 5];
                        filteredItems_1 = [];
                        reprElements_1 = {};
                        interactionElementIds.forEach(function (_a) {
                            var _b;
                            var ref = _a.ref, elementIds = _a.elementIds;
                            var cell = _this.plugin.cells.get(ref);
                            if (!cell)
                                return;
                            reprElements_1[ref] = (_b = {},
                                _b[types_1.RepresentationType.BallAndStick] = new Set(),
                                _b[types_1.RepresentationType.Line] = new Set(),
                                _b[types_1.RepresentationType.Stick] = new Set(),
                                _b[types_1.RepresentationType.CPK] = new Set(),
                                _b);
                            var elementIdsSet = new Set(elementIds);
                            AtomReprTypeList.forEach(function (type) {
                                // Repr State Cache
                                if (!cell.representations.has(type) || !cell.representations.get(type).state)
                                    return;
                                var reprElementIds = (0, utils_1.getElementIdsFromRepresentation)(cell.representations.get(type).state);
                                reprElements_1[ref][type] = new Set(reprElementIds);
                                elementIdsSet.forEach(function (elementId) {
                                    if (reprElements_1[ref][type].has(elementId)) {
                                        elementIdsSet.delete(elementId);
                                    }
                                });
                            });
                            if (elementIdsSet.size) {
                                filteredItems_1.push({ ref: ref, elementIds: Array.from(elementIdsSet.values()) });
                            }
                        });
                        reprTypeItems_1 = (_c = {},
                            _c[types_1.RepresentationType.BallAndStick] = [],
                            _c[types_1.RepresentationType.Line] = [],
                            _c[types_1.RepresentationType.Stick] = [],
                            _c[types_1.RepresentationType.CPK] = [],
                            _c);
                        filteredItems_1.forEach(function (_a) {
                            var _b;
                            var ref = _a.ref, elementIds = _a.elementIds;
                            var reprTypeElementIds = (_b = {},
                                _b[types_1.RepresentationType.BallAndStick] = [],
                                _b[types_1.RepresentationType.Line] = [],
                                _b[types_1.RepresentationType.Stick] = [],
                                _b[types_1.RepresentationType.CPK] = [],
                                _b);
                            var reprTypeSet = new Map();
                            if (!(elementIds === null || elementIds === void 0 ? void 0 : elementIds.length))
                                return;
                            var cell = _this.plugin.managers.cell.get(ref);
                            var structure = (0, utils_1.getStructureByCell)(cell);
                            if (!structure) {
                                return;
                            }
                            var interactionElementIdsSet = new Set(elementIds);
                            var residueKeys = new Set(elementIds.map(function (elementId) { return (0, utils_1.getGranularityUniqueId)((0, utils_1.getAtomHierarchyByStructure)(structure, elementId), types_1.Granularity.Residue); }));
                            var residueMap = new Map();
                            structure.units.forEach(function (unit) {
                                unit.elements.forEach(function (element) {
                                    var data = (0, utils_1.getAtomHierarchyByUnit)(unit, element);
                                    var key = (0, utils_1.getGranularityUniqueId)(data, types_1.Granularity.Residue);
                                    if (residueKeys.has(key)) {
                                        if (!reprTypeSet.has(key)) {
                                            reprTypeSet.set(key, new Set());
                                        }
                                        if (interactionElementIdsSet.has(element) || data.typeSymbol !== 'H' || (0, utils_1.getHydrogenType)(structure, element) === types_1.HydrogenVariant.Polar) {
                                            residueMap.set(key, (0, tslib_1.__spreadArray)([element], (residueMap.has(key) ? residueMap.get(key) : []), true));
                                        }
                                        AtomReprTypeList.some(function (type) {
                                            var _a, _b;
                                            if ((_a = reprElements_1[ref][type]) === null || _a === void 0 ? void 0 : _a.has(element)) {
                                                (_b = reprTypeSet.get(key)) === null || _b === void 0 ? void 0 : _b.add(type);
                                            }
                                        });
                                    }
                                });
                            });
                            residueKeys.forEach(function (key) {
                                var _a, _b;
                                var type = reprTypeSet.get(key);
                                if (!type || type.size === 0) {
                                    (_a = reprTypeElementIds[types_1.RepresentationType.Stick]).push.apply(_a, residueMap.get(key));
                                    return;
                                }
                                if (type.size > 0) {
                                    (_b = reprTypeElementIds[Array.from(type.values())[0]]).push.apply(_b, residueMap.get(key));
                                }
                            });
                            AtomReprTypeList.forEach(function (type) {
                                if (!reprTypeElementIds[type].length)
                                    return;
                                reprTypeItems_1[type].push({ ref: ref, elementIds: reprTypeElementIds[type] });
                            });
                        });
                        i = 0, l = AtomReprTypeList.length;
                        _d.label = 2;
                    case 2:
                        if (!(i < l)) return [3 /*break*/, 5];
                        type = AtomReprTypeList[i];
                        if (!reprTypeItems_1[type].length) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.plugin.managers.representation.setMolecularRepr(reprTypeItems_1[type], type, true, false)];
                    case 3:
                        _d.sent();
                        _d.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        if (ref) {
                            this.plugin.managers.cell.update(ref, data);
                            // if (!strictMode) {
                            //   const items = getWholeResiduesCellItem(this.plugin, interactionElementIds)
                            //   await this.plugin.managers.representation.setMolecularRepr(items, RepresentationType.Stick, true, false)
                            // }
                            this.event.interactionUpdated.next({ from: from });
                            return [2 /*return*/, ref];
                        }
                        // if (!strictMode) {
                        //   const items = getWholeResiduesCellItem(this.plugin, interactionElementIds)
                        //   await this.plugin.managers.representation.setMolecularRepr(items, RepresentationType.Stick, true, false)
                        // }
                        this.event.interactionUpdated.next({ from: from });
                        return [2 /*return*/, this.plugin.managers.cell.create(data)];
                }
            });
        });
    };
    return RepresentationInteractions;
}(theme_1.RepresentationTheme));
exports.RepresentationInteractions = RepresentationInteractions;
//# sourceMappingURL=interactions.js.map