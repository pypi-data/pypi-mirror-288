"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructureSelectionQueries = exports.StructureSelectionCategory = void 0;
var builder_1 = require("../../mol-script/language/builder");
var base_1 = require("../../mol-script/runtime/query/base");
// import { QueryContext } from '../../mol-model/structure/query/context'
// import { PluginContext } from '../../mol-plugin/context'
// import { RuntimeContext } from '../../mol-task'
var StructureSelectionCategory;
(function (StructureSelectionCategory) {
    StructureSelectionCategory["Type"] = "Type";
    StructureSelectionCategory["Structure"] = "Structure Property";
    StructureSelectionCategory["Atom"] = "Atom Property";
    StructureSelectionCategory["Bond"] = "Bond Property";
    StructureSelectionCategory["Residue"] = "Residue Property";
    StructureSelectionCategory["AminoAcid"] = "Amino Acid";
    StructureSelectionCategory["NucleicBase"] = "Nucleic Base";
    StructureSelectionCategory["Manipulate"] = "Manipulate Selection";
    StructureSelectionCategory["Validation"] = "Validation";
    StructureSelectionCategory["Misc"] = "Miscellaneous";
    StructureSelectionCategory["Internal"] = "Internal";
})(StructureSelectionCategory = exports.StructureSelectionCategory || (exports.StructureSelectionCategory = {}));
function StructureSelectionQuery(label, expression, props) {
    var _a;
    if (props === void 0) { props = {}; }
    var _query;
    return {
        label: label,
        expression: expression,
        description: props.description || '',
        category: (_a = props.category) !== null && _a !== void 0 ? _a : StructureSelectionCategory.Misc,
        isHidden: !!props.isHidden,
        priority: props.priority || 0,
        referencesCurrent: !!props.referencesCurrent,
        get query() {
            if (!_query)
                _query = (0, base_1.compile)(expression);
            return _query;
        },
        ensureCustomProperties: props.ensureCustomProperties,
        // async getSelection(plugin, runtime, structure) {
        //   const current =
        //     plugin.managers.structure.selection.getStructure(structure)
        //   const currentSelection = current
        //     ? StructureSelection.Sequence(structure, [current])
        //     : StructureSelection.Empty(structure)
        //   if (props.ensureCustomProperties) {
        //     await props.ensureCustomProperties(
        //       { runtime, assetManager: plugin.managers.asset },
        //       structure
        //     )
        //   }
        //   if (!_query) _query = compile<StructureSelection>(expression)
        //   return _query(new QueryContext(structure, { currentSelection }))
        // }
    };
}
var polymer = StructureSelectionQuery('Polymer', builder_1.MolScriptBuilder.struct.modifier.union([
    builder_1.MolScriptBuilder.struct.generator.atomGroups({
        'entity-test': builder_1.MolScriptBuilder.core.logic.and([
            builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.ammp('entityType'), 'polymer']),
            builder_1.MolScriptBuilder.core.str.match([
                builder_1.MolScriptBuilder.re('(polypeptide|cyclic-pseudo-peptide|peptide-like|nucleotide|peptide nucleic acid)', 'i'),
                builder_1.MolScriptBuilder.ammp('entitySubtype')
            ])
        ])
    })
]), { category: StructureSelectionCategory.Type });
exports.StructureSelectionQueries = {
    polymer: polymer
};
//# sourceMappingURL=state.js.map