/**
 * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { Mat4, Vec3 } from '../../../mol-math/linear-algebra';
import { RepresentationParamsGetter, Representation, RepresentationContext } from '../../representation';
interface GridPocketData {
    gridPocket: {
        toFractional: Mat4;
        fromFractional: Mat4;
        volume: number;
        x: number;
        y: number;
        z: number;
        center: Vec3;
    };
    ref: Vec3;
}
export declare const GridPocketParams: {
    alpha: {
        defaultValue: number;
        type: "number";
        immediateUpdate?: boolean | undefined;
        isOptional?: boolean | undefined;
        label?: string | undefined;
        description?: string | undefined;
        legend?: import("../../../mol-util/legend").Legend | undefined;
        fieldLabels?: {
            [name: string]: string;
        } | undefined;
        isHidden?: boolean | undefined;
        shortLabel?: boolean | undefined;
        twoColumns?: boolean | undefined;
        isEssential?: boolean | undefined;
        category?: string | undefined;
        hideIf?: ((currentGroup: any) => boolean) | undefined;
        help?: ((value: any) => {
            description?: string | undefined;
            legend?: import("../../../mol-util/legend").Legend | undefined;
        }) | undefined;
        min?: number | undefined;
        max?: number | undefined;
        step?: number | undefined;
    };
    ignoreLight: {
        defaultValue: boolean;
        type: "boolean";
        isOptional?: boolean | undefined;
        label?: string | undefined;
        description?: string | undefined;
        legend?: import("../../../mol-util/legend").Legend | undefined;
        fieldLabels?: {
            [name: string]: string;
        } | undefined;
        isHidden?: boolean | undefined;
        shortLabel?: boolean | undefined;
        twoColumns?: boolean | undefined;
        isEssential?: boolean | undefined;
        category?: string | undefined;
        hideIf?: ((currentGroup: any) => boolean) | undefined;
        help?: ((value: any) => {
            description?: string | undefined;
            legend?: import("../../../mol-util/legend").Legend | undefined;
        }) | undefined;
    };
    colorX: PD.Color;
    colorY: PD.Color;
    colorZ: PD.Color;
    scale: PD.Numeric;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    bumpFrequency: PD.Numeric;
    bumpAmplitude: PD.Numeric;
    quality: PD.Select<"auto" | "medium" | "high" | "low" | "custom" | "highest" | "higher" | "lower" | "lowest">;
    material: PD.Group<PD.Normalize<{
        metalness: number;
        roughness: number;
        bumpiness: number;
    }>>;
    clip: PD.Group<PD.Normalize<{
        variant: import("../../../mol-util/clip").Clip.Variant;
        objects: PD.Normalize<{
            type: any;
            invert: any;
            position: any;
            rotation: any;
            scale: any;
        }>[];
    }>>;
    pocketColor: PD.Color;
    pocketScale: PD.Numeric;
    x: PD.Numeric;
    y: PD.Numeric;
    z: PD.Numeric;
    center: PD.Vec3;
};
export declare type GridPocketParams = typeof GridPocketParams;
export declare type GridPocketProps = PD.Values<GridPocketParams>;
export declare function getGridPocketData(x: number, y: number, z: number, center: Vec3): {
    ref: Vec3;
    gridPocket: {
        fromFractional: Mat4;
        toFractional: Mat4;
        x: number;
        y: number;
        z: number;
        center: Vec3;
        volume: number;
    };
};
export declare const enum GridPocketHelperAxis {
    None = 0,
    X = 1,
    Y = 2,
    Z = 3,
    XY = 4,
    XZ = 5,
    YZ = 6
}
export declare type GridPocketRepresentation = Representation<GridPocketData, GridPocketParams>;
export declare function GridPocketRepresentation(ctx: RepresentationContext, getParams: RepresentationParamsGetter<GridPocketData, GridPocketParams>): GridPocketRepresentation;
export {};
