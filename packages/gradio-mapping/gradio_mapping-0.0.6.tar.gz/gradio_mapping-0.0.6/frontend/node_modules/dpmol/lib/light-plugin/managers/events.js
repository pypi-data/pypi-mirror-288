"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsManager = void 0;
var rx_event_helper_1 = require("../../mol-util/rx-event-helper");
var constant_1 = require("../utils/constant");
var EventsManager = /** @class */ (function () {
    function EventsManager(plugin) {
        this.ev = rx_event_helper_1.RxEventHelper.create();
        this.allowEmptyClick = true;
        this.rightClick = this.ev();
        this.plugin = plugin;
        this.allowEmptyClick = true;
    }
    EventsManager.prototype.subscribe = function () {
        var _this = this;
        var _a, _b;
        (_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.interaction.click.subscribe(function (a) {
            if (a.current.loci.kind === 'empty-loci') {
                if (!_this.allowEmptyClick || a.button === 2)
                    return;
                _this.plugin.managers.selection.shape.event.change.next(a);
                _this.plugin.managers.selection.structure.event.change.next(a);
            }
            else if (a.current.repr.label === 'Molecular Surface' || a.current.loci.kind === 'group-loci') {
                _this.plugin.managers.selection.shape.event.change.next(a);
            }
            else if (a.current.loci.kind === 'element-loci' ||
                a.current.loci.kind === 'bond-loci') {
                _this.plugin.managers.selection.structure.event.change.next(a);
            }
            if (a.button === 2) {
                _this.rightClick.next({
                    loci: a.current,
                    modifiers: a.modifiers,
                    isEmpty: a.current.loci.kind === 'empty-loci',
                    isSelection: false,
                    reprType: constant_1.ReprLabelToType[a.current.repr.label],
                });
            }
        });
        (_b = this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.interaction.hover.subscribe(function (a) {
            if (a.current.loci.kind !== 'empty-loci') {
                _this.plugin.managers.highlight.setHoverSelection(a.current);
            }
            else {
                _this.plugin.managers.highlight.setHoverSelection();
            }
        });
    };
    EventsManager.prototype.setAllowEmptyClick = function (isAllow) {
        this.allowEmptyClick = isAllow;
    };
    return EventsManager;
}());
exports.EventsManager = EventsManager;
//# sourceMappingURL=events.js.map