"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeSelectionManager = void 0;
var marker_action_1 = require("../../../mol-util/marker-action");
var rx_event_helper_1 = require("../../../mol-util/rx-event-helper");
var types_1 = require("../../types");
var ReprLabelToType = {
    Dihedral: types_1.RepresentationType.Dihedral,
    Distance: types_1.RepresentationType.Distance,
    Angle: types_1.RepresentationType.Angle,
    Label: types_1.RepresentationType.Label,
    'Molecular Surface': types_1.RepresentationType.Surface,
};
var ShapeSelectionManager = /** @class */ (function () {
    function ShapeSelectionManager(plugin) {
        var _this = this;
        this.ev = rx_event_helper_1.RxEventHelper.create();
        this.prev = new Map();
        this.event = {
            change: this.ev(),
            add: this.ev(),
            remove: this.ev(),
            clear: this.ev()
        };
        this.plugin = plugin;
        this.selection = new Set();
        this.event.change.subscribe(function (a) {
            var _a = a.current, repr = _a.repr, loci = _a.loci;
            if (loci.kind === 'empty-loci') {
                _this.clear();
                return;
            }
            var type = ReprLabelToType[repr.label];
            if (type === types_1.RepresentationType.Surface) {
                a.current.loci = a.current.repr.getLoci();
            }
            plugin.cells.forEach(function (cell) {
                var _a;
                if (cell.representations.has(type) &&
                    ((_a = cell.representations.get(type)) === null || _a === void 0 ? void 0 : _a.state) === repr) {
                    if (!_this.selection.has(cell.ref)) {
                        _this.add({ item: { ref: cell.ref }, loci: a.current });
                    }
                    else if (a.button !== 2) {
                        _this.remove({ item: { ref: cell.ref }, loci: a.current });
                    }
                }
            });
        });
    }
    ShapeSelectionManager.prototype.add = function (data) {
        var _a, _b;
        var ref = data.item.ref;
        this.selection.add(ref);
        var cell = this.plugin.cells.get(ref);
        if (!cell)
            return;
        var repr = Array.from(cell.representations.values())[0];
        // Repr State Cache
        if (!(data === null || data === void 0 ? void 0 : data.loci) && !repr.state)
            return;
        var reprLoci = (_a = data.loci) !== null && _a !== void 0 ? _a : { repr: repr.state, loci: repr.state.getLoci() };
        (_b = this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.mark(reprLoci, marker_action_1.MarkerAction.Select);
        this.event.add.next({ ref: ref, loci: reprLoci });
        this.prev.set(ref, reprLoci);
        this.plugin.managers.selection.event.changed.next({});
    };
    ShapeSelectionManager.prototype.remove = function (data) {
        var _a, _b;
        var ref = data.item.ref;
        this.selection.delete(ref);
        var cell = this.plugin.cells.get(ref);
        if (!cell)
            return;
        var repr = Array.from(cell.representations.values())[0];
        // Repr State Cache
        if (!repr.state)
            return;
        var reprLoci = (_a = data.loci) !== null && _a !== void 0 ? _a : { repr: repr.state, loci: repr.state.getLoci() };
        (_b = this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.mark(reprLoci, marker_action_1.MarkerAction.Deselect);
        this.event.remove.next({ ref: ref, loci: reprLoci });
        this.prev.delete(ref);
        this.plugin.managers.selection.event.changed.next({});
    };
    ShapeSelectionManager.prototype.clear = function () {
        var _this = this;
        this.selection.clear();
        this.prev.forEach(function (loci) {
            var _a;
            (_a = _this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.mark(loci, marker_action_1.MarkerAction.Deselect);
        });
        this.prev.clear();
        this.event.clear.next({});
        this.plugin.managers.selection.event.changed.next({});
    };
    return ShapeSelectionManager;
}());
exports.ShapeSelectionManager = ShapeSelectionManager;
//# sourceMappingURL=shape.js.map