import { Vec3 } from '../../../mol-math/linear-algebra';
import { Structure } from '../../../mol-model/structure';
import { PluginContext } from '../../../mol-plugin/context';
import { PharmacophoreProps } from '../../../mol-repr/shape/loci/pharmacophore';
import { StateObject, StateObjectCell, StateTransform, StateTransformer } from '../../../mol-state';
import { StatefulPluginComponent } from '../../component';
import { PluginStateObject } from '../../objects';
export declare const PharmacophoreGroupTag = "Pharmacophore-group";
export declare const InteractionLineOrderLabelTag = "Interaction-line-order-label";
export declare type StructureInteractionLine = StateObjectCell<PluginStateObject.Shape.Representation3D, StateTransform<StateTransformer<PluginStateObject.Molecule.Structure.Selections, PluginStateObject.Shape.Representation3D, any>>>;
export interface StructureGridPocketManagerState {
    interactionLine: StructureInteractionLine[];
}
declare class PharmacophoreManager extends StatefulPluginComponent<StructureGridPocketManagerState> {
    private plugin;
    constructor(plugin: PluginContext);
    readonly behaviors: {
        state: import("rxjs").BehaviorSubject<StructureGridPocketManagerState>;
    };
    private stateUpdated;
    private _empty;
    private getTransforms;
    private sync;
    private getGroup;
    findStructure(structure: Structure, needMerge?: boolean): StateObjectCell<StateObject<any, StateObject.Type<any>>, StateTransform<StateTransformer<StateObject<any, StateObject.Type<any>>, StateObject<any, StateObject.Type<any>>, any>>>;
    addPharmacophore(center: Vec3, radius: number, vec?: Vec3, params?: PharmacophoreProps): Promise<string>;
}
export { PharmacophoreManager };
