"use strict";
/**
 * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AquasiteSizeThemeProvider = exports.AquasiteSizeTheme = exports.getAquasite = exports.getAquasiteSizeThemeParams = exports.AquasiteSizeThemeParams = void 0;
var structure_1 = require("../../mol-model/structure");
var param_definition_1 = require("../../mol-util/param-definition");
var Description = "Aquasite";
exports.AquasiteSizeThemeParams = {
    hydrogenSize: param_definition_1.ParamDefinition.Numeric(0.2, { min: 0, max: 10, step: 0.1 }),
    oxygenSize: param_definition_1.ParamDefinition.Numeric(0.2, { min: 0, max: 10, step: 0.1 }),
    baseSize: param_definition_1.ParamDefinition.Numeric(0.2, { min: 0, max: 2, step: 0.1 }),
};
function getAquasiteSizeThemeParams(ctx) {
    return exports.AquasiteSizeThemeParams; // TODO return copy
}
exports.getAquasiteSizeThemeParams = getAquasiteSizeThemeParams;
function getAquasite(unit, element, props) {
    if (structure_1.Unit.isAtomic(unit)) {
        var elementType = unit.model.atomicHierarchy.atoms.type_symbol.value(element).toUpperCase();
        return elementType === 'H' ? props.hydrogenSize : elementType === 'O' ? props.oxygenSize : 0;
    }
    else {
        return 0;
    }
}
exports.getAquasite = getAquasite;
function AquasiteSizeTheme(ctx, props) {
    function size(location) {
        var size = props.baseSize;
        if (structure_1.StructureElement.Location.is(location)) {
            size += getAquasite(location.unit, location.element, props);
        }
        return size;
    }
    return {
        factory: AquasiteSizeTheme,
        granularity: 'group',
        size: size,
        props: props,
        description: Description
    };
}
exports.AquasiteSizeTheme = AquasiteSizeTheme;
exports.AquasiteSizeThemeProvider = {
    name: 'aquasite',
    label: 'Aquasite',
    category: '',
    factory: AquasiteSizeTheme,
    getParams: getAquasiteSizeThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.AquasiteSizeThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure && ctx.structure.models.some(function (m) { return m.atomicConformation.B_iso_or_equiv.isDefined || m.coarseHierarchy.isDefined; }); }
};
//# sourceMappingURL=aquasite.js.map