"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .assistantmessage import AssistantMessage, AssistantMessageTypedDict
from .systemmessage import SystemMessage, SystemMessageTypedDict
from .toolmessage import ToolMessage, ToolMessageTypedDict
from .usermessage import UserMessage, UserMessageTypedDict
from mistralai_gcp.types import BaseModel
from mistralai_gcp.utils import get_discriminator
from pydantic import Discriminator, Tag
from typing import Literal, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


ChatCompletionChoiceFinishReason = Literal["stop", "length", "model_length", "error", "tool_calls"]

class ChatCompletionChoiceTypedDict(TypedDict):
    index: int
    finish_reason: ChatCompletionChoiceFinishReason
    message: NotRequired[MessageTypedDict]
    

class ChatCompletionChoice(BaseModel):
    index: int
    finish_reason: ChatCompletionChoiceFinishReason
    message: Optional[Message] = None
    

MessageTypedDict = Union[SystemMessageTypedDict, UserMessageTypedDict, AssistantMessageTypedDict, ToolMessageTypedDict]


Message = Annotated[Union[Annotated[AssistantMessage, Tag("assistant")], Annotated[SystemMessage, Tag("system")], Annotated[ToolMessage, Tag("tool")], Annotated[UserMessage, Tag("user")]], Discriminator(lambda m: get_discriminator(m, "role", "role"))]

