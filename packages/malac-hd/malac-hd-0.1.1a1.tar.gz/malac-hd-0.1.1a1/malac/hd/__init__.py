from abc import ABC, abstractmethod

__version__ = "0.1.1alpha1"

class ConvertMaster(ABC):
    @abstractmethod
    def convert(self, input, o_module): # TODO:sbe adapt - this is not what is implemented/needed in base classes
        pass
        # return mapping_as_py

# not sure if this class will be needed, it is only unsed inside the into py converted map


class TransformMaster(ABC):
    @abstractmethod
    def transform(self, source_path, target_path):
        pass

list_m_modules = {  # this are modules that can be fully created for malac_hd or Subclasses extending modules that are fully generated by generateDS
    # for StructureMapSub, in this module are additionally planned
    # ConceptMapSub & StructureDefinitionSub (this one also uses
    # ElementDefinitionSub with the <map> element)
    ".4.fhir.xml": "fhir.r4.generator.resource",
    #".4.fhir.map": "fhir4fml"
}

list_i_o_modules = { # this are modules that are fully generated by generateDS
    "http://hl7.org/fhir/StructureDefinition":"fhir.r4",
    "http://hl7.org/fhir/4.0/StructureDefinition":"fhir.r4",
    #"http://hl7.org/fhir/StructureDefinition":"fhir5",
    "http://hl7.org/fhir/cda/StructureDefinition":"cda.at_ext",
    "http://hl7.org/cda/stds/core/StructureDefinition":"cda.at_ext"
}
