"use strict";(self.webpackChunkjlab_homepage=self.webpackChunkjlab_homepage||[]).push([[689],{689:(e,n,t)=>{t.r(n),t.d(n,{default:()=>u});var o=t(974),a=t(607),s=t(53),r=t(74),i=t(465),d=t(256);class c extends d.Widget{constructor(e){super();const n=e;this.addClass("my-apodWidget");const t=document.createElement("div");t.id="groupContainer",this.node.innerHTML="\n\n        <h2>Workspace</h2>\n        <h4>Bei Fragen oder Gruppenwechsel kontaktieren Sie uns bitte Ã¼ber admin@databrix.org</h4>\n      ",this.node.appendChild(t);for(const e in n){const o=document.createElement("div");o.classList.add("card");const a=document.createElement("div");a.classList.add("group-name"),a.textContent=e;const s=document.createElement("div");s.classList.add("group-items"),n[e].forEach((e=>{const n=document.createElement("div");n.textContent=`- ${e}`,s.appendChild(n)})),o.appendChild(a),o.appendChild(s),t.appendChild(o)}}}class l extends d.Widget{constructor(e,n){super();const t=r.PageConfig.getBaseUrl(),o=new URL(t).pathname,s=window.location.origin;let i;i=o.includes("/user/")?`${s}${o.split("/user/")[0]}`:`${s}`;const d=`${i}`,l=`${i}/hub/admin#/groups`,u=document.createElement("div");u.classList.add("button-container"),this.addClass("my-apodWidget"),this.node.innerHTML='\n        <div class="container">\n          <h1>Databrix Lab</h1>\n          <p class="subtitle">Lernen Sie Data Science und Machine Learning in der Praxis!</p>\n        </div>\n      ',this.node.appendChild(u),u.innerHTML=n?`\n          <button data-commandLinker-command="nbgrader:open-formgrader" class="button">\n            <div class="icon"></div>\n            <span>Projekte verwalten</span>\n          </button>\n          <button class="button secondary" onclick="window.location.href = ${l};">\n            <div class="icon admin-icon"></div>\n            <span>Gruppen verwalten</span>\n          </button>\n        `:'\n          <button data-commandLinker-command="nbgrader:open-assignment-list" class="button">\n            <div class="icon"></div>\n            <span>Projekte starten</span>\n          </button>\n          <button id="GroupInfoButton" class="button secondary">\n            <div class="icon"></div>\n            <span>Mein Workspace</span>\n          </button>\n        ',this.node.querySelector("#GroupInfoButton").addEventListener("click",(()=>{!async function(e,n){var t;try{const e=new URL(window.location.href).pathname.split("/user/");if(e.length>1){const n=e[1].split("/")[0];console.log("Subpath after /user/:",n),alert(`Subpath after /user/: ${n}`)}else console.log("No subpath after /user/ found"),alert("No subpath after /user/ found");const o=(null===(t=e.find((e=>e.includes("_"))))||void 0===t?void 0:t.split("_")[1])||"",s=`${n}/hub/api/groups/${o}`,i=r.PageConfig.getToken();if(!i)throw new Error("API token is not available from PageConfig.");let d,l;try{const e=await fetch(s,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`token ${i}`}});if(!e.ok)throw new Error(`Network response was not ok: ${e.statusText}`);d=await e.json(),console.log("Response Data:",d),l={"Ihre Gruppe":[o],"Ihre Teammates":d.users}}catch(e){console.error("Error fetching data:",e),l={users:[e]}}const u=new c(l);(0,a.showDialog)({title:"Workspace Information",body:u,buttons:[a.Dialog.okButton()]})}catch(e){let n="Could not retrieve group information.";e.response&&404===e.response.status?n="Server endpoint not found.":e.message&&(n=e.message),(0,a.showDialog)({title:"Error",body:n,buttons:[a.Dialog.okButton()]})}}(0,d)}))}}const u={id:"jlab_homepage:plugin",description:"A JupyterLab extension for databrix homepage with frontend and backend",autoStart:!0,requires:[a.ICommandPalette,o.ILabShell],optional:[o.ILayoutRestorer],activate:function(e,n,t,o,d){var c,u;console.log("JupyterLab extension databrix homepage is activated!");let h=null;(async function(e="",n={}){const t=i.ServerConnection.makeSettings(),o=r.URLExt.join(t.baseUrl,"jlab-homepage",e);let a;try{a=await i.ServerConnection.makeRequest(o,n,t)}catch(e){throw new i.ServerConnection.NetworkError(e)}let s=await a.text();if(s.length>0)try{s=JSON.parse(s)}catch(e){console.log("Not a JSON response body.",a)}if(!a.ok)throw new i.ServerConnection.ResponseError(a,s.message||s);return s})("gruppeninfo").then((e=>{h=e.dozent})).catch((e=>{console.error(`The jlab_homepage server extension appears to be missing.\n${e}`)}));const m=null===(u=null===(c=e.serviceManager.user)||void 0===c?void 0:c.identity)||void 0===u?void 0:u.username;let g;const b="launcher:create";e.commands.addCommand(b,{label:"Databrix Lab Homepage",execute:()=>{const n=new l(null!=m?m:"unknown",null!=h&&h);g=new a.MainAreaWidget({content:n});const o="home-"+p.id++;g.id=o,g.title.label="Databrix Lab Homepage",g.title.closable=!0,e.shell.add(g,"main"),e.shell.activateById(g.id),t.layoutModified.connect((()=>{g.title.closable=(0,s.toArray)(e.shell.widgets("main")).length>1}),g)}}),t&&Promise.all([e.restored,null==d?void 0:d.model.restored]).then((()=>{t.layoutModified.connect((()=>{t.isEmpty("main")&&e.commands.execute(b)}))})),n.addItem({command:b,category:"Databrix"}),t&&(t.addButtonEnabled=!0,t.addRequested.connect(((n,t)=>{var o;const a=(null===(o=t.currentTitle)||void 0===o?void 0:o.owner.id)||t.titles[t.titles.length-1].owner.id;return e.commands.execute(b,{ref:a})})))}};var p;!function(e){e.id=0}(p||(p={}))}}]);