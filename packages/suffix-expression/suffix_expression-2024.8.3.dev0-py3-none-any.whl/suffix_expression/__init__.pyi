__all__ = ['Expression','Suffix_expression','Se','E']
class Expression(object):
    def __init__(self,expression:str|Expression)->None:
        self.expression = expression
        self.index = 0
        if self.expression[0] in ['+','-','*','/']:self.__type = 'prefix expression'
        elif self.expression[-1] in ['+','-','*','/']:self.__type = 'suffix expression'
        elif self.expression[1] in ['+','-','*','/']:self.__type = 'affix expression'
        else:raise ExpressionError('This expression isn\'t one of '
                                   'affix expression,suffix expression or prefix expression.')
    def __str__(self)->str:...
    def __len__(self)->int:...
    def __iter__(self)->Expression:...
    def __next__(self)->str:...
    def __getitem__(self, item)->str:...
    def type(self):...
class ExpressionError(Exception):
    def __init__(self,m:str):
        self.m = m
    def __str__(self):...
class Suffix_expression(object):

    @staticmethod
    def generating(expression:str|bytes|Expression)->Expression:...
    @staticmethod
    def count(expression:str|bytes|Expression)->int:...
Se = Suffix_expression
E = Expression