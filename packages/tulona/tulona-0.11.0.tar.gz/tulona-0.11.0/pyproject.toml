[project]
name = "tulona"
version = "0.11.0"
description = "A tool to compare data from different sources."
dependencies = [
  "click~=8.1",
  "ruamel.yaml~=0.18",
  "psycopg2-binary~=2.9",
  "pymysql~=1.1",
  "cryptography~=42.0",
  "snowflake-sqlalchemy>=1.5.3",
  "pyodbc~=5.1",
  "pandas~=1.5", # can't upgrade until https://github.com/pandas-dev/pandas/issues/57053 is resolved
  "openpyxl~=3.1",
  "Jinja2~=3.1",
  "pydantic~=2.7",
  "sqlalchemy-bigquery",
  "google-cloud-bigquery-storage",
]
requires-python = ">= 3.8"
authors = [
  {name = "Mrinal Kanti Sardar"},
]
readme = "README.rst"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  # "Programming Language :: Python :: 3.12",
]
keywords = [
  "tulona",
  "comparison",
  "data comparison",
  "database scan",
  "database profile",
]

[project.optional-dependencies]
dev = [
  "pytest",
  "flake8",
  "coverage",
  "black",
  "isort",
  "pytest-cov",
  "faker",
  "bump-my-version",
  "build",
  "twine",
]

[project.scripts]
tulona = "tulona.cli.base:cli"

[project.urls]
Homepage = "https://github.com/mrinalsardar/tulona"
Documentation = "https://github.com/mrinalsardar/tulona"
Repository = "https://github.com/mrinalsardar/tulona.git"
Issues = "https://github.com/mrinalsardar/tulona/issues"
# Changelog = "https://github.com/mrinalsardar/tulona/blob/master/CHANGELOG.md"

[build-system]
requires = ["setuptools >= 69.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["core"]
include = ["tulona", "tulona.*"]

[tool.black]
line-length = 90
target-version = ["py38", "py39", "py310", "py311"]
exclude = '''

(
  /(
      \.git          # exclude a few common directories in the
    | \.github       # root of the project
    | \.pytest_cache
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.coverage.run]
branch = true
source = ["core"]
omit = [
  "core/setup.py",
  "core/tulona/__init__.py",
  "core/tulona/config/__init__.py",
  "core/tulona/util/__init__.py",
  "core/tulona/config/profile.py",
  "core/tulona/config/project.py",
  "core/tulona/config/runtime.py",
  "core/tulona/util/database.py",
  "core/tulona/util/filesystem.py",
]

[tool.coverage.report]
exclude_also = [
  "pargma: no cover",
  "def __init__",
  "if __name__ == .__main__.:",
  "raise AssertionError",
  "raise NotImplementedError",
  "raise TulonaNotImplementedError",
  "raise TulonaProjectException",
  "raise TulonaInvalidProjectConfigError",
  "raise TulonaUnSupportedExecEngine",
  "raise TulonaProfileException",
  "raise TulonaInvalidProfileConfigError",
  "raise TulonaMissingPropertyError",
  "raise TulonaMissingArgumentError",
  "raise TulonaMissingPrimaryKeyError",
  "raise TulonaFundamentalError",
]

[tool.isort]
profile = "black"
line_length = 90
skip = [".gitignore"]

[tool.bumpversion]
current_version = "0.11.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
