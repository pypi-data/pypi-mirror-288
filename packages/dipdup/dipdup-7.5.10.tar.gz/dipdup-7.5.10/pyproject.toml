[project]
name = "dipdup"
description = "Modular framework for creating selective indexers and featureful backends for dapps"
version = "7.5.10"
authors = [
    { name = "Lev Gorodetskii", email = "dipdup@drsr.io" },
    { name = "Vladimir Bobrikov", email = "vladimir_bobrikov@pm.me" },
    { name = "Michael Zaikin", email = "mz@baking-bad.org" },
]
maintainers = [
    { name = "Lev Gorodetskii", email = "dipdup@drsr.io" },
    { name = "Vladimir Bobrikov", email = "vladimir_bobrikov@pm.me" },
]
readme = "README.md"
requires-python = ">=3.11,<3.12"
keywords = [
    "api",
    "backend",
    "blockchain",
    "crypto",
    "cryptocurrencies",
    "dapp",
    "declarative",
    "ethereum",
    "evm",
    "framework",
    "indexer",
    "indexers",
    "michelson",
    "scheduler",
    "sdk",
    "smart-contracts",
    "tezos",
    "tzkt",
    "web3",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]
dependencies = [
    "datamodel-code-generator~=0.25.0",
    "pydantic~=1.10.11",
    "tortoise-orm==0.19.3",
    "web3~=6.2",
    "aiohttp~=3.8",
    "aiolimiter~=1.0",
    "anyio>=4.1.0",
    "APScheduler~=3.8",
    "async-lru~=2.0",
    "asyncpg~=0.29",
    "click~=8.0",
    "eth-abi>=5.0.1,<6",
    "lru-dict~=1.3.0",
    "orjson~=3.9",
    "prometheus-client~=0.17",
    "pycryptodome~=3.17",
    "pyhumps~=3.0",
    "pysignalr~=1.0",
    "python-dotenv~=1.0",
    "ruamel.yaml~=0.17",
    "sentry-sdk~=1.29",
    "setuptools>=68.1.2",
    "sqlparse~=0.4",
    "strict-rfc3339~=0.7",
    "survey~=4.4",
    "tabulate~=0.9",
    "uvloop>=0.19.0",
]

[project.license]
text = "MIT"

[project.urls]
Homepage = "https://dipdup.io/"
Documentation = "https://dipdup.io/docs"
Repository = "https://github.com/dipdup-io/dipdup"

[project.scripts]
dipdup = "dipdup.cli:cli"

[tool.pdm.resolution.overrides]
lru-dict = "1.3.0"

[tool.pdm.dev-dependencies]
dev = [
    "black",
    "docker",
    "mypy",
    "pprofile",
    "pytest~=7.4",
    "pytest-aiohttp",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-xdist",
    "ruff",
    "types-pytz",
    "types-tabulate",
]
docs = [
    "git+https://github.com/dipdup-io/dc_schema.git@pydantic-dc",
    "Sphinx",
    "sphinx-click",
    "sphinx-markdown-builder",
    "watchdog",
]

[tool.pdm.scripts.help]
cmd = "make"
help = "Show this help (default)"

[tool.pdm.scripts.all]
cmd = "make all"
help = "Run an entire CI pipeline"

[tool.pdm.scripts.format]
cmd = "make format"
help = "Format with all tools"

[tool.pdm.scripts.lint]
cmd = "make lint"
help = "Lint with all tools"

[tool.pdm.scripts.test]
cmd = "make test"
help = "Run tests"

[tool.pdm.scripts.black]
cmd = "make black"
help = "Format with black"

[tool.pdm.scripts.ruff]
cmd = "make ruff"
help = "Lint with ruff"

[tool.pdm.scripts.mypy]
cmd = "make mypy"
help = "Lint with mypy"

[tool.pdm.scripts.image]
cmd = "make image"
help = "Build Docker image"

[tool.pdm.scripts.demos]
cmd = "make demos"
help = "Recreate demo projects from templates"

[tool.pdm.scripts.docs_build]
cmd = "make docs_build"
help = "Build docs"

[tool.pdm.scripts.docs_serve]
cmd = "make docs_serve"
help = "Build docs and start frontend server"

[tool.pdm.scripts.docs_watch]
cmd = "make docs_watch"
help = "Build docs and watch for changes"

[tool.pdm.scripts.fixme]
cmd = "make fixme"
help = "Find FIXME and TODO comments"

[tool.pdm.scripts.update]
cmd = "make update"
help = "Update dependencies and dump requirements.txt"

[tool.pdm.scripts.before_release]
cmd = "make before_release"
help = "Prepare for a new release after updating version in pyproject.toml"

[tool.pdm.build.targets.wheel]
packages = [
    "src/dipdup",
]

[tool.black]
line-length = 120
target-version = [
    "py311",
]
skip-string-normalization = true

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
ignore = [
    "E402",
    "E501",
    "TCH001",
    "E721",
]
extend-select = [
    "B",
    "C4",
    "FA",
    "G",
    "I",
    "PTH",
    "Q",
    "RET",
    "RUF",
    "TCH",
    "UP",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = [
    "dipdup",
]

[tool.mypy]
python_version = "3.11"
plugins = [
    "pydantic.mypy",
]
strict = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
log_cli_level = "WARNING"

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "raise FrameworkException",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "if env.DEBUG:",
]

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"
