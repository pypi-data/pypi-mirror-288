from typing import Dict, Any, Optional, Union, List
import pandas as pd
from sqlalchemy import Engine
from sqlalchemy.engine import Engine as SQLAlchemyEngine

class DatabaseError(Exception): ...
class TableNotFoundError(DatabaseError): ...
class ColumnNotFoundError(DatabaseError): ...
class InvalidOperationError(DatabaseError): ...

def manage_db(database_url: str, table_name: str, operation: str, data: Optional[pd.DataFrame] = None, column_name: Optional[str] = None, row_identifier: Optional[Dict[str, Any]] = None) -> Optional[pd.DataFrame]: ...
def delete_table(engine: SQLAlchemyEngine, table_name: str) -> None: ...
def delete_row(engine: SQLAlchemyEngine, table_name: str, row_identifier: Dict[str, Any]) -> None: ...
def delete_column(engine: SQLAlchemyEngine, table_name: str, column_name: str) -> None: ...

class DatabaseManager:
    database_url: str
    engine: SQLAlchemyEngine
    _table_name: Optional[str]
    _data: Optional[pd.DataFrame]

    def __init__(self, database_url: str) -> None: ...
    def use_table(self, table_name: str) -> 'DatabaseManager': ...
    def read(self) -> 'DatabaseManager': ...
    def write(self, data: Optional[pd.DataFrame] = None) -> 'DatabaseManager': ...
    def create(self, data: pd.DataFrame) -> 'DatabaseManager': ...
    def delete_table(self) -> 'DatabaseManager': ...
    def delete_column(self, column_name: str) -> 'DatabaseManager': ...
    def delete_row(self, row_identifier: Dict[str, Any]) -> 'DatabaseManager': ...
    def search(self, conditions: Union[Dict[str, Any], str], limit: Optional[int] = None, case_sensitive: bool = False) -> 'DatabaseManager': ...
    def backup(self, file_path: str, columns: Optional[List[str]] = None) -> 'DatabaseManager': ...
    def restore(self, file_path: str, mode: str = 'replace') -> 'DatabaseManager': ...
    def get_data(self) -> Optional[pd.DataFrame]: ...
