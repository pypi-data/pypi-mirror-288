"use strict";(self.webpackChunkjupyterlab_double_sharp=self.webpackChunkjupyterlab_double_sharp||[]).push([[800],{800:(t,e,r)=>{r.r(e),r.d(e,{ArrayMultimap:()=>n,SetMultimap:()=>o});class s{constructor(t,e){if(this.size_=0,this.map=new Map,this.operator=t,e)for(const[t,r]of e)this.put(t,r);return this}get size(){return this.size_}get(t){const e=this.map.get(t);return e?this.operator.clone(e):this.operator.create()}put(t,e){let r=this.map.get(t);return r||(r=this.operator.create()),!!this.operator.add(e,r)&&(this.map.set(t,r),this.size_++,!0)}putAll(t,e){let r=0;if(e){const s=t,n=e;for(const t of n)this.put(s,t),r++}else{if(!(t instanceof s))throw new TypeError("unexpected arguments");for(const[e,s]of t.entries())this.put(e,s),r++}return r>0}has(t){return this.map.has(t)}hasEntry(t,e){return this.operator.has(e,this.get(t))}delete(t){return this.size_-=this.operator.size(this.get(t)),this.map.delete(t)}deleteEntry(t,e){const r=this.get(t);return!!this.operator.delete(e,r)&&(this.map.set(t,r),this.size_--,!0)}clear(){this.map.clear(),this.size_=0}keys(){return this.map.keys()}entries(){const t=this;return function*(){for(const[e,r]of t.map.entries())for(const t of r)yield[e,t]}()}values(){const t=this;return function*(){for(const[,e]of t.entries())yield e}()}forEach(t,e){for(const[r,s]of this.entries())t.call(void 0===e?this:e,s,r,this)}[Symbol.iterator](){return this.entries()}asMap(){const t=new Map;for(const e of this.keys())t.set(e,this.operator.clone(this.get(e)));return t}}class n extends s{constructor(t){super(new i,t)}get[Symbol.toStringTag](){return"ArrayMultimap"}}class i{create(){return[]}clone(t){return t.slice()}add(t,e){return e.push(t),!0}size(t){return t.length}delete(t,e){const r=e.indexOf(t);return r>-1&&(e.splice(r,1),!0)}has(t,e){return e.includes(t)}}class o extends s{constructor(t){super(new a,t)}get[Symbol.toStringTag](){return"SetMultimap"}}class a{create(){return new Set}clone(t){return new Set(t)}add(t,e){const r=e.size;return e.add(t),r!==e.size}size(t){return t.size}delete(t,e){return e.delete(t)}has(t,e){return e.has(t)}}}}]);