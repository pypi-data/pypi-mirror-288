# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .document_type import DocumentType


class DocumentResponse(pydantic_v1.BaseModel):
    """
    Examples
    --------
    from mercoa import DocumentResponse

    DocumentResponse(
        id="doc_37e6af0a-e637-48fd-b825-d6947b38c4e2",
        mime_type="application/pdf",
        uri="https://mercoa.com/pdf/not-real.pdf",
        type="INVOICE",
    )
    """

    id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    ID of the document. If not provided, this is a dynamic document that is generated on the fly.
    """

    mime_type: str = pydantic_v1.Field(alias="mimeType")
    type: DocumentType
    uri: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
