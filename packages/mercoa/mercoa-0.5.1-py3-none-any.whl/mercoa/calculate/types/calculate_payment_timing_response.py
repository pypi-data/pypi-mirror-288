# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class CalculatePaymentTimingResponse(pydantic_v1.BaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa import CalculatePaymentTimingResponse

    CalculatePaymentTimingResponse(
        estimated_processing_date=datetime.datetime.fromisoformat(
            "2024-01-02 00:00:00+00:00",
        ),
        business_days=3,
        estimated_processing_time=3,
        estimated_settlement_date=datetime.datetime.fromisoformat(
            "2024-01-05 00:00:00+00:00",
        ),
    )
    """

    estimated_processing_date: dt.datetime = pydantic_v1.Field(alias="estimatedProcessingDate")
    """
    Estimated date the payment will be or was processed.
    """

    business_days: int = pydantic_v1.Field(alias="businessDays")
    """
    Number of business days between the estimated processing date and the estimated settlement date. This does not take into account bank holidays or weekends.
    """

    estimated_processing_time: int = pydantic_v1.Field(alias="estimatedProcessingTime")
    """
    Estimated payment time in days. This time takes into account bank holidays and weekends.
    """

    estimated_settlement_date: dt.datetime = pydantic_v1.Field(alias="estimatedSettlementDate")
    """
    Estimated date the payment will be or was settled. This is the same as the request's deductionDate plus the paymentTiming.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
