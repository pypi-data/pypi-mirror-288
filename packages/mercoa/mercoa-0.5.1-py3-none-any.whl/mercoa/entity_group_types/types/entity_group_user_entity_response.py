# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...entity_types.types.entity_user_id import EntityUserId
from .entity_group_user_entity_request import EntityGroupUserEntityRequest


class EntityGroupUserEntityResponse(EntityGroupUserEntityRequest):
    """
    Examples
    --------
    from mercoa import EntityGroupUserEntityResponse

    EntityGroupUserEntityResponse(
        id="user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
        roles=["admin", "approver"],
        entity_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
    )
    """

    id: EntityUserId

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
