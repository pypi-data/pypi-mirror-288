# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class PaymentMethodBaseRequest(pydantic_v1.BaseModel):
    default_source: typing.Optional[bool] = pydantic_v1.Field(alias="defaultSource", default=None)
    """
    If true, this payment method will be set as the default source. Only one payment method can be set as the default source. If another payment method is already set as the default source, it will be unset.
    """

    default_destination: typing.Optional[bool] = pydantic_v1.Field(alias="defaultDestination", default=None)
    """
    If true, this payment method will be set as the default destination. Only one payment method can be set as the default destination. If another payment method is already set as the default destination, it will be unset.
    """

    external_accounting_system_id: typing.Optional[str] = pydantic_v1.Field(
        alias="externalAccountingSystemId", default=None
    )
    """
    ID for this payment method in the external accounting system (e.g Rutter or Codat)
    """

    frozen: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    If true, this payment method will be frozen. Frozen payment methods cannot be used for payments, but will still be returned in API responses.
    """

    metadata: typing.Optional[typing.Dict[str, str]] = pydantic_v1.Field(default=None)
    """
    Metadata associated with this payment method.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
