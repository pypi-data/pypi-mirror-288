# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...entity_types.types.entity_user_id import EntityUserId
from .approval_slot_id import ApprovalSlotId


class AddApproverRequest(pydantic_v1.BaseModel):
    """
    Examples
    --------
    from mercoa import AddApproverRequest

    AddApproverRequest(
        approval_slot_id="inap_9bb311c9-7c15-4c9e-8148-63814e0abec6",
        user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
    )
    """

    approval_slot_id: typing.Optional[ApprovalSlotId] = pydantic_v1.Field(alias="approvalSlotId", default=None)
    """
    The identifier for the approval slot this user is assigned to.
    """

    user_id: EntityUserId = pydantic_v1.Field(alias="userId")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
