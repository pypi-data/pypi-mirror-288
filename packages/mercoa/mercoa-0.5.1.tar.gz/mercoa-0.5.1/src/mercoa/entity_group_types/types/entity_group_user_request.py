# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .entity_group_user_entity_request import EntityGroupUserEntityRequest


class EntityGroupUserRequest(pydantic_v1.BaseModel):
    """
    Examples
    --------
    from mercoa import EntityGroupUserEntityRequest, EntityGroupUserRequest

    EntityGroupUserRequest(
        foreign_id="MY-DB-ID-12345",
        email="john.doe@acme.com",
        name="John Doe",
        entities=[
            EntityGroupUserEntityRequest(
                roles=["admin", "approver"],
                entity_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            ),
            EntityGroupUserEntityRequest(
                roles=["viewer"],
                entity_id="ent_574s93r-3943-fu39-g9dfr-33b42a55812c",
            ),
        ],
    )
    """

    foreign_id: str = pydantic_v1.Field(alias="foreignId")
    """
    The ID used to identify this user in your system. This is a required field and needs to be unique for all users in the group.
    """

    email: typing.Optional[str] = None
    name: typing.Optional[str] = None
    entities: typing.Optional[typing.List[EntityGroupUserEntityRequest]] = pydantic_v1.Field(default=None)
    """
    List of roles per entity. By default, the user will have no roles.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
