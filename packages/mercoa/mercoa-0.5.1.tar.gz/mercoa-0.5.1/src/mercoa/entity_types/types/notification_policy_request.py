# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class NotificationPolicyRequest(pydantic_v1.BaseModel):
    """
    Examples
    --------
    from mercoa import NotificationPolicyRequest

    NotificationPolicyRequest(
        disabled=True,
        additional_roles=[],
    )
    """

    disabled: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Set to true if the selected notification type should be disabled for this entity
    """

    additional_roles: typing.Optional[typing.List[str]] = pydantic_v1.Field(alias="additionalRoles", default=None)
    """
    List of user roles that should receive notifications in addition to the default users for this notification type
    """

    notify_payee_counterparty: typing.Optional[bool] = pydantic_v1.Field(alias="notifyPayeeCounterparty", default=None)
    """
    Set to true if the selected notification type should be sent to the counterparty if this is a payable invoice.
    """

    notify_payor_counterparty: typing.Optional[bool] = pydantic_v1.Field(alias="notifyPayorCounterparty", default=None)
    """
    Set to true if the selected notification type should be sent to the counterparty if this is a receivable invoice.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
