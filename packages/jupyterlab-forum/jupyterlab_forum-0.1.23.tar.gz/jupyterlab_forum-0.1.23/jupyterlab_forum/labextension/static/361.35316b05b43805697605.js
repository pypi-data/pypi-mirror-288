"use strict";(self.webpackChunkjupyterlab_forum=self.webpackChunkjupyterlab_forum||[]).push([[361],{361:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var o=n(607),s=n(256),i=n(74);async function a(e,t,n,o,s){const a=i.PageConfig.getToken(),r={Content:s,Author:t,ThemeID:n};try{const s=await fetch(o+"replytheme",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json",Authorization:`token ${a}`}});if(s.ok){const i=(await s.json()).ReplyID;T(e,n,o,t),console.log("Reply sent successfully with ID:",i)}else console.error("Failed to send reply:",s.status),T(e,n,o,t)}catch(e){console.error("Error sending reply:",e)}}function r(e,t,n,o){const s=e.node.querySelector("#themes-container");if(!s)return;const i=o.filter((e=>e.Sticky)),a=o.filter((e=>!e.Sticky));i.sort(((e,t)=>new Date(e.CreationTime).getTime()-new Date(t.CreationTime).getTime())),a.sort(((e,t)=>new Date(t.CreationTime).getTime()-new Date(e.CreationTime).getTime()));const r=(t-1)*n,l=r+n,c=[...i,...a].slice(r,l);s.innerHTML=c.map((e=>`\n\n        <div class="subforum-row ${e.Sticky?"sticky":""}">\n            ${e.Sticky?'<div class="sticky-symbol">ðŸ“Œ</div>':""}\n            <div class="subforum-description subforum-column">\n                <h4><a href="#" class="description-link" data-description-id="${e.ThemeID}">${e.Title}</a></h4>\n                <p>Created at ${new Date(e.CreationTime).toLocaleString()}</p>\n            </div>\n            <div class="subforum-info subforum-column">\n                <p>\n                  Posted by ${e.Author}\n                </p>\n                <p class="status-indicator">\n                  <span class="status-circle ${"Open"===e.Status?"status-open":"status-closed"}"></span>\n                  Status: ${e.Status}\n                </p>\n            </div>\n        </div>\n        <hr class="subforum-devider" />\n\n    `)).join("")}function l(e,t,n){const o=e.node.querySelector("#pagination-controls");if(!o)return;const s=Math.ceil(t/n);let i="";for(let e=1;e<=s;e++)i+=`<button class="page-link" data-page="${e}">${e}</button>`;o.innerHTML=i}async function c(e,t){const n=i.PageConfig.getToken();try{const o=await fetch(t,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`token ${n}`}});if(!o.ok)throw new Error("Network response was not ok");const s=await o.json();e.allThemes=s.themes,e.showThemes=s.themes}catch(t){console.error("Error fetching themes:",t);const n=[{ThemeID:1,Title:"Example Theme 1",Author:"Admin",CreationTime:"2024-07-01T10:00:00",Status:"Open",Sticky:!0,Commentable:!1},{ThemeID:2,Title:"Example Theme 2",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"Closed",Sticky:!1,Commentable:!0},{ThemeID:3,Title:"Example Theme 3",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"Closed",Sticky:!1,Commentable:!0},{ThemeID:4,Title:"Example Theme 4",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"Closed",Sticky:!1,Commentable:!0},{ThemeID:5,Title:"Example Theme 5",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"Closed",Sticky:!1,Commentable:!0},{ThemeID:6,Title:"Example Theme 6",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"Closed",Sticky:!1,Commentable:!0},{ThemeID:7,Title:"Example Theme 7",Author:"User123",CreationTime:"2024-07-15T15:30:00",Status:"Closed",Sticky:!1,Commentable:!0}];e.showThemes=n,e.allThemes=n}r(e,1,e.themesPerPage,e.showThemes),l(e,e.allThemes.length,e.themesPerPage)}var d=n(960),u=n.n(d);function m(e){return new(u())("#themeDescription",{theme:"snow",modules:{toolbar:[[{header:[1,2,!1]}],["bold","italic","underline"],["link","image"],[{list:"ordered"},{list:"bullet"}]]}})}async function h(e,t,n,o){if(window.confirm("Are you sure you want to delete this theme?"))try{const s=await fetch(`${n}/deletetheme`,{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`token ${o}`},body:JSON.stringify({ThemeID:t})});s.ok?(e.node.innerHTML=e.originalHTML,c(e,n)):console.error("Failed to delete theme:",s.status)}catch(e){console.error("Error deleting theme:",e)}}async function p(e,t,n,o,s,i){try{const a="Open"===o?"Closed":"Open",r=await fetch(`${s}/togglestatus`,{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:`token ${i}`},body:JSON.stringify({ThemeID:n,Status:a})});r.ok?T(e,n,s,t):console.error("Failed to toggle status:",r.status)}catch(e){console.error("Error toggling status:",e)}}async function T(e,t,n,o){const s=i.PageConfig.getToken();try{const r=await async function(e){const t=new URL(e);t.pathname="/jupyterhub/hub/api/groups/dozent";const n=i.PageConfig.getToken();if(!n)throw new Error("API token is not available from PageConfig.");let o;try{const e=await fetch(t.toString(),{method:"GET",headers:{"Content-Type":"application/json",Authorization:`token ${n}`}});if(!e.ok)throw new Error(`Network response was not ok: ${e.statusText}`);o=await e.json(),console.log("Response Data:",o)}catch(e){console.error("Error fetching data:",e),o={users:[e]}}return o.users}(n),l=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`token ${s}`},body:JSON.stringify({ThemeID:t})}),d=await l.json();e.node.innerHTML=`\n          <div class="topic">\n            <div class="topic-header">\n              <h2 class="topic-title">${d.Title}</h2>\n              <div class="topic-meta">\n                <span class="topic-author">by ${d.Author}</span>\n                <span class="topic-date">${new Date(d.CreationTime).toLocaleString()}</span>\n              </div>\n            </div>\n\n            <div class="topic-body">\n              <div class="topic-content">${d.Description}</div>\n              <div class="topic-stats">\n                <span>${d.Replies.length} Replies</span> â€¢\n              </div>\n            </div>\n\n            <div class="topic-replies">\n              <h3>Replies:</h3>\n              <div class="replies-container">  </div>\n            </div>\n\n            ${d.Commentable?'\n              <div class="form-group">\n                <label for="themeDescription">Your Reply:</label>\n                <div id="themeDescription" name="quill-editor"></div>\n                  <button id="reply-to-theme" class="forum-btn forum-btn-reply">Commit Reply</button>\n              </div>\n            ':""}\n\n\n            <button id="back-to-forum" class="forum-btn forum-btn-primary">Back to Forum</button>\n            ${o!==d.Author&&!r.includes(o)||d.Sticky?"":`\n              <button id="toggle-status" class="forum-btn forum-btn-secondary">${"Open"===d.Status?"Close":"Open"} Theme</button>\n              <button id="delete-theme" class="forum-btn forum-btn-danger">Delete Theme</button>\n            `}\n          </div>\n        `;const u=e.node.querySelector(".replies-container");if(d.Replies.forEach((e=>{const t=document.createElement("div");t.className="reply",t.innerHTML=`\n              <div class="reply-header">\n                <span class="reply-author">${e.Author}</span>\n                <span class="reply-date">${new Date(e.CreationTime).toLocaleString()}</span>\n              </div>\n              <div class="reply-content">${e.Content}</div>\n            `,null==u||u.appendChild(t)})),d.Commentable){const s=m(),i=e.node.querySelector("#reply-to-theme");null==i||i.addEventListener("click",(()=>{a(e,o,t,n,s.root.innerHTML)}))}const T=e.node.querySelector("#toggle-status");T&&T.addEventListener("click",(async()=>{p(e,o,t,d.Status,n,s)}));const b=e.node.querySelector("#back-to-forum");null==b||b.addEventListener("click",(()=>{e.node.innerHTML=e.originalHTML,c(e,n)}));const y=e.node.querySelector("#delete-theme");y&&y.addEventListener("click",(async()=>{h(e,t,n,s)}))}catch(i){console.error("Error fetching theme details:",i);const r={Title:"Example Theme",Description:"This is an example theme description.",Author:"User123",CreationTime:"2024-07-24T10:08",Status:"Open",Sticky:!1,Commentable:!0,Replies:[{Author:"Example Author2",Content:"This is an example reply to the theme2.",CreationTime:"2024-07-22T10:08"},{Author:"Example Author",Content:"This is an example reply to the theme.",CreationTime:"2024-07-24T10:08"}]};e.node.innerHTML=`\n          <div class="topic">\n            <div class="topic-header">\n              <h2 class="topic-title">${r.Title}</h2>\n              <div class="topic-meta">\n                <span class="topic-author">by ${r.Author}</span>\n                <span class="topic-date">${new Date(r.CreationTime).toLocaleString()}</span>\n              </div>\n            </div>\n\n            <div class="topic-body">\n              <div class="topic-content">${r.Description}</div>\n              <div class="topic-stats">\n                <span>${r.Replies.length} Replies</span> â€¢\n              </div>\n            </div>\n\n            <div class="topic-replies">\n              <h2>Replies:</h2>\n              <div class="replies-container">  </div>\n            </div>\n\n            ${r.Commentable?'\n              <div class="form-group">\n                <label for="themeDescription">Your Reply:</label>\n                <div id="themeDescription" name="quill-editor"></div>\n                  <button id="reply-to-theme" class="forum-btn forum-btn-reply">Commit Reply</button>\n              </div>\n            ':""}\n\n            <button id="back-to-forum" class="forum-btn forum-btn-primary">Back to Forum</button>\n\n\n            ${r.Sticky?"":`\n              <button id="delete-theme" class="forum-btn forum-btn-danger">Delete Theme</button>\n              <button id="toggle-status" class="forum-btn forum-btn-secondary">${"Open"===r.Status?"Close":"Open"} Theme</button>\n            `}\n\n          </div>\n        `;const l=e.node.querySelector("#back-to-forum");null==l||l.addEventListener("click",(()=>{e.node.innerHTML=e.originalHTML,c(e,n)}));const d=e.node.querySelector(".replies-container");if(r.Replies.forEach((e=>{const t=document.createElement("div");t.className="reply",t.innerHTML=`\n              <div class="reply-header">\n                <span class="reply-author">${e.Author}</span> â€¢\n                <span class="reply-date">${new Date(e.CreationTime).toLocaleString()}</span>\n              </div>\n              <div class="reply-content">${e.Content}</div>\n            `,null==d||d.appendChild(t)})),r.Commentable){const s=m(),i=e.node.querySelector("#reply-to-theme");null==i||i.addEventListener("click",(()=>{a(e,o,t,n,s.root.innerHTML)}))}const u=e.node.querySelector("#toggle-status");u&&u.addEventListener("click",(async()=>{p(e,o,t,r.Status,n,s)}));const T=e.node.querySelector("#delete-theme");T&&T.addEventListener("click",(async()=>{h(e,t,n,s)}))}}n(131);class b extends s.Widget{constructor(e,t){super(),this.username=e,this.forumEndpointUrl=t,this.activeTab="all",this.currentPage=1,this.themesPerPage=5,this.allThemes=[],this.showThemes=[],this.addClass("forumWidget"),this.originalHTML='\n\n            <div class="subforum">\n              <div class="subforum-title">\n                <h2>Current Themes </h2>\n                <div class="tabs">\n                  <div class="tab-group">\n                    <button class="tab" data-tab="All">All</button>\n                    <button class="tab" data-tab="Open">Open</button>\n                    <button class="tab" data-tab="Closed">Closed</button>\n                  </div>\n                </div>\n\n                <div class="search-container">\n                  <input type="text" id="searchBox" placeholder="Search themes...">\n                </div>\n\n                <div class="actions-container">\n                  <button class="create-theme-button" id="createThemeButton"><strong>+</strong> New Theme</button>\n                </div>\n              </div>\n              <div id="themes-container"></div>\n              <div id="pagination-controls" class="pagination-controls"></div>\n            </div>\n\n            ',this.node.innerHTML=this.originalHTML,c(this,t),this.node.addEventListener("click",(t=>{var n,o;const s=t.target;if(s.classList.contains("create-theme-button")&&async function(e,t,n){e.node.innerHTML='\n\n  <div class="create-theme-form">\n    <div class="form-group">\n      <label for="themeTitle">Title:</label>\n      <input type="text" id="themeTitle" name="themeTitle" required>\n    </div>\n    <div class="form-group">\n      <label for="themeDescription">Description:</label>\n      <div id="themeDescription" name="quill-editor"></div>\n    </div>\n    <button id="submitThemeButton" class="forum-btn forum-btn-secondary"">\n      <strong>+</strong> Create Theme\n    </button>\n    <button id="back-to-forum" class="forum-btn forum-btn-primary">Back to Forum</button>\n  </div>\n  ';const o=m(),s=e.node.querySelector("#back-to-forum");null==s||s.addEventListener("click",(()=>{e.node.innerHTML=e.originalHTML,c(e,n)}));const a=e.node.querySelector("#submitThemeButton");a&&a.addEventListener("click",(async()=>{const s=e.node.querySelector("#themeTitle"),a=o.root.innerHTML,r=i.PageConfig.getToken(),l={Title:s.value,Description:a,Author:t,Status:"Open",Sticky:!1,Commentable:!0};try{const o=await fetch(n+"createtheme",{method:"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",Authorization:`token ${r}`}});if(o.ok){const s=(await o.json()).ThemeID;T(e,s,n,t)}else console.error("Failed to create theme:",o.status)}catch(e){console.error("Error creating theme:",e)}}))}(this,this.username,this.forumEndpointUrl),s.classList.contains("tab")&&(this.activeTab=null!==(n=s.dataset.tab)&&void 0!==n?n:"Open",this.currentPage=1,this.updateTabDisplay()),s.classList.contains("description-link")){const n=s.getAttribute("data-description-id");t.preventDefault(),T(this,n,this.forumEndpointUrl,e)}s.classList.contains("page-link")&&(this.currentPage=parseInt(null!==(o=s.dataset.page)&&void 0!==o?o:"1",10),r(this,this.currentPage,this.themesPerPage,this.showThemes))}))}updateTabDisplay(){this.showThemes=this.allThemes.filter((e=>"All"===this.activeTab||e.Status===this.activeTab)),r(this,this.currentPage,this.themesPerPage,this.showThemes),l(this,this.allThemes.length,this.themesPerPage)}}const y={id:"jupyterlab_forum:plugin",description:"A JupyterLab extension for databrix forum frontend",autoStart:!0,requires:[o.ICommandPalette],activate:function(e,t){console.log("JupyterLab extension forum is activated!");const n=e.serviceManager.user,s=i.PageConfig.getBaseUrl(),a=new URL(s).pathname,r=window.location.origin;let l;l=a.includes("/user/")?`${r}${a.split("/user/")[0]}`:`${r}`;const c=`${l}/services/forum/`;console.log("JupyterHub Base URL:",c);const d=()=>{const e=new b(n.identity?n.identity.name:"Unknown User",c),t=new o.MainAreaWidget({content:e});return t.id="forum-jupyterlab",t.title.label="Forum",t.title.closable=!0,t};let u=d();const m="forum:open";e.commands.addCommand(m,{label:"Databrix Forum",execute:()=>{u.isDisposed&&(u=d()),u.isAttached||e.shell.add(u,"main"),e.shell.activateById(u.id)}}),t.addItem({command:m,category:"Forum"})}}}}]);