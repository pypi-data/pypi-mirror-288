.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "sphinx" "1" "" "" "command-line client for the SPHINX password manager"
.hy
.SH NAME
.PP
sphinx - command-line client for the SPHINX password manager
.SH SYNOPSIS
.PP
\f[V]sphinx\f[R] init
.PP
echo \[lq]password\[rq] | \f[V]sphinx\f[R] create <user> <site>
[<u><l><d><s>] [<size>] [<symbols>] [<target password>]
.PP
echo \[lq]password\[rq] | \f[V]sphinx\f[R] get <user> <site>
.PP
echo -e \[lq]oldpassword\[rq] | \f[V]sphinx\f[R] change <user> <site>
[<u><l><d><s>] [<size>] [<symbols>] [<target password>]
.PP
[ echo \[lq]password\[rq] | ] \f[V]sphinx\f[R] commit <user> <site>
.PP
[ echo \[lq]password\[rq] | ] \f[V]sphinx\f[R] undo <user> <site>
.PP
[ echo \[lq]password\[rq] | ] \f[V]sphinx\f[R] delete <user> <site>
.PP
\f[V]sphinx\f[R] list <site>
.PP
\f[V]sphinx\f[R] qr [<svg>] [<key>]
.SH DESCRIPTION
.PP
SPHINX \[en] password Store that Perfectly Hides from Itself (No
Xaggeration) \[en] is an information-theoretically secure cryptographic
password storage protocol with strong security guarantees, as described
in the 2015 paper \[lq]Device-Enhanced Password Protocols with Optimal
Online-Offline Protection\[rq] by Jarecki, Krawczyk, Shirvanian, and
Saxena (https://ia.cr/2015/1099).
.PP
\f[V]sphinx\f[R] is the command-line client for the SPHINX protocol, it
provides access to all operations over the life-cycle of a password:
init, create, get, change, undo, commit, delete.
Additionally it provides also operations that make this more
user-friendly: listing of users associated with a host and export of the
configuration using a qr code.
.PP
In general if any operation requires a master(input) password, it is
expected on standard input, and any resulting account (output) password
is printed to standard output.
.SS INITIALIZING A CLIENT
.IP
.nf
\f[C]
sphinx init
\f[R]
.fi
.PP
This creates a new master key for the client, which is used to address
records on the sphinx server and authorize management operations on
those records.
.PP
You \f[B]should\f[R] back up and encrypt this master key.
.PP
If you want to use sphinx on a different device you want to copy this
master key also there.
For copying this (and other settigns) to the android client
\f[V]androsphinx\f[R] we have the \f[V]qr\f[R] operation, see below.
.SS CREATE PASSWORD
.PP
Creating a new password for a site is easy, pass your \[lq]master\[rq]
password on standard input to the client, and provide parameters like in
this example:
.IP
.nf
\f[C]
echo -n \[aq]my master password\[aq] | sphinx create username example.com ulsd 0 \[aq] !\[dq]#$%&\[rs]\[aq]()*+,-./:;<=>?\[at][\[rs]\[rs]]\[ha]_\[ga]{|}\[ti]\[aq]
\f[R]
.fi
.PP
The parameters to the client are
.IP \[bu] 2
Your master password on standard input.
Since the master password is not used to encrypt anything, you can
actually use different \[lq]master\[rq] passwords for different
user/site combinations.
.IP \[bu] 2
\f[V]create\f[R] for the operation, then
.IP \[bu] 2
\f[V]username\f[R] for the username on
.IP \[bu] 2
the site \f[V]example.com\f[R] then
.IP \[bu] 2
the password constraints, see sections \f[V]PASSWORD RULES\f[R] and
\f[V]PREDETERMINED PASSWORDS\f[R] for more info
.PP
If the command runs successfully - the resulting new high-entropy
password according to the given rules is printed to the console.
.SS GET PASSWORD
.PP
Getting a password from the sphinx oracle works by running the following
command:
.IP
.nf
\f[C]
echo -n \[aq]my master password\[aq] | sphinx get username example.com
\f[R]
.fi
.PP
You supply your master password on standard input, provide the
\f[V]get\f[R] operation as the first parameter, your \f[V]username\f[R]
as the 2nd and the \f[V]site\f[R] as the 3rd parameter.
The resulting password is returned on standard output.
.SS CHANGE PASSWORD
.PP
You might want to (or are forced to regularly) change your password,
this is easy while you can keep your master password the unchanged (or
you can change it too, if you want).
The command is this:
.IP
.nf
\f[C]
echo -en \[aq]my master password\[rs]nnew masterpassword\[aq] | sphinx change username example.com \[aq]ulsd\[aq] 0 \[aq] !\[dq]#$%&\[rs]\[aq]()*+,-./:;<=>?\[at][\[rs]\[rs]]\[ha]_\[ga]{|}\[ti]\[aq]
\f[R]
.fi
.PP
You supply your current master password on standard input, and separated
by a new-line you also provide the new master password.
The new master password can be the same as the old, but can also be a
new password if you want to change also the master password.
.PP
You provide the \f[V]change\f[R] operation as the first parameter to the
client, your \f[V]username\f[R] as the 2nd and the \f[V]site\f[R] as the
3rd parameter.
You also can provide similar password generation rule parameters that
were also used to create the original password, in case your account has
new password rules and you want/have to accomodate them.
For more information see the \f[V]PASSWORD RULES\f[R] and
\f[V]PREDETERMINED PASSWORDS\f[R] sections below.
.PP
Your new new password is returned on standard output.
.SS COMMITTING A CHANGED PASSWORD
.PP
After changing the password, you will still get the old password when
running the \f[V]get\f[R] operation.
To switch to use the new password you have to commit the changes with
.IP
.nf
\f[C]
echo -n \[aq]my master password\[aq] | sphinx commit username example.com
\f[R]
.fi
.PP
Depending on your \f[V]rwd_keys\f[R] configuration setting, you might
have to provide your master password on standard input to this
operation.
.PP
If all goes well, there is no output expected.
.SS UNDOING A PASSWORD COMMIT
.PP
If you somehow messed up and have to go back to use the old password,
you can undo committing your password using:
.IP
.nf
\f[C]
echo -n \[aq]my master password\[aq] | sphinx undo username example.com
\f[R]
.fi
.PP
Depending on your \f[V]rwd_keys\f[R] configuration setting, you might
have to provide your master password on standard input to this
operation.
.PP
If all goes well, there is no output expected.
.SS DELETING PASSWORDS
.PP
In case you want to delete a password, you can do using the following
command:
.IP
.nf
\f[C]
echo -n \[dq]my master password\[dq] | sphinx delete username example.com
\f[R]
.fi
.PP
You provide the \f[V]delete\f[R] operation as the first parameter to the
client, your \f[V]username\f[R] as the 2nd and the \f[V]site\f[R] as the
3rd parameter.
This command does not provide anything on standard output in case
everything goes well.
.PP
Depending on your \f[V]rwd_keys\f[R] configuration setting, you might
have to provide your master password on standard input to this
operation.
.SS QR CODE CONFIG
.PP
In case you want to use phone with the same sphinx server, you need to
export your config to the phone via a QR code.
.IP
.nf
\f[C]
sphinx qr
\f[R]
.fi
.PP
Will display a QR code containing only public information - like the
server host and port, and whether you use rwd_keys.
This is mostly useful if you want to share your setup with a friend or
family.
.PP
If you want to connect your own phone to the setup used with pwdsphinx,
you also need to export your client secret in the QR code:
.IP
.nf
\f[C]
sphinx qr key
\f[R]
.fi
.PP
This contains your client secret, and you should keep this QR code
confidential.
Make sure there is no cameras making copies of this while this QR code
is displayed on your screen.
.PP
If for whatever reason you want to display the QR code as an SVG, just
append the \f[V]svg\f[R] keyword to the end of the \f[V]sphinx qr\f[R]
command.
.SS PASSWORD RULES
.PP
When creating or changing passwords you can specify rules limiting the
size and characters allowed in the output password.
This is specified as follows:
.PP
The letters \f[V]ulsd\f[R] stand in order for the following character
classes: - \f[V]u\f[R] upper-case letters, - \f[V]l\f[R] lower-case
letters, - \f[V]s\f[R] symbols and - \f[V]d\f[R] for digits.
.PP
The \f[V]s\f[R] is a short-cut to allow all of the symbols, if you are
limited by the server which symbols to use, you can specify the allowed
symbols explicitly.
Currently these are the symbols supported (note the leading space char):
.IP
.nf
\f[C]
 !\[dq]#$%&\[aq]()*+,-./:;<=>?\[at][\[rs]]\[ha]_\[ga]{|}\[ti]
\f[R]
.fi
.PP
Be careful, if you specify these on the command-line you\[cq]ll have to
escape the quotes you use for enclosing this list and possibly the
backslash char that is also part of this list.
In the \f[V]create username\f[R] example above the symbols are correctly
escaped, in case you need to copy/paste them.
.PP
For examples how to use these see the section \[lq]CREATE PASSWORD\[rq]
or \[lq]CHANGE PASSWORD\[rq].
.SS DEFAULT RULES
.PP
If you do not provide password rules, they will be defaulting to `ulsd'
and length as long as possible.
.SS PREDETERMINED OUTPUT PASSWORDS
.PP
In case for some reason you cannot use random passwords with your
account, or you want to store a \[lq]password\[rq] that you cannot
change, like a PIN code for example, or a passphrase shared with your
colleagues, you can specify a maximuxm 38 characte long password, that
will be generated by the SPHINX client for you.
In that case the command line looks like this (note the same syntax also
works for the \f[V]change\f[R] operation)
.IP
.nf
\f[C]
echo -n \[aq]my master password\[aq] | sphinx create username example.com \[dq]correct_battery-horse#staple\[dq]
\f[R]
.fi
.PP
In this case you cannot specify neither the accepted character classes,
nor the size, nor symbols, these will be deducted from the predetermined
password itself.
.SH CONFIGURATION
.PP
The client can be configured by any of the following files:
.IP \[bu] 2
\f[V]/etc/sphinx/config\f[R]
.IP \[bu] 2
\f[V]\[ti]/.sphinxrc\f[R]
.IP \[bu] 2
\f[V]\[ti]/.config/sphinx/config\f[R]
.IP \[bu] 2
\f[V]./sphinx.cfg\f[R]
.PP
Files are parsed in this order, this means global settings can be
overridden by per-user and per-directory settings.
.PP
The client can be configured changing the settings in the
\f[V][client]\f[R] section of the config file.
The \f[V]host\f[R] and \f[V]port\f[R] should match what you set in the
\f[V]oracle(1)\f[R] server.
.PP
The \f[V]datadir\f[R] (default: \f[V]\[ti]/.sphinx\f[R]) variable holds
the location for your client parameters.
Particularly it contains a masterkey which is used to derive secrets.
The master key - if not available - is generated by issuing an
\f[V]init\f[R] command.
You \f[B]should\f[R] back up and encrypt this master key.
.PP
\f[V]rwd_keys\f[R] toggles if the master password is required for
authentication of management operations.
.PP
The oracle is oblivious to this setting, this is purely a client-side
toggle, in theory it is possible to have different settings for
different \[lq]records\[rq] on the oracle.
.PP
\f[V]validate_password\f[R] Stores a check digit of 5 bits in on the
oracle, this helps to notice most typos of the master password, while
decreasing security slightly.
.PP
The \f[V]userlist\f[R] option (default: True) can disable the usage of
userlists.
This prohibits the server to correlate all the records that belong to
the same sphinx user relating to the same host.
The cost of this, is that the user has to remember themselves which
usernames they have at which host.
.SH SECURITY CONSIDERATIONS
.PP
You \f[B]should\f[R] back up and encrypt your master key.
.PP
The \f[V]rwd_keys\f[R] configuration setting, if set to False protects
against offline master password bruteforce attacks - which is also a
security guarantee of the original SPHINX protocol.
.PP
The drawback is that for known (host,username) pairs the according
record can be changed/deleted by an attacker if the clients masterkey is
available to them.
However neither the master nor the account password can leak this way.
This is merely a denial-of-service attack vector.
If \f[V]rwd_keys\f[R] is set to True, then this eliminates the
denial-of-service vector, but also negates the offline-bruteforce
guarantee of the SPHINX protocol.
This setting is really a compromise between availability of account
passwords versus the confidentiality of your master password.
.PP
The \f[V]validate_password\f[R] configuration setting if enabled,
decreases security slightly (by 5 bits).
In general it should be safe to enable.
.PP
In this man page we are using echo only for demonstration, you should
use something like this instead (or even directly \f[V]getpwd(1)\f[R]
from the contrib directory if you are not interested in customizing):
.IP
.nf
\f[C]
echo GETPIN | pinentry | grep \[aq]\[ha]D\[aq] | cut -c3- | sphinx create username example.com ulsd 0
\f[R]
.fi
.PP
Using pinentry you can go fancy and do double password input, and even
have something checking password quality for you, check it out, it\[cq]s
quite versatile.
.SH REPORTING BUGS
.PP
https://github.com/stef/pwdsphinx/issues/
.SH AUTHOR
.PP
Written by Stefan Marsiske.
.SH COPYRIGHT
.PP
Copyright \[co] 2023 Stefan Marsiske.
License GPLv3+: GNU GPL version 3 or later
<https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH SEE ALSO
.PP
https://www.ctrlc.hu/\[ti]stef/blog/posts/sphinx.html
.PP
https://www.ctrlc.hu/\[ti]stef/blog/posts/oprf.html
.PP
\f[V]oracle(1)\f[R], \f[V]getpwd(1)\f[R]
