# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAttachmentResult',
    'AwaitableGetAttachmentResult',
    'get_attachment',
    'get_attachment_output',
]

@pulumi.output_type
class GetAttachmentResult:
    """
    A collection of values returned by getAttachment.
    """
    def __init__(__self__, content=None, id=None, item_id=None):
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        pulumi.set(__self__, "content", content)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if item_id and not isinstance(item_id, str):
            raise TypeError("Expected argument 'item_id' to be a str")
        pulumi.set(__self__, "item_id", item_id)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Content of the attachment
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> str:
        """
        Identifier of the item the attachment belongs to
        """
        return pulumi.get(self, "item_id")


class AwaitableGetAttachmentResult(GetAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAttachmentResult(
            content=self.content,
            id=self.id,
            item_id=self.item_id)


def get_attachment(id: Optional[str] = None,
                   item_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAttachmentResult:
    """
    Use this data source to get the content on an existing item's attachment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_bitwarden as bitwarden
    import pulumi_kubernetes as kubernetes

    ssh = bitwarden.get_item_login(search="VPN/Credentials")
    ssh_private_key = bitwarden.get_attachment(id="4d6a41364d6a4dea8ddb1a",
        item_id=ssh.id)
    # Example of usage of the data source:
    ssh_keys = kubernetes.index.Kubernetes_secret("sshKeys",
        metadata=[{
            name: ssh-keys,
        }],
        data={
            private.key: data.bitwarden_attachment.vpn_ssh_private_key.content,
        })
    ```


    :param str id: Identifier.
    :param str item_id: Identifier of the item the attachment belongs to
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['itemId'] = item_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bitwarden:index/getAttachment:getAttachment', __args__, opts=opts, typ=GetAttachmentResult).value

    return AwaitableGetAttachmentResult(
        content=pulumi.get(__ret__, 'content'),
        id=pulumi.get(__ret__, 'id'),
        item_id=pulumi.get(__ret__, 'item_id'))


@_utilities.lift_output_func(get_attachment)
def get_attachment_output(id: Optional[pulumi.Input[str]] = None,
                          item_id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAttachmentResult]:
    """
    Use this data source to get the content on an existing item's attachment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_bitwarden as bitwarden
    import pulumi_kubernetes as kubernetes

    ssh = bitwarden.get_item_login(search="VPN/Credentials")
    ssh_private_key = bitwarden.get_attachment(id="4d6a41364d6a4dea8ddb1a",
        item_id=ssh.id)
    # Example of usage of the data source:
    ssh_keys = kubernetes.index.Kubernetes_secret("sshKeys",
        metadata=[{
            name: ssh-keys,
        }],
        data={
            private.key: data.bitwarden_attachment.vpn_ssh_private_key.content,
        })
    ```


    :param str id: Identifier.
    :param str item_id: Identifier of the item the attachment belongs to
    """
    ...
