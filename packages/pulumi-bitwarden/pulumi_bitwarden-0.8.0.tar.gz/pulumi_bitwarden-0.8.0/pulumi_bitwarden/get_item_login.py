# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetItemLoginResult',
    'AwaitableGetItemLoginResult',
    'get_item_login',
    'get_item_login_output',
]

@pulumi.output_type
class GetItemLoginResult:
    """
    A collection of values returned by getItemLogin.
    """
    def __init__(__self__, attachments=None, collection_ids=None, creation_date=None, deleted_date=None, favorite=None, fields=None, filter_collection_id=None, filter_folder_id=None, filter_organization_id=None, filter_url=None, folder_id=None, id=None, name=None, notes=None, object=None, organization_id=None, password=None, reprompt=None, revision_date=None, search=None, totp=None, type=None, uris=None, username=None):
        if attachments and not isinstance(attachments, list):
            raise TypeError("Expected argument 'attachments' to be a list")
        pulumi.set(__self__, "attachments", attachments)
        if collection_ids and not isinstance(collection_ids, list):
            raise TypeError("Expected argument 'collection_ids' to be a list")
        pulumi.set(__self__, "collection_ids", collection_ids)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if deleted_date and not isinstance(deleted_date, str):
            raise TypeError("Expected argument 'deleted_date' to be a str")
        pulumi.set(__self__, "deleted_date", deleted_date)
        if favorite and not isinstance(favorite, bool):
            raise TypeError("Expected argument 'favorite' to be a bool")
        pulumi.set(__self__, "favorite", favorite)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if filter_collection_id and not isinstance(filter_collection_id, str):
            raise TypeError("Expected argument 'filter_collection_id' to be a str")
        pulumi.set(__self__, "filter_collection_id", filter_collection_id)
        if filter_folder_id and not isinstance(filter_folder_id, str):
            raise TypeError("Expected argument 'filter_folder_id' to be a str")
        pulumi.set(__self__, "filter_folder_id", filter_folder_id)
        if filter_organization_id and not isinstance(filter_organization_id, str):
            raise TypeError("Expected argument 'filter_organization_id' to be a str")
        pulumi.set(__self__, "filter_organization_id", filter_organization_id)
        if filter_url and not isinstance(filter_url, str):
            raise TypeError("Expected argument 'filter_url' to be a str")
        pulumi.set(__self__, "filter_url", filter_url)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        pulumi.set(__self__, "notes", notes)
        if object and not isinstance(object, str):
            raise TypeError("Expected argument 'object' to be a str")
        pulumi.set(__self__, "object", object)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if reprompt and not isinstance(reprompt, bool):
            raise TypeError("Expected argument 'reprompt' to be a bool")
        pulumi.set(__self__, "reprompt", reprompt)
        if revision_date and not isinstance(revision_date, str):
            raise TypeError("Expected argument 'revision_date' to be a str")
        pulumi.set(__self__, "revision_date", revision_date)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)
        if totp and not isinstance(totp, str):
            raise TypeError("Expected argument 'totp' to be a str")
        pulumi.set(__self__, "totp", totp)
        if type and not isinstance(type, int):
            raise TypeError("Expected argument 'type' to be a int")
        pulumi.set(__self__, "type", type)
        if uris and not isinstance(uris, list):
            raise TypeError("Expected argument 'uris' to be a list")
        pulumi.set(__self__, "uris", uris)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def attachments(self) -> Sequence['outputs.GetItemLoginAttachmentResult']:
        """
        List of item attachments.
        """
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="collectionIds")
    def collection_ids(self) -> Sequence[str]:
        """
        Identifier of the collections the item belongs to.
        """
        return pulumi.get(self, "collection_ids")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        """
        Date the item was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="deletedDate")
    def deleted_date(self) -> str:
        """
        Date the item was deleted.
        """
        return pulumi.get(self, "deleted_date")

    @property
    @pulumi.getter
    def favorite(self) -> bool:
        """
        Mark as a Favorite to have item appear at the top of your Vault in the UI.
        """
        return pulumi.get(self, "favorite")

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetItemLoginFieldResult']:
        """
        Extra fields.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="filterCollectionId")
    def filter_collection_id(self) -> Optional[str]:
        """
        Filter search results by collection ID.
        """
        return pulumi.get(self, "filter_collection_id")

    @property
    @pulumi.getter(name="filterFolderId")
    def filter_folder_id(self) -> Optional[str]:
        """
        Filter search results by folder ID.
        """
        return pulumi.get(self, "filter_folder_id")

    @property
    @pulumi.getter(name="filterOrganizationId")
    def filter_organization_id(self) -> Optional[str]:
        """
        Filter search results by organization ID.
        """
        return pulumi.get(self, "filter_organization_id")

    @property
    @pulumi.getter(name="filterUrl")
    def filter_url(self) -> Optional[str]:
        """
        Filter search results by URL.
        """
        return pulumi.get(self, "filter_url")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        """
        Identifier of the folder.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notes(self) -> str:
        """
        Notes.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Login password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def reprompt(self) -> bool:
        """
        Require master password “re-prompt” when displaying secret in the UI.
        """
        return pulumi.get(self, "reprompt")

    @property
    @pulumi.getter(name="revisionDate")
    def revision_date(self) -> str:
        """
        Last time the item was updated.
        """
        return pulumi.get(self, "revision_date")

    @property
    @pulumi.getter
    def search(self) -> Optional[str]:
        """
        Search items matching the search string.
        """
        return pulumi.get(self, "search")

    @property
    @pulumi.getter
    def totp(self) -> str:
        """
        Verification code.
        """
        return pulumi.get(self, "totp")

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uris(self) -> Sequence['outputs.GetItemLoginUriResult']:
        """
        URI.
        """
        return pulumi.get(self, "uris")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Login username.
        """
        return pulumi.get(self, "username")


class AwaitableGetItemLoginResult(GetItemLoginResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetItemLoginResult(
            attachments=self.attachments,
            collection_ids=self.collection_ids,
            creation_date=self.creation_date,
            deleted_date=self.deleted_date,
            favorite=self.favorite,
            fields=self.fields,
            filter_collection_id=self.filter_collection_id,
            filter_folder_id=self.filter_folder_id,
            filter_organization_id=self.filter_organization_id,
            filter_url=self.filter_url,
            folder_id=self.folder_id,
            id=self.id,
            name=self.name,
            notes=self.notes,
            object=self.object,
            organization_id=self.organization_id,
            password=self.password,
            reprompt=self.reprompt,
            revision_date=self.revision_date,
            search=self.search,
            totp=self.totp,
            type=self.type,
            uris=self.uris,
            username=self.username)


def get_item_login(filter_collection_id: Optional[str] = None,
                   filter_folder_id: Optional[str] = None,
                   filter_organization_id: Optional[str] = None,
                   filter_url: Optional[str] = None,
                   id: Optional[str] = None,
                   search: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetItemLoginResult:
    """
    Use this data source to get information on an existing login item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_bitwarden as bitwarden
    import pulumi_kubernetes as kubernetes

    vpn_credentials_item_login = bitwarden.get_item_login(search="VPN/Credentials")
    # Example of usage of the data source:
    vpn_credentialskubernetes_secret = kubernetes.index.Kubernetes_secret("vpnCredentialskubernetes_secret",
        metadata=[{
            name: vpn-credentials,
        }],
        data={
            USERNAME: data.bitwarden_item_secure_note.vpn_credentials.username,
            PASSWORD: data.bitwarden_item_secure_note.vpn_credentials.password,
        })
    ```


    :param str filter_collection_id: Filter search results by collection ID.
    :param str filter_folder_id: Filter search results by folder ID.
    :param str filter_organization_id: Filter search results by organization ID.
    :param str filter_url: Filter search results by URL.
    :param str id: Identifier.
    :param str search: Search items matching the search string.
    """
    __args__ = dict()
    __args__['filterCollectionId'] = filter_collection_id
    __args__['filterFolderId'] = filter_folder_id
    __args__['filterOrganizationId'] = filter_organization_id
    __args__['filterUrl'] = filter_url
    __args__['id'] = id
    __args__['search'] = search
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bitwarden:index/getItemLogin:getItemLogin', __args__, opts=opts, typ=GetItemLoginResult).value

    return AwaitableGetItemLoginResult(
        attachments=pulumi.get(__ret__, 'attachments'),
        collection_ids=pulumi.get(__ret__, 'collection_ids'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        deleted_date=pulumi.get(__ret__, 'deleted_date'),
        favorite=pulumi.get(__ret__, 'favorite'),
        fields=pulumi.get(__ret__, 'fields'),
        filter_collection_id=pulumi.get(__ret__, 'filter_collection_id'),
        filter_folder_id=pulumi.get(__ret__, 'filter_folder_id'),
        filter_organization_id=pulumi.get(__ret__, 'filter_organization_id'),
        filter_url=pulumi.get(__ret__, 'filter_url'),
        folder_id=pulumi.get(__ret__, 'folder_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        notes=pulumi.get(__ret__, 'notes'),
        object=pulumi.get(__ret__, 'object'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        password=pulumi.get(__ret__, 'password'),
        reprompt=pulumi.get(__ret__, 'reprompt'),
        revision_date=pulumi.get(__ret__, 'revision_date'),
        search=pulumi.get(__ret__, 'search'),
        totp=pulumi.get(__ret__, 'totp'),
        type=pulumi.get(__ret__, 'type'),
        uris=pulumi.get(__ret__, 'uris'),
        username=pulumi.get(__ret__, 'username'))


@_utilities.lift_output_func(get_item_login)
def get_item_login_output(filter_collection_id: Optional[pulumi.Input[Optional[str]]] = None,
                          filter_folder_id: Optional[pulumi.Input[Optional[str]]] = None,
                          filter_organization_id: Optional[pulumi.Input[Optional[str]]] = None,
                          filter_url: Optional[pulumi.Input[Optional[str]]] = None,
                          id: Optional[pulumi.Input[Optional[str]]] = None,
                          search: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetItemLoginResult]:
    """
    Use this data source to get information on an existing login item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_bitwarden as bitwarden
    import pulumi_kubernetes as kubernetes

    vpn_credentials_item_login = bitwarden.get_item_login(search="VPN/Credentials")
    # Example of usage of the data source:
    vpn_credentialskubernetes_secret = kubernetes.index.Kubernetes_secret("vpnCredentialskubernetes_secret",
        metadata=[{
            name: vpn-credentials,
        }],
        data={
            USERNAME: data.bitwarden_item_secure_note.vpn_credentials.username,
            PASSWORD: data.bitwarden_item_secure_note.vpn_credentials.password,
        })
    ```


    :param str filter_collection_id: Filter search results by collection ID.
    :param str filter_folder_id: Filter search results by folder ID.
    :param str filter_organization_id: Filter search results by organization ID.
    :param str filter_url: Filter search results by URL.
    :param str id: Identifier.
    :param str search: Search items matching the search string.
    """
    ...
