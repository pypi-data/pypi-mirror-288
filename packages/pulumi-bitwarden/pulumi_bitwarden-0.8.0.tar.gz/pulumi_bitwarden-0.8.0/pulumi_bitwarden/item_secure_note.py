# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ItemSecureNoteArgs', 'ItemSecureNote']

@pulumi.input_type
class ItemSecureNoteArgs:
    def __init__(__self__, *,
                 collection_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 favorite: Optional[pulumi.Input[bool]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteFieldArgs']]]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 reprompt: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ItemSecureNote resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] collection_ids: Identifier of the collections the item belongs to.
        :param pulumi.Input[bool] favorite: Mark as a Favorite to have item appear at the top of your Vault in the UI.
        :param pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteFieldArgs']]] fields: Extra fields.
        :param pulumi.Input[str] folder_id: Identifier of the folder.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] notes: Notes.
        :param pulumi.Input[str] organization_id: Identifier of the organization.
        :param pulumi.Input[bool] reprompt: Require master password “re-prompt” when displaying secret in the UI.
        """
        if collection_ids is not None:
            pulumi.set(__self__, "collection_ids", collection_ids)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if reprompt is not None:
            pulumi.set(__self__, "reprompt", reprompt)

    @property
    @pulumi.getter(name="collectionIds")
    def collection_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Identifier of the collections the item belongs to.
        """
        return pulumi.get(self, "collection_ids")

    @collection_ids.setter
    def collection_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "collection_ids", value)

    @property
    @pulumi.getter
    def favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Mark as a Favorite to have item appear at the top of your Vault in the UI.
        """
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "favorite", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteFieldArgs']]]]:
        """
        Extra fields.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the folder.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Notes.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def reprompt(self) -> Optional[pulumi.Input[bool]]:
        """
        Require master password “re-prompt” when displaying secret in the UI.
        """
        return pulumi.get(self, "reprompt")

    @reprompt.setter
    def reprompt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reprompt", value)


@pulumi.input_type
class _ItemSecureNoteState:
    def __init__(__self__, *,
                 attachments: Optional[pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteAttachmentArgs']]]] = None,
                 collection_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 creation_date: Optional[pulumi.Input[str]] = None,
                 deleted_date: Optional[pulumi.Input[str]] = None,
                 favorite: Optional[pulumi.Input[bool]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteFieldArgs']]]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 reprompt: Optional[pulumi.Input[bool]] = None,
                 revision_date: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ItemSecureNote resources.
        :param pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteAttachmentArgs']]] attachments: List of item attachments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] collection_ids: Identifier of the collections the item belongs to.
        :param pulumi.Input[str] creation_date: Date the item was created.
        :param pulumi.Input[str] deleted_date: Date the item was deleted.
        :param pulumi.Input[bool] favorite: Mark as a Favorite to have item appear at the top of your Vault in the UI.
        :param pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteFieldArgs']]] fields: Extra fields.
        :param pulumi.Input[str] folder_id: Identifier of the folder.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] notes: Notes.
        :param pulumi.Input[str] object: INTERNAL USE
        :param pulumi.Input[str] organization_id: Identifier of the organization.
        :param pulumi.Input[bool] reprompt: Require master password “re-prompt” when displaying secret in the UI.
        :param pulumi.Input[str] revision_date: Last time the item was updated.
        :param pulumi.Input[int] type: INTERNAL USE
        """
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)
        if collection_ids is not None:
            pulumi.set(__self__, "collection_ids", collection_ids)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if deleted_date is not None:
            pulumi.set(__self__, "deleted_date", deleted_date)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if reprompt is not None:
            pulumi.set(__self__, "reprompt", reprompt)
        if revision_date is not None:
            pulumi.set(__self__, "revision_date", revision_date)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteAttachmentArgs']]]]:
        """
        List of item attachments.
        """
        return pulumi.get(self, "attachments")

    @attachments.setter
    def attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteAttachmentArgs']]]]):
        pulumi.set(self, "attachments", value)

    @property
    @pulumi.getter(name="collectionIds")
    def collection_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Identifier of the collections the item belongs to.
        """
        return pulumi.get(self, "collection_ids")

    @collection_ids.setter
    def collection_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "collection_ids", value)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[str]]:
        """
        Date the item was created.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter(name="deletedDate")
    def deleted_date(self) -> Optional[pulumi.Input[str]]:
        """
        Date the item was deleted.
        """
        return pulumi.get(self, "deleted_date")

    @deleted_date.setter
    def deleted_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_date", value)

    @property
    @pulumi.getter
    def favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Mark as a Favorite to have item appear at the top of your Vault in the UI.
        """
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "favorite", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteFieldArgs']]]]:
        """
        Extra fields.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ItemSecureNoteFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the folder.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Notes.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        INTERNAL USE
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def reprompt(self) -> Optional[pulumi.Input[bool]]:
        """
        Require master password “re-prompt” when displaying secret in the UI.
        """
        return pulumi.get(self, "reprompt")

    @reprompt.setter
    def reprompt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reprompt", value)

    @property
    @pulumi.getter(name="revisionDate")
    def revision_date(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the item was updated.
        """
        return pulumi.get(self, "revision_date")

    @revision_date.setter
    def revision_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_date", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        INTERNAL USE
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)


class ItemSecureNote(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collection_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 favorite: Optional[pulumi.Input[bool]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ItemSecureNoteFieldArgs']]]]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 reprompt: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Manages a secure note item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitwarden as bitwarden

        terraform = bitwarden.get_organization(search="Terraform")
        engineering = bitwarden.get_org_collection(search="Engineering")
        databases = bitwarden.get_folder(search="Databases")
        example = bitwarden.ItemSecureNote("example",
            notes=\"\"\"[global]
        secret = "<something sensitive>"
        \"\"\",
            folder_id=databases.id,
            organization_id=terraform.id,
            collection_ids=[engineering.id],
            fields=[bitwarden.ItemSecureNoteFieldArgs(
                name="category",
                text="SystemA",
            )])
        ```

        ## Import

        ```sh
        $ pulumi import bitwarden:index/itemSecureNote:ItemSecureNote example <secure_note_item_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] collection_ids: Identifier of the collections the item belongs to.
        :param pulumi.Input[bool] favorite: Mark as a Favorite to have item appear at the top of your Vault in the UI.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ItemSecureNoteFieldArgs']]]] fields: Extra fields.
        :param pulumi.Input[str] folder_id: Identifier of the folder.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] notes: Notes.
        :param pulumi.Input[str] organization_id: Identifier of the organization.
        :param pulumi.Input[bool] reprompt: Require master password “re-prompt” when displaying secret in the UI.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ItemSecureNoteArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a secure note item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitwarden as bitwarden

        terraform = bitwarden.get_organization(search="Terraform")
        engineering = bitwarden.get_org_collection(search="Engineering")
        databases = bitwarden.get_folder(search="Databases")
        example = bitwarden.ItemSecureNote("example",
            notes=\"\"\"[global]
        secret = "<something sensitive>"
        \"\"\",
            folder_id=databases.id,
            organization_id=terraform.id,
            collection_ids=[engineering.id],
            fields=[bitwarden.ItemSecureNoteFieldArgs(
                name="category",
                text="SystemA",
            )])
        ```

        ## Import

        ```sh
        $ pulumi import bitwarden:index/itemSecureNote:ItemSecureNote example <secure_note_item_id>
        ```

        :param str resource_name: The name of the resource.
        :param ItemSecureNoteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ItemSecureNoteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collection_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 favorite: Optional[pulumi.Input[bool]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ItemSecureNoteFieldArgs']]]]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 reprompt: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ItemSecureNoteArgs.__new__(ItemSecureNoteArgs)

            __props__.__dict__["collection_ids"] = collection_ids
            __props__.__dict__["favorite"] = favorite
            __props__.__dict__["fields"] = None if fields is None else pulumi.Output.secret(fields)
            __props__.__dict__["folder_id"] = folder_id
            __props__.__dict__["name"] = name
            __props__.__dict__["notes"] = None if notes is None else pulumi.Output.secret(notes)
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["reprompt"] = reprompt
            __props__.__dict__["attachments"] = None
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["deleted_date"] = None
            __props__.__dict__["object"] = None
            __props__.__dict__["revision_date"] = None
            __props__.__dict__["type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["fields", "notes"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ItemSecureNote, __self__).__init__(
            'bitwarden:index/itemSecureNote:ItemSecureNote',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attachments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ItemSecureNoteAttachmentArgs']]]]] = None,
            collection_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            creation_date: Optional[pulumi.Input[str]] = None,
            deleted_date: Optional[pulumi.Input[str]] = None,
            favorite: Optional[pulumi.Input[bool]] = None,
            fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ItemSecureNoteFieldArgs']]]]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            object: Optional[pulumi.Input[str]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            reprompt: Optional[pulumi.Input[bool]] = None,
            revision_date: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[int]] = None) -> 'ItemSecureNote':
        """
        Get an existing ItemSecureNote resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ItemSecureNoteAttachmentArgs']]]] attachments: List of item attachments.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] collection_ids: Identifier of the collections the item belongs to.
        :param pulumi.Input[str] creation_date: Date the item was created.
        :param pulumi.Input[str] deleted_date: Date the item was deleted.
        :param pulumi.Input[bool] favorite: Mark as a Favorite to have item appear at the top of your Vault in the UI.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ItemSecureNoteFieldArgs']]]] fields: Extra fields.
        :param pulumi.Input[str] folder_id: Identifier of the folder.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] notes: Notes.
        :param pulumi.Input[str] object: INTERNAL USE
        :param pulumi.Input[str] organization_id: Identifier of the organization.
        :param pulumi.Input[bool] reprompt: Require master password “re-prompt” when displaying secret in the UI.
        :param pulumi.Input[str] revision_date: Last time the item was updated.
        :param pulumi.Input[int] type: INTERNAL USE
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ItemSecureNoteState.__new__(_ItemSecureNoteState)

        __props__.__dict__["attachments"] = attachments
        __props__.__dict__["collection_ids"] = collection_ids
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["deleted_date"] = deleted_date
        __props__.__dict__["favorite"] = favorite
        __props__.__dict__["fields"] = fields
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["name"] = name
        __props__.__dict__["notes"] = notes
        __props__.__dict__["object"] = object
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["reprompt"] = reprompt
        __props__.__dict__["revision_date"] = revision_date
        __props__.__dict__["type"] = type
        return ItemSecureNote(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def attachments(self) -> pulumi.Output[Sequence['outputs.ItemSecureNoteAttachment']]:
        """
        List of item attachments.
        """
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="collectionIds")
    def collection_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Identifier of the collections the item belongs to.
        """
        return pulumi.get(self, "collection_ids")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[str]:
        """
        Date the item was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="deletedDate")
    def deleted_date(self) -> pulumi.Output[str]:
        """
        Date the item was deleted.
        """
        return pulumi.get(self, "deleted_date")

    @property
    @pulumi.getter
    def favorite(self) -> pulumi.Output[Optional[bool]]:
        """
        Mark as a Favorite to have item appear at the top of your Vault in the UI.
        """
        return pulumi.get(self, "favorite")

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Output[Optional[Sequence['outputs.ItemSecureNoteField']]]:
        """
        Extra fields.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[Optional[str]]:
        """
        Identifier of the folder.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[str]]:
        """
        Notes.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def object(self) -> pulumi.Output[str]:
        """
        INTERNAL USE
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[Optional[str]]:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def reprompt(self) -> pulumi.Output[Optional[bool]]:
        """
        Require master password “re-prompt” when displaying secret in the UI.
        """
        return pulumi.get(self, "reprompt")

    @property
    @pulumi.getter(name="revisionDate")
    def revision_date(self) -> pulumi.Output[str]:
        """
        Last time the item was updated.
        """
        return pulumi.get(self, "revision_date")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[int]:
        """
        INTERNAL USE
        """
        return pulumi.get(self, "type")

