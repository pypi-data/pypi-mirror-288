# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetFolderResult',
    'AwaitableGetFolderResult',
    'get_folder',
    'get_folder_output',
]

@pulumi.output_type
class GetFolderResult:
    """
    A collection of values returned by getFolder.
    """
    def __init__(__self__, filter_collection_id=None, filter_organization_id=None, id=None, name=None, object=None, search=None):
        if filter_collection_id and not isinstance(filter_collection_id, str):
            raise TypeError("Expected argument 'filter_collection_id' to be a str")
        pulumi.set(__self__, "filter_collection_id", filter_collection_id)
        if filter_organization_id and not isinstance(filter_organization_id, str):
            raise TypeError("Expected argument 'filter_organization_id' to be a str")
        pulumi.set(__self__, "filter_organization_id", filter_organization_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object and not isinstance(object, str):
            raise TypeError("Expected argument 'object' to be a str")
        pulumi.set(__self__, "object", object)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter(name="filterCollectionId")
    def filter_collection_id(self) -> Optional[str]:
        """
        Filter search results by collection ID.
        """
        return pulumi.get(self, "filter_collection_id")

    @property
    @pulumi.getter(name="filterOrganizationId")
    def filter_organization_id(self) -> Optional[str]:
        """
        Filter search results by organization ID.
        """
        return pulumi.get(self, "filter_organization_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def search(self) -> Optional[str]:
        """
        Search items matching the search string.
        """
        return pulumi.get(self, "search")


class AwaitableGetFolderResult(GetFolderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFolderResult(
            filter_collection_id=self.filter_collection_id,
            filter_organization_id=self.filter_organization_id,
            id=self.id,
            name=self.name,
            object=self.object,
            search=self.search)


def get_folder(filter_collection_id: Optional[str] = None,
               filter_organization_id: Optional[str] = None,
               id: Optional[str] = None,
               search: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFolderResult:
    """
    Use this data source to get information on an existing folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_bitwarden as bitwarden

    terraform = bitwarden.get_folder(search="Terraform")
    # Example of usage of the data source:
    administrative_user = bitwarden.ItemLogin("administrativeUser",
        username="admin",
        folder_id=terraform.id)
    ```


    :param str filter_collection_id: Filter search results by collection ID.
    :param str filter_organization_id: Filter search results by organization ID.
    :param str id: Identifier.
    :param str search: Search items matching the search string.
    """
    __args__ = dict()
    __args__['filterCollectionId'] = filter_collection_id
    __args__['filterOrganizationId'] = filter_organization_id
    __args__['id'] = id
    __args__['search'] = search
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bitwarden:index/getFolder:getFolder', __args__, opts=opts, typ=GetFolderResult).value

    return AwaitableGetFolderResult(
        filter_collection_id=pulumi.get(__ret__, 'filter_collection_id'),
        filter_organization_id=pulumi.get(__ret__, 'filter_organization_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        object=pulumi.get(__ret__, 'object'),
        search=pulumi.get(__ret__, 'search'))


@_utilities.lift_output_func(get_folder)
def get_folder_output(filter_collection_id: Optional[pulumi.Input[Optional[str]]] = None,
                      filter_organization_id: Optional[pulumi.Input[Optional[str]]] = None,
                      id: Optional[pulumi.Input[Optional[str]]] = None,
                      search: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFolderResult]:
    """
    Use this data source to get information on an existing folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_bitwarden as bitwarden

    terraform = bitwarden.get_folder(search="Terraform")
    # Example of usage of the data source:
    administrative_user = bitwarden.ItemLogin("administrativeUser",
        username="admin",
        folder_id=terraform.id)
    ```


    :param str filter_collection_id: Filter search results by collection ID.
    :param str filter_organization_id: Filter search results by organization ID.
    :param str id: Identifier.
    :param str search: Search items matching the search string.
    """
    ...
