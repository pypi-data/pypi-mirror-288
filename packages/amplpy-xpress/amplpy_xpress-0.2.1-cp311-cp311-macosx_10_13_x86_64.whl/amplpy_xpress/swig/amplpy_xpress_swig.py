# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _amplpy_xpress_swig
else:
    import _amplpy_xpress_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class dblArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _amplpy_xpress_swig.dblArray_swiginit(self, _amplpy_xpress_swig.new_dblArray(nelements))
    __swig_destroy__ = _amplpy_xpress_swig.delete_dblArray

    def __getitem__(self, index):
        return _amplpy_xpress_swig.dblArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpy_xpress_swig.dblArray___setitem__(self, index, value)

    def cast(self):
        return _amplpy_xpress_swig.dblArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _amplpy_xpress_swig.dblArray_frompointer(t)

# Register dblArray in _amplpy_xpress_swig:
_amplpy_xpress_swig.dblArray_swigregister(dblArray)
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _amplpy_xpress_swig.intArray_swiginit(self, _amplpy_xpress_swig.new_intArray(nelements))
    __swig_destroy__ = _amplpy_xpress_swig.delete_intArray

    def __getitem__(self, index):
        return _amplpy_xpress_swig.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpy_xpress_swig.intArray___setitem__(self, index, value)

    def cast(self):
        return _amplpy_xpress_swig.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _amplpy_xpress_swig.intArray_frompointer(t)

# Register intArray in _amplpy_xpress_swig:
_amplpy_xpress_swig.intArray_swigregister(intArray)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpy_xpress_swig.delete_SwigPyIterator

    def value(self):
        return _amplpy_xpress_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _amplpy_xpress_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _amplpy_xpress_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _amplpy_xpress_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _amplpy_xpress_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _amplpy_xpress_swig.SwigPyIterator_copy(self)

    def next(self):
        return _amplpy_xpress_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _amplpy_xpress_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _amplpy_xpress_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _amplpy_xpress_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _amplpy_xpress_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _amplpy_xpress_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _amplpy_xpress_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _amplpy_xpress_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _amplpy_xpress_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _amplpy_xpress_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _amplpy_xpress_swig:
_amplpy_xpress_swig.SwigPyIterator_swigregister(SwigPyIterator)
class map_string_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_xpress_swig.map_string_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_xpress_swig.map_string_int___nonzero__(self)

    def __bool__(self):
        return _amplpy_xpress_swig.map_string_int___bool__(self)

    def __len__(self):
        return _amplpy_xpress_swig.map_string_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_xpress_swig.map_string_int___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_xpress_swig.map_string_int___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_xpress_swig.map_string_int_has_key(self, key)

    def keys(self):
        return _amplpy_xpress_swig.map_string_int_keys(self)

    def values(self):
        return _amplpy_xpress_swig.map_string_int_values(self)

    def items(self):
        return _amplpy_xpress_swig.map_string_int_items(self)

    def __contains__(self, key):
        return _amplpy_xpress_swig.map_string_int___contains__(self, key)

    def key_iterator(self):
        return _amplpy_xpress_swig.map_string_int_key_iterator(self)

    def value_iterator(self):
        return _amplpy_xpress_swig.map_string_int_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_xpress_swig.map_string_int___setitem__(self, *args)

    def asdict(self):
        return _amplpy_xpress_swig.map_string_int_asdict(self)

    def __init__(self, *args):
        _amplpy_xpress_swig.map_string_int_swiginit(self, _amplpy_xpress_swig.new_map_string_int(*args))

    def empty(self):
        return _amplpy_xpress_swig.map_string_int_empty(self)

    def size(self):
        return _amplpy_xpress_swig.map_string_int_size(self)

    def swap(self, v):
        return _amplpy_xpress_swig.map_string_int_swap(self, v)

    def begin(self):
        return _amplpy_xpress_swig.map_string_int_begin(self)

    def end(self):
        return _amplpy_xpress_swig.map_string_int_end(self)

    def rbegin(self):
        return _amplpy_xpress_swig.map_string_int_rbegin(self)

    def rend(self):
        return _amplpy_xpress_swig.map_string_int_rend(self)

    def clear(self):
        return _amplpy_xpress_swig.map_string_int_clear(self)

    def get_allocator(self):
        return _amplpy_xpress_swig.map_string_int_get_allocator(self)

    def count(self, x):
        return _amplpy_xpress_swig.map_string_int_count(self, x)

    def erase(self, *args):
        return _amplpy_xpress_swig.map_string_int_erase(self, *args)

    def find(self, x):
        return _amplpy_xpress_swig.map_string_int_find(self, x)

    def lower_bound(self, x):
        return _amplpy_xpress_swig.map_string_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_xpress_swig.map_string_int_upper_bound(self, x)
    __swig_destroy__ = _amplpy_xpress_swig.delete_map_string_int

# Register map_string_int in _amplpy_xpress_swig:
_amplpy_xpress_swig.map_string_int_swigregister(map_string_int)
class map_int_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_xpress_swig.map_int_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_xpress_swig.map_int_string___nonzero__(self)

    def __bool__(self):
        return _amplpy_xpress_swig.map_int_string___bool__(self)

    def __len__(self):
        return _amplpy_xpress_swig.map_int_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_xpress_swig.map_int_string___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_xpress_swig.map_int_string___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_xpress_swig.map_int_string_has_key(self, key)

    def keys(self):
        return _amplpy_xpress_swig.map_int_string_keys(self)

    def values(self):
        return _amplpy_xpress_swig.map_int_string_values(self)

    def items(self):
        return _amplpy_xpress_swig.map_int_string_items(self)

    def __contains__(self, key):
        return _amplpy_xpress_swig.map_int_string___contains__(self, key)

    def key_iterator(self):
        return _amplpy_xpress_swig.map_int_string_key_iterator(self)

    def value_iterator(self):
        return _amplpy_xpress_swig.map_int_string_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_xpress_swig.map_int_string___setitem__(self, *args)

    def asdict(self):
        return _amplpy_xpress_swig.map_int_string_asdict(self)

    def __init__(self, *args):
        _amplpy_xpress_swig.map_int_string_swiginit(self, _amplpy_xpress_swig.new_map_int_string(*args))

    def empty(self):
        return _amplpy_xpress_swig.map_int_string_empty(self)

    def size(self):
        return _amplpy_xpress_swig.map_int_string_size(self)

    def swap(self, v):
        return _amplpy_xpress_swig.map_int_string_swap(self, v)

    def begin(self):
        return _amplpy_xpress_swig.map_int_string_begin(self)

    def end(self):
        return _amplpy_xpress_swig.map_int_string_end(self)

    def rbegin(self):
        return _amplpy_xpress_swig.map_int_string_rbegin(self)

    def rend(self):
        return _amplpy_xpress_swig.map_int_string_rend(self)

    def clear(self):
        return _amplpy_xpress_swig.map_int_string_clear(self)

    def get_allocator(self):
        return _amplpy_xpress_swig.map_int_string_get_allocator(self)

    def count(self, x):
        return _amplpy_xpress_swig.map_int_string_count(self, x)

    def erase(self, *args):
        return _amplpy_xpress_swig.map_int_string_erase(self, *args)

    def find(self, x):
        return _amplpy_xpress_swig.map_int_string_find(self, x)

    def lower_bound(self, x):
        return _amplpy_xpress_swig.map_int_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_xpress_swig.map_int_string_upper_bound(self, x)
    __swig_destroy__ = _amplpy_xpress_swig.delete_map_int_string

# Register map_int_string in _amplpy_xpress_swig:
_amplpy_xpress_swig.map_int_string_swigregister(map_int_string)
class map_string_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_xpress_swig.map_string_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_xpress_swig.map_string_double___nonzero__(self)

    def __bool__(self):
        return _amplpy_xpress_swig.map_string_double___bool__(self)

    def __len__(self):
        return _amplpy_xpress_swig.map_string_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _amplpy_xpress_swig.map_string_double___getitem__(self, key)

    def __delitem__(self, key):
        return _amplpy_xpress_swig.map_string_double___delitem__(self, key)

    def has_key(self, key):
        return _amplpy_xpress_swig.map_string_double_has_key(self, key)

    def keys(self):
        return _amplpy_xpress_swig.map_string_double_keys(self)

    def values(self):
        return _amplpy_xpress_swig.map_string_double_values(self)

    def items(self):
        return _amplpy_xpress_swig.map_string_double_items(self)

    def __contains__(self, key):
        return _amplpy_xpress_swig.map_string_double___contains__(self, key)

    def key_iterator(self):
        return _amplpy_xpress_swig.map_string_double_key_iterator(self)

    def value_iterator(self):
        return _amplpy_xpress_swig.map_string_double_value_iterator(self)

    def __setitem__(self, *args):
        return _amplpy_xpress_swig.map_string_double___setitem__(self, *args)

    def asdict(self):
        return _amplpy_xpress_swig.map_string_double_asdict(self)

    def __init__(self, *args):
        _amplpy_xpress_swig.map_string_double_swiginit(self, _amplpy_xpress_swig.new_map_string_double(*args))

    def empty(self):
        return _amplpy_xpress_swig.map_string_double_empty(self)

    def size(self):
        return _amplpy_xpress_swig.map_string_double_size(self)

    def swap(self, v):
        return _amplpy_xpress_swig.map_string_double_swap(self, v)

    def begin(self):
        return _amplpy_xpress_swig.map_string_double_begin(self)

    def end(self):
        return _amplpy_xpress_swig.map_string_double_end(self)

    def rbegin(self):
        return _amplpy_xpress_swig.map_string_double_rbegin(self)

    def rend(self):
        return _amplpy_xpress_swig.map_string_double_rend(self)

    def clear(self):
        return _amplpy_xpress_swig.map_string_double_clear(self)

    def get_allocator(self):
        return _amplpy_xpress_swig.map_string_double_get_allocator(self)

    def count(self, x):
        return _amplpy_xpress_swig.map_string_double_count(self, x)

    def erase(self, *args):
        return _amplpy_xpress_swig.map_string_double_erase(self, *args)

    def find(self, x):
        return _amplpy_xpress_swig.map_string_double_find(self, x)

    def lower_bound(self, x):
        return _amplpy_xpress_swig.map_string_double_lower_bound(self, x)

    def upper_bound(self, x):
        return _amplpy_xpress_swig.map_string_double_upper_bound(self, x)
    __swig_destroy__ = _amplpy_xpress_swig.delete_map_string_double

# Register map_string_double in _amplpy_xpress_swig:
_amplpy_xpress_swig.map_string_double_swigregister(map_string_double)
class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_xpress_swig.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_xpress_swig.vector_string___nonzero__(self)

    def __bool__(self):
        return _amplpy_xpress_swig.vector_string___bool__(self)

    def __len__(self):
        return _amplpy_xpress_swig.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_xpress_swig.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_xpress_swig.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_xpress_swig.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_xpress_swig.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_xpress_swig.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_xpress_swig.vector_string___setitem__(self, *args)

    def pop(self):
        return _amplpy_xpress_swig.vector_string_pop(self)

    def append(self, x):
        return _amplpy_xpress_swig.vector_string_append(self, x)

    def empty(self):
        return _amplpy_xpress_swig.vector_string_empty(self)

    def size(self):
        return _amplpy_xpress_swig.vector_string_size(self)

    def swap(self, v):
        return _amplpy_xpress_swig.vector_string_swap(self, v)

    def begin(self):
        return _amplpy_xpress_swig.vector_string_begin(self)

    def end(self):
        return _amplpy_xpress_swig.vector_string_end(self)

    def rbegin(self):
        return _amplpy_xpress_swig.vector_string_rbegin(self)

    def rend(self):
        return _amplpy_xpress_swig.vector_string_rend(self)

    def clear(self):
        return _amplpy_xpress_swig.vector_string_clear(self)

    def get_allocator(self):
        return _amplpy_xpress_swig.vector_string_get_allocator(self)

    def pop_back(self):
        return _amplpy_xpress_swig.vector_string_pop_back(self)

    def erase(self, *args):
        return _amplpy_xpress_swig.vector_string_erase(self, *args)

    def __init__(self, *args):
        _amplpy_xpress_swig.vector_string_swiginit(self, _amplpy_xpress_swig.new_vector_string(*args))

    def push_back(self, x):
        return _amplpy_xpress_swig.vector_string_push_back(self, x)

    def front(self):
        return _amplpy_xpress_swig.vector_string_front(self)

    def back(self):
        return _amplpy_xpress_swig.vector_string_back(self)

    def assign(self, n, x):
        return _amplpy_xpress_swig.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_xpress_swig.vector_string_resize(self, *args)

    def insert(self, *args):
        return _amplpy_xpress_swig.vector_string_insert(self, *args)

    def reserve(self, n):
        return _amplpy_xpress_swig.vector_string_reserve(self, n)

    def capacity(self):
        return _amplpy_xpress_swig.vector_string_capacity(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_vector_string

# Register vector_string in _amplpy_xpress_swig:
_amplpy_xpress_swig.vector_string_swigregister(vector_string)
class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_xpress_swig.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_xpress_swig.vector_double___nonzero__(self)

    def __bool__(self):
        return _amplpy_xpress_swig.vector_double___bool__(self)

    def __len__(self):
        return _amplpy_xpress_swig.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_xpress_swig.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_xpress_swig.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_xpress_swig.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_xpress_swig.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_xpress_swig.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_xpress_swig.vector_double___setitem__(self, *args)

    def pop(self):
        return _amplpy_xpress_swig.vector_double_pop(self)

    def append(self, x):
        return _amplpy_xpress_swig.vector_double_append(self, x)

    def empty(self):
        return _amplpy_xpress_swig.vector_double_empty(self)

    def size(self):
        return _amplpy_xpress_swig.vector_double_size(self)

    def swap(self, v):
        return _amplpy_xpress_swig.vector_double_swap(self, v)

    def begin(self):
        return _amplpy_xpress_swig.vector_double_begin(self)

    def end(self):
        return _amplpy_xpress_swig.vector_double_end(self)

    def rbegin(self):
        return _amplpy_xpress_swig.vector_double_rbegin(self)

    def rend(self):
        return _amplpy_xpress_swig.vector_double_rend(self)

    def clear(self):
        return _amplpy_xpress_swig.vector_double_clear(self)

    def get_allocator(self):
        return _amplpy_xpress_swig.vector_double_get_allocator(self)

    def pop_back(self):
        return _amplpy_xpress_swig.vector_double_pop_back(self)

    def erase(self, *args):
        return _amplpy_xpress_swig.vector_double_erase(self, *args)

    def __init__(self, *args):
        _amplpy_xpress_swig.vector_double_swiginit(self, _amplpy_xpress_swig.new_vector_double(*args))

    def push_back(self, x):
        return _amplpy_xpress_swig.vector_double_push_back(self, x)

    def front(self):
        return _amplpy_xpress_swig.vector_double_front(self)

    def back(self):
        return _amplpy_xpress_swig.vector_double_back(self)

    def assign(self, n, x):
        return _amplpy_xpress_swig.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_xpress_swig.vector_double_resize(self, *args)

    def insert(self, *args):
        return _amplpy_xpress_swig.vector_double_insert(self, *args)

    def reserve(self, n):
        return _amplpy_xpress_swig.vector_double_reserve(self, n)

    def capacity(self):
        return _amplpy_xpress_swig.vector_double_capacity(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_vector_double

# Register vector_double in _amplpy_xpress_swig:
_amplpy_xpress_swig.vector_double_swigregister(vector_double)
class vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_xpress_swig.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_xpress_swig.vector_int___nonzero__(self)

    def __bool__(self):
        return _amplpy_xpress_swig.vector_int___bool__(self)

    def __len__(self):
        return _amplpy_xpress_swig.vector_int___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_xpress_swig.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_xpress_swig.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_xpress_swig.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_xpress_swig.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_xpress_swig.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_xpress_swig.vector_int___setitem__(self, *args)

    def pop(self):
        return _amplpy_xpress_swig.vector_int_pop(self)

    def append(self, x):
        return _amplpy_xpress_swig.vector_int_append(self, x)

    def empty(self):
        return _amplpy_xpress_swig.vector_int_empty(self)

    def size(self):
        return _amplpy_xpress_swig.vector_int_size(self)

    def swap(self, v):
        return _amplpy_xpress_swig.vector_int_swap(self, v)

    def begin(self):
        return _amplpy_xpress_swig.vector_int_begin(self)

    def end(self):
        return _amplpy_xpress_swig.vector_int_end(self)

    def rbegin(self):
        return _amplpy_xpress_swig.vector_int_rbegin(self)

    def rend(self):
        return _amplpy_xpress_swig.vector_int_rend(self)

    def clear(self):
        return _amplpy_xpress_swig.vector_int_clear(self)

    def get_allocator(self):
        return _amplpy_xpress_swig.vector_int_get_allocator(self)

    def pop_back(self):
        return _amplpy_xpress_swig.vector_int_pop_back(self)

    def erase(self, *args):
        return _amplpy_xpress_swig.vector_int_erase(self, *args)

    def __init__(self, *args):
        _amplpy_xpress_swig.vector_int_swiginit(self, _amplpy_xpress_swig.new_vector_int(*args))

    def push_back(self, x):
        return _amplpy_xpress_swig.vector_int_push_back(self, x)

    def front(self):
        return _amplpy_xpress_swig.vector_int_front(self)

    def back(self):
        return _amplpy_xpress_swig.vector_int_back(self)

    def assign(self, n, x):
        return _amplpy_xpress_swig.vector_int_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_xpress_swig.vector_int_resize(self, *args)

    def insert(self, *args):
        return _amplpy_xpress_swig.vector_int_insert(self, *args)

    def reserve(self, n):
        return _amplpy_xpress_swig.vector_int_reserve(self, n)

    def capacity(self):
        return _amplpy_xpress_swig.vector_int_capacity(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_vector_int

# Register vector_int in _amplpy_xpress_swig:
_amplpy_xpress_swig.vector_int_swigregister(vector_int)
class vector_options(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _amplpy_xpress_swig.vector_options_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amplpy_xpress_swig.vector_options___nonzero__(self)

    def __bool__(self):
        return _amplpy_xpress_swig.vector_options___bool__(self)

    def __len__(self):
        return _amplpy_xpress_swig.vector_options___len__(self)

    def __getslice__(self, i, j):
        return _amplpy_xpress_swig.vector_options___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amplpy_xpress_swig.vector_options___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amplpy_xpress_swig.vector_options___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amplpy_xpress_swig.vector_options___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amplpy_xpress_swig.vector_options___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amplpy_xpress_swig.vector_options___setitem__(self, *args)

    def pop(self):
        return _amplpy_xpress_swig.vector_options_pop(self)

    def append(self, x):
        return _amplpy_xpress_swig.vector_options_append(self, x)

    def empty(self):
        return _amplpy_xpress_swig.vector_options_empty(self)

    def size(self):
        return _amplpy_xpress_swig.vector_options_size(self)

    def swap(self, v):
        return _amplpy_xpress_swig.vector_options_swap(self, v)

    def begin(self):
        return _amplpy_xpress_swig.vector_options_begin(self)

    def end(self):
        return _amplpy_xpress_swig.vector_options_end(self)

    def rbegin(self):
        return _amplpy_xpress_swig.vector_options_rbegin(self)

    def rend(self):
        return _amplpy_xpress_swig.vector_options_rend(self)

    def clear(self):
        return _amplpy_xpress_swig.vector_options_clear(self)

    def get_allocator(self):
        return _amplpy_xpress_swig.vector_options_get_allocator(self)

    def pop_back(self):
        return _amplpy_xpress_swig.vector_options_pop_back(self)

    def erase(self, *args):
        return _amplpy_xpress_swig.vector_options_erase(self, *args)

    def __init__(self, *args):
        _amplpy_xpress_swig.vector_options_swiginit(self, _amplpy_xpress_swig.new_vector_options(*args))

    def push_back(self, x):
        return _amplpy_xpress_swig.vector_options_push_back(self, x)

    def front(self):
        return _amplpy_xpress_swig.vector_options_front(self)

    def back(self):
        return _amplpy_xpress_swig.vector_options_back(self)

    def assign(self, n, x):
        return _amplpy_xpress_swig.vector_options_assign(self, n, x)

    def resize(self, *args):
        return _amplpy_xpress_swig.vector_options_resize(self, *args)

    def insert(self, *args):
        return _amplpy_xpress_swig.vector_options_insert(self, *args)

    def reserve(self, n):
        return _amplpy_xpress_swig.vector_options_reserve(self, n)

    def capacity(self):
        return _amplpy_xpress_swig.vector_options_capacity(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_vector_options

# Register vector_options in _amplpy_xpress_swig:
_amplpy_xpress_swig.vector_options_swigregister(vector_options)
class AMPLSolverException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_xpress_swig.AMPLSolverException_swiginit(self, _amplpy_xpress_swig.new_AMPLSolverException(*args))

    @staticmethod
    def format(*args):
        return _amplpy_xpress_swig.AMPLSolverException_format(*args)

    def __str__(self):
        return _amplpy_xpress_swig.AMPLSolverException___str__(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_AMPLSolverException

# Register AMPLSolverException in _amplpy_xpress_swig:
_amplpy_xpress_swig.AMPLSolverException_swigregister(AMPLSolverException)
class Variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    str = property(_amplpy_xpress_swig.Variant_str_get, _amplpy_xpress_swig.Variant_str_set)
    integer = property(_amplpy_xpress_swig.Variant_integer_get, _amplpy_xpress_swig.Variant_integer_set)
    dbl = property(_amplpy_xpress_swig.Variant_dbl_get, _amplpy_xpress_swig.Variant_dbl_set)
    type = property(_amplpy_xpress_swig.Variant_type_get, _amplpy_xpress_swig.Variant_type_set)

    def __init__(self, *args):
        _amplpy_xpress_swig.Variant_swiginit(self, _amplpy_xpress_swig.new_Variant(*args))
    __swig_destroy__ = _amplpy_xpress_swig.delete_Variant

# Register Variant in _amplpy_xpress_swig:
_amplpy_xpress_swig.Variant_swigregister(Variant)

def __lshift__(out, v):
    return _amplpy_xpress_swig.__lshift__(out, v)


def generateArguments(modelName):
    return _amplpy_xpress_swig.generateArguments(modelName)

def deleteParams(params):
    return _amplpy_xpress_swig.deleteParams(params)
class VarType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Continuous = _amplpy_xpress_swig.VarType_Continuous
    Binary = _amplpy_xpress_swig.VarType_Binary
    Integer = _amplpy_xpress_swig.VarType_Integer

    def __init__(self):
        _amplpy_xpress_swig.VarType_swiginit(self, _amplpy_xpress_swig.new_VarType())
    __swig_destroy__ = _amplpy_xpress_swig.delete_VarType

# Register VarType in _amplpy_xpress_swig:
_amplpy_xpress_swig.VarType_swigregister(VarType)
class SolverAttributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DBL_RelMIPGap = _amplpy_xpress_swig.SolverAttributes_DBL_RelMIPGap
    DBL_CurrentObjBound = _amplpy_xpress_swig.SolverAttributes_DBL_CurrentObjBound
    INT_NumIntegerVars = _amplpy_xpress_swig.SolverAttributes_INT_NumIntegerVars

    def __init__(self):
        _amplpy_xpress_swig.SolverAttributes_swiginit(self, _amplpy_xpress_swig.new_SolverAttributes())
    __swig_destroy__ = _amplpy_xpress_swig.delete_SolverAttributes

# Register SolverAttributes in _amplpy_xpress_swig:
_amplpy_xpress_swig.SolverAttributes_swigregister(SolverAttributes)
class SolverParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DBL_MIPGap = _amplpy_xpress_swig.SolverParams_DBL_MIPGap
    DBL_TimeLimit = _amplpy_xpress_swig.SolverParams_DBL_TimeLimit
    INT_SolutionLimit = _amplpy_xpress_swig.SolverParams_INT_SolutionLimit
    INT_LP_Algorithm = _amplpy_xpress_swig.SolverParams_INT_LP_Algorithm

    def __init__(self):
        _amplpy_xpress_swig.SolverParams_swiginit(self, _amplpy_xpress_swig.new_SolverParams())
    __swig_destroy__ = _amplpy_xpress_swig.delete_SolverParams

# Register SolverParams in _amplpy_xpress_swig:
_amplpy_xpress_swig.SolverParams_swigregister(SolverParams)
class LPAlgorithms(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Auto = _amplpy_xpress_swig.LPAlgorithms_Auto
    PrimalSimplex = _amplpy_xpress_swig.LPAlgorithms_PrimalSimplex
    DualSimplex = _amplpy_xpress_swig.LPAlgorithms_DualSimplex
    Barrier = _amplpy_xpress_swig.LPAlgorithms_Barrier

    def __init__(self):
        _amplpy_xpress_swig.LPAlgorithms_swiginit(self, _amplpy_xpress_swig.new_LPAlgorithms())
    __swig_destroy__ = _amplpy_xpress_swig.delete_LPAlgorithms

# Register LPAlgorithms in _amplpy_xpress_swig:
_amplpy_xpress_swig.LPAlgorithms_swigregister(LPAlgorithms)
class Where(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MSG = _amplpy_xpress_swig.Where_MSG
    PRESOLVE = _amplpy_xpress_swig.Where_PRESOLVE
    LPSOLVE = _amplpy_xpress_swig.Where_LPSOLVE
    MIPNODE = _amplpy_xpress_swig.Where_MIPNODE
    MIPSOL = _amplpy_xpress_swig.Where_MIPSOL
    MIP = _amplpy_xpress_swig.Where_MIP
    NOTMAPPED = _amplpy_xpress_swig.Where_NOTMAPPED

    def __init__(self):
        _amplpy_xpress_swig.Where_swiginit(self, _amplpy_xpress_swig.new_Where())
    __swig_destroy__ = _amplpy_xpress_swig.delete_Where

# Register Where in _amplpy_xpress_swig:
_amplpy_xpress_swig.Where_swigregister(Where)
class CanDo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IMPORT_SOLUTION = _amplpy_xpress_swig.CanDo_IMPORT_SOLUTION
    GET_LP_SOLUTION = _amplpy_xpress_swig.CanDo_GET_LP_SOLUTION
    GET_MIP_SOLUTION = _amplpy_xpress_swig.CanDo_GET_MIP_SOLUTION
    ADD_LAZY_CONSTRAINT = _amplpy_xpress_swig.CanDo_ADD_LAZY_CONSTRAINT
    ADD_USER_CUT = _amplpy_xpress_swig.CanDo_ADD_USER_CUT

    def __init__(self):
        _amplpy_xpress_swig.CanDo_swiginit(self, _amplpy_xpress_swig.new_CanDo())
    __swig_destroy__ = _amplpy_xpress_swig.delete_CanDo

# Register CanDo in _amplpy_xpress_swig:
_amplpy_xpress_swig.CanDo_swigregister(CanDo)
class Value(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OBJ = _amplpy_xpress_swig.Value_OBJ
    PRE_DELCOLS = _amplpy_xpress_swig.Value_PRE_DELCOLS
    PRE_DELROWS = _amplpy_xpress_swig.Value_PRE_DELROWS
    PRE_COEFFCHANGED = _amplpy_xpress_swig.Value_PRE_COEFFCHANGED
    ITERATIONS = _amplpy_xpress_swig.Value_ITERATIONS
    RUNTIME = _amplpy_xpress_swig.Value_RUNTIME
    MIP_NODES = _amplpy_xpress_swig.Value_MIP_NODES
    MIP_RELATIVEGAP = _amplpy_xpress_swig.Value_MIP_RELATIVEGAP
    MIP_OBJBOUND = _amplpy_xpress_swig.Value_MIP_OBJBOUND
    MIP_SOL_RELAXED = _amplpy_xpress_swig.Value_MIP_SOL_RELAXED
    N_ROWS = _amplpy_xpress_swig.Value_N_ROWS
    N_COLS = _amplpy_xpress_swig.Value_N_COLS

    def __init__(self):
        _amplpy_xpress_swig.Value_swiginit(self, _amplpy_xpress_swig.new_Value())
    __swig_destroy__ = _amplpy_xpress_swig.delete_Value

# Register Value in _amplpy_xpress_swig:
_amplpy_xpress_swig.Value_swigregister(Value)
class CutDirection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EQ = _amplpy_xpress_swig.CutDirection_EQ
    GE = _amplpy_xpress_swig.CutDirection_GE
    LE = _amplpy_xpress_swig.CutDirection_LE

    @staticmethod
    def toString(dir):
        return _amplpy_xpress_swig.CutDirection_toString(dir)

    def __init__(self):
        _amplpy_xpress_swig.CutDirection_swiginit(self, _amplpy_xpress_swig.new_CutDirection())
    __swig_destroy__ = _amplpy_xpress_swig.delete_CutDirection

# Register CutDirection in _amplpy_xpress_swig:
_amplpy_xpress_swig.CutDirection_swigregister(CutDirection)
class Status(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNKNOWN = _amplpy_xpress_swig.Status_UNKNOWN
    OPTIMAL = _amplpy_xpress_swig.Status_OPTIMAL
    INFEASIBLE = _amplpy_xpress_swig.Status_INFEASIBLE
    UNBOUNDED = _amplpy_xpress_swig.Status_UNBOUNDED
    LIMIT_ITERATION = _amplpy_xpress_swig.Status_LIMIT_ITERATION
    LIMIT_NODE = _amplpy_xpress_swig.Status_LIMIT_NODE
    LIMIT_TIME = _amplpy_xpress_swig.Status_LIMIT_TIME
    LIMIT_SOLUTION = _amplpy_xpress_swig.Status_LIMIT_SOLUTION
    INTERRUPTED = _amplpy_xpress_swig.Status_INTERRUPTED
    NOTMAPPED = _amplpy_xpress_swig.Status_NOTMAPPED

    def __init__(self):
        _amplpy_xpress_swig.Status_swiginit(self, _amplpy_xpress_swig.new_Status())
    __swig_destroy__ = _amplpy_xpress_swig.delete_Status

# Register Status in _amplpy_xpress_swig:
_amplpy_xpress_swig.Status_swigregister(Status)

def calculateRelMIPGAP(obj, bbound):
    return _amplpy_xpress_swig.calculateRelMIPGAP(obj, bbound)
class Entity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self):
        return _amplpy_xpress_swig.Entity_name(self)

    def indices(self):
        return _amplpy_xpress_swig.Entity_indices(self)

    def coeffs(self):
        return _amplpy_xpress_swig.Entity_coeffs(self)

    def solverIndex(self, *args):
        return _amplpy_xpress_swig.Entity_solverIndex(self, *args)

    def value(self, *args):
        return _amplpy_xpress_swig.Entity_value(self, *args)

    def toAMPLString(self, varMap, consMap, records):
        return _amplpy_xpress_swig.Entity_toAMPLString(self, varMap, consMap, records)

    def __eq__(self, other):
        return _amplpy_xpress_swig.Entity___eq__(self, other)
    __swig_destroy__ = _amplpy_xpress_swig.delete_Entity

# Register Entity in _amplpy_xpress_swig:
_amplpy_xpress_swig.Entity_swigregister(Entity)
class Constraint(Entity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_xpress_swig.Constraint_swiginit(self, _amplpy_xpress_swig.new_Constraint(*args))

    def sense(self):
        return _amplpy_xpress_swig.Constraint_sense(self)

    def rhs(self):
        return _amplpy_xpress_swig.Constraint_rhs(self)

    def toAMPLString(self, varMap, consMap, records):
        return _amplpy_xpress_swig.Constraint_toAMPLString(self, varMap, consMap, records)

    def toString(self, *args):
        return _amplpy_xpress_swig.Constraint_toString(self, *args)

    def __eq__(self, other):
        return _amplpy_xpress_swig.Constraint___eq__(self, other)

    def to_string(self, *args):
        return _amplpy_xpress_swig.Constraint_to_string(self, *args)
    __swig_destroy__ = _amplpy_xpress_swig.delete_Constraint

# Register Constraint in _amplpy_xpress_swig:
_amplpy_xpress_swig.Constraint_swigregister(Constraint)
class Variable(Entity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_xpress_swig.Variable_swiginit(self, _amplpy_xpress_swig.new_Variable(*args))
    ub_ = property(_amplpy_xpress_swig.Variable_ub__get, _amplpy_xpress_swig.Variable_ub__set)
    lb_ = property(_amplpy_xpress_swig.Variable_lb__get, _amplpy_xpress_swig.Variable_lb__set)
    obj_ = property(_amplpy_xpress_swig.Variable_obj__get, _amplpy_xpress_swig.Variable_obj__set)
    type_ = property(_amplpy_xpress_swig.Variable_type__get, _amplpy_xpress_swig.Variable_type__set)

    def toAMPLString(self, map, consMap, records):
        return _amplpy_xpress_swig.Variable_toAMPLString(self, map, consMap, records)
    __swig_destroy__ = _amplpy_xpress_swig.delete_Variable

# Register Variable in _amplpy_xpress_swig:
_amplpy_xpress_swig.Variable_swigregister(Variable)
class Records(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_xpress_swig.Records_swiginit(self, _amplpy_xpress_swig.new_Records(*args))

    def getRecordedEntities(self, exportToAMPL=False):
        return _amplpy_xpress_swig.Records_getRecordedEntities(self, exportToAMPL)

    def addVariable(self, v):
        return _amplpy_xpress_swig.Records_addVariable(self, v)

    def addConstraint(self, c):
        return _amplpy_xpress_swig.Records_addConstraint(self, c)

    def getVarIndices(self, min, max):
        return _amplpy_xpress_swig.Records_getVarIndices(self, min, max)

    def getConsIndices(self, min, max):
        return _amplpy_xpress_swig.Records_getConsIndices(self, min, max)

    def getNumConstraints(self):
        return _amplpy_xpress_swig.Records_getNumConstraints(self)

    def getNumVariables(self):
        return _amplpy_xpress_swig.Records_getNumVariables(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_Records

# Register Records in _amplpy_xpress_swig:
_amplpy_xpress_swig.Records_swigregister(Records)
class AMPLMutex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _amplpy_xpress_swig.AMPLMutex_swiginit(self, _amplpy_xpress_swig.new_AMPLMutex())
    __swig_destroy__ = _amplpy_xpress_swig.delete_AMPLMutex

    def Lock(self):
        return _amplpy_xpress_swig.AMPLMutex_Lock(self)

    def Unlock(self):
        return _amplpy_xpress_swig.AMPLMutex_Unlock(self)

# Register AMPLMutex in _amplpy_xpress_swig:
_amplpy_xpress_swig.AMPLMutex_swigregister(AMPLMutex)
class BaseCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValueImpl(self, v):
        return _amplpy_xpress_swig.BaseCallback_getValueImpl(self, v)

    def canDo(self, f):
        return _amplpy_xpress_swig.BaseCallback_canDo(self, f)

    def record(self, *args):
        return _amplpy_xpress_swig.BaseCallback_record(self, *args)

    def addVariable(self, *args):
        return _amplpy_xpress_swig.BaseCallback_addVariable(self, *args)

    def setDebugCuts(self, cutDebug, cutDebugIntCoefficients, cutDebugPrintVarNames):
        return _amplpy_xpress_swig.BaseCallback_setDebugCuts(self, cutDebug, cutDebugIntCoefficients, cutDebugPrintVarNames)

    def __init__(self):
        if self.__class__ == BaseCallback:
            _self = None
        else:
            _self = self
        _amplpy_xpress_swig.BaseCallback_swiginit(self, _amplpy_xpress_swig.new_BaseCallback(_self, ))

    def run(self):
        return _amplpy_xpress_swig.BaseCallback_run(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_BaseCallback

    def addCut(self, vars, coeffs, direction, rhs):
        return _amplpy_xpress_swig.BaseCallback_addCut(self, vars, coeffs, direction, rhs)

    def addLazy(self, vars, coeffs, direction, rhs):
        return _amplpy_xpress_swig.BaseCallback_addLazy(self, vars, coeffs, direction, rhs)

    def addCutIndices(self, nvars, coeffs, direction, rhs):
        return _amplpy_xpress_swig.BaseCallback_addCutIndices(self, nvars, coeffs, direction, rhs)

    def addLazyIndices(self, nvars, coeffs, direction, rhs):
        return _amplpy_xpress_swig.BaseCallback_addLazyIndices(self, nvars, coeffs, direction, rhs)

    def setHeuristicSolution(self, nvars, indices, values):
        return _amplpy_xpress_swig.BaseCallback_setHeuristicSolution(self, nvars, indices, values)

    def getSolutionVector(self):
        return _amplpy_xpress_swig.BaseCallback_getSolutionVector(self)

    def getSolution(self, len, sol):
        return _amplpy_xpress_swig.BaseCallback_getSolution(self, len, sol)

    def getObj(self):
        return _amplpy_xpress_swig.BaseCallback_getObj(self)

    def getWhere(self):
        return _amplpy_xpress_swig.BaseCallback_getWhere(self)

    def getWhereString(self):
        return _amplpy_xpress_swig.BaseCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_xpress_swig.BaseCallback_getMessage(self)

    def getAMPLWhere(self):
        return _amplpy_xpress_swig.BaseCallback_getAMPLWhere(self)

    def getValue(self, v):
        return _amplpy_xpress_swig.BaseCallback_getValue(self, v)

    def getValueArray(self, v):
        return _amplpy_xpress_swig.BaseCallback_getValueArray(self, v)

    def getSolutionDict(self):
        return _amplpy_xpress_swig.BaseCallback_getSolutionDict(self)

    def getVarMap(self):
        return _amplpy_xpress_swig.BaseCallback_getVarMap(self)

    def getVarMapInverse(self):
        return _amplpy_xpress_swig.BaseCallback_getVarMapInverse(self)

    def get_solution_vector(self):
        return _amplpy_xpress_swig.BaseCallback_get_solution_vector(self)

    def can_do(self, f):
        return _amplpy_xpress_swig.BaseCallback_can_do(self, f)

    def add_variable(self, *args):
        return _amplpy_xpress_swig.BaseCallback_add_variable(self, *args)

    def set_debug_cuts(self, cutDebug, cutDebugIntCoefficients, cutDebugPrintVarNames):
        return _amplpy_xpress_swig.BaseCallback_set_debug_cuts(self, cutDebug, cutDebugIntCoefficients, cutDebugPrintVarNames)

    def get_var_map(self):
        return _amplpy_xpress_swig.BaseCallback_get_var_map(self)

    def get_var_map_inverse(self):
        return _amplpy_xpress_swig.BaseCallback_get_var_map_inverse(self)

    def set_heuristic_solution(self, nvars, indices, values):
        return _amplpy_xpress_swig.BaseCallback_set_heuristic_solution(self, nvars, indices, values)

    def get_obj(self):
        return _amplpy_xpress_swig.BaseCallback_get_obj(self)

    def get_where(self):
        return _amplpy_xpress_swig.BaseCallback_get_where(self)

    def get_where_string(self):
        return _amplpy_xpress_swig.BaseCallback_get_where_string(self)

    def get_message(self):
        return _amplpy_xpress_swig.BaseCallback_get_message(self)

    def get_ampl_where(self):
        return _amplpy_xpress_swig.BaseCallback_get_ampl_where(self)

    def get_value(self, v):
        return _amplpy_xpress_swig.BaseCallback_get_value(self, v)

    def get_value_array(self, v):
        return _amplpy_xpress_swig.BaseCallback_get_value_array(self, v)
    def __disown__(self):
        self.this.disown()
        _amplpy_xpress_swig.disown_BaseCallback(self)
        return weakref.proxy(self)

# Register BaseCallback in _amplpy_xpress_swig:
_amplpy_xpress_swig.BaseCallback_swigregister(BaseCallback)
class GenericCallback(BaseCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValueImpl(self, v):
        return _amplpy_xpress_swig.GenericCallback_getValueImpl(self, v)

    def getSolutionVector(self):
        return _amplpy_xpress_swig.GenericCallback_getSolutionVector(self)

    def getValueArray(self, v):
        return _amplpy_xpress_swig.GenericCallback_getValueArray(self, v)

    def setHeuristicSolution(self, nvars, indices, values):
        return _amplpy_xpress_swig.GenericCallback_setHeuristicSolution(self, nvars, indices, values)

    def getObj(self):
        return _amplpy_xpress_swig.GenericCallback_getObj(self)

    def getWhere(self):
        return _amplpy_xpress_swig.GenericCallback_getWhere(self)

    def getAMPLWhere(self):
        return _amplpy_xpress_swig.GenericCallback_getAMPLWhere(self)

    def getWhereString(self):
        return _amplpy_xpress_swig.GenericCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_xpress_swig.GenericCallback_getMessage(self)

    def getValue(self, v):
        return _amplpy_xpress_swig.GenericCallback_getValue(self, v)

    def canDo(self, f):
        return _amplpy_xpress_swig.GenericCallback_canDo(self, f)

    def __init__(self):
        if self.__class__ == GenericCallback:
            _self = None
        else:
            _self = self
        _amplpy_xpress_swig.GenericCallback_swiginit(self, _amplpy_xpress_swig.new_GenericCallback(_self, ))
    __swig_destroy__ = _amplpy_xpress_swig.delete_GenericCallback
    def __disown__(self):
        self.this.disown()
        _amplpy_xpress_swig.disown_GenericCallback(self)
        return weakref.proxy(self)

# Register GenericCallback in _amplpy_xpress_swig:
_amplpy_xpress_swig.GenericCallback_swigregister(GenericCallback)
class Option(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name_ = property(_amplpy_xpress_swig.Option_name__get, _amplpy_xpress_swig.Option_name__set)
    description_ = property(_amplpy_xpress_swig.Option_description__get, _amplpy_xpress_swig.Option_description__set)
    INT = _amplpy_xpress_swig.Option_INT
    BOOL = _amplpy_xpress_swig.Option_BOOL
    DOUBLE = _amplpy_xpress_swig.Option_DOUBLE
    STRING = _amplpy_xpress_swig.Option_STRING
    UNKNOWN = _amplpy_xpress_swig.Option_UNKNOWN
    type_ = property(_amplpy_xpress_swig.Option_type__get, _amplpy_xpress_swig.Option_type__set)

    def __init__(self, *args):
        _amplpy_xpress_swig.Option_swiginit(self, _amplpy_xpress_swig.new_Option(*args))

    def name(self):
        return _amplpy_xpress_swig.Option_name(self)

    def description(self):
        return _amplpy_xpress_swig.Option_description(self)

    def type(self):
        return _amplpy_xpress_swig.Option_type(self)

    def typeStr(self):
        return _amplpy_xpress_swig.Option_typeStr(self)

    def toString(self):
        return _amplpy_xpress_swig.Option_toString(self)

    def __repr__(self):
      return self.toString()

    __swig_destroy__ = _amplpy_xpress_swig.delete_Option

# Register Option in _amplpy_xpress_swig:
_amplpy_xpress_swig.Option_swigregister(Option)
class AMPLModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def driver(self):
        return _amplpy_xpress_swig.AMPLModel_driver(self)

    def getRecordedEntities(self, exportToAMPL=True):
        return _amplpy_xpress_swig.AMPLModel_getRecordedEntities(self, exportToAMPL)

    def addConstraint(self, *args):
        return _amplpy_xpress_swig.AMPLModel_addConstraint(self, *args)

    def record(self, *args):
        return _amplpy_xpress_swig.AMPLModel_record(self, *args)

    def infinity(self):
        return _amplpy_xpress_swig.AMPLModel_infinity(self)

    def negInfinity(self):
        return _amplpy_xpress_swig.AMPLModel_negInfinity(self)

    def addVariable(self, *args):
        return _amplpy_xpress_swig.AMPLModel_addVariable(self, *args)

    def getFileName(self):
        return _amplpy_xpress_swig.AMPLModel_getFileName(self)

    def getConMapInverse(self):
        return _amplpy_xpress_swig.AMPLModel_getConMapInverse(self)

    def getConMap(self):
        return _amplpy_xpress_swig.AMPLModel_getConMap(self)

    def getConMapFiltered(self, beginWith):
        return _amplpy_xpress_swig.AMPLModel_getConMapFiltered(self, beginWith)

    def setCallback(self, *args):
        return _amplpy_xpress_swig.AMPLModel_setCallback(self, *args)

    def getSolutionVector(self):
        return _amplpy_xpress_swig.AMPLModel_getSolutionVector(self)

    def getDualVector(self):
        return _amplpy_xpress_swig.AMPLModel_getDualVector(self)

    def getNumVars(self):
        return _amplpy_xpress_swig.AMPLModel_getNumVars(self)

    def getNumCons(self):
        return _amplpy_xpress_swig.AMPLModel_getNumCons(self)

    def getStatus(self):
        return _amplpy_xpress_swig.AMPLModel_getStatus(self)

    def optimize(self):
        return _amplpy_xpress_swig.AMPLModel_optimize(self)

    def writeSol(self, *args):
        return _amplpy_xpress_swig.AMPLModel_writeSol(self, *args)

    def getSolution(self, first, length, sol):
        return _amplpy_xpress_swig.AMPLModel_getSolution(self, first, length, sol)

    def getObj(self):
        return _amplpy_xpress_swig.AMPLModel_getObj(self)

    def error(self, code):
        return _amplpy_xpress_swig.AMPLModel_error(self, code)

    def enableLazyConstraints(self):
        return _amplpy_xpress_swig.AMPLModel_enableLazyConstraints(self)

    def printModelVars(self, onlyNonZero):
        return _amplpy_xpress_swig.AMPLModel_printModelVars(self, onlyNonZero)

    def setAMPLParameter(self, *args):
        return _amplpy_xpress_swig.AMPLModel_setAMPLParameter(self, *args)

    def getAMPLIntParameter(self, params):
        return _amplpy_xpress_swig.AMPLModel_getAMPLIntParameter(self, params)

    def getAMPLDoubleParameter(self, param):
        return _amplpy_xpress_swig.AMPLModel_getAMPLDoubleParameter(self, param)

    def getAMPLIntAttribute(self, arg2):
        return _amplpy_xpress_swig.AMPLModel_getAMPLIntAttribute(self, arg2)

    def getAMPLDoubleAttribute(self, arg2):
        return _amplpy_xpress_swig.AMPLModel_getAMPLDoubleAttribute(self, arg2)

    def getOptions(self):
        return _amplpy_xpress_swig.AMPLModel_getOptions(self)

    def setOption(self, *args):
        return _amplpy_xpress_swig.AMPLModel_setOption(self, *args)

    def getIntOption(self, name):
        return _amplpy_xpress_swig.AMPLModel_getIntOption(self, name)

    def getDoubleOption(self, name):
        return _amplpy_xpress_swig.AMPLModel_getDoubleOption(self, name)

    def getStringOption(self, name):
        return _amplpy_xpress_swig.AMPLModel_getStringOption(self, name)

    def refresh(self):
        return _amplpy_xpress_swig.AMPLModel_refresh(self)

    def getSolutionDict(self):
        return _amplpy_xpress_swig.AMPLModel_getSolutionDict(self)

    def getVarMap(self):
        return _amplpy_xpress_swig.AMPLModel_getVarMap(self)

    def getVarMapFiltered(self, beginWith):
        return _amplpy_xpress_swig.AMPLModel_getVarMapFiltered(self, beginWith)

    def getVarMapInverse(self):
        return _amplpy_xpress_swig.AMPLModel_getVarMapInverse(self)

    def get_recorded_entities(self, exportToAMPL=True):
        return _amplpy_xpress_swig.AMPLModel_get_recorded_entities(self, exportToAMPL)

    def add_variable(self, *args):
        return _amplpy_xpress_swig.AMPLModel_add_variable(self, *args)

    def get_file_name(self):
        return _amplpy_xpress_swig.AMPLModel_get_file_name(self)

    def get_var_map_inverse(self):
        return _amplpy_xpress_swig.AMPLModel_get_var_map_inverse(self)

    def get_con_map_inverse(self):
        return _amplpy_xpress_swig.AMPLModel_get_con_map_inverse(self)

    def get_var_map(self):
        return _amplpy_xpress_swig.AMPLModel_get_var_map(self)

    def get_con_map(self):
        return _amplpy_xpress_swig.AMPLModel_get_con_map(self)

    def get_var_map_filtered(self, beginWith):
        return _amplpy_xpress_swig.AMPLModel_get_var_map_filtered(self, beginWith)

    def get_con_map_filtered(self, beginWith):
        return _amplpy_xpress_swig.AMPLModel_get_con_map_filtered(self, beginWith)

    def set_callback(self, *args):
        return _amplpy_xpress_swig.AMPLModel_set_callback(self, *args)

    def get_solution_vector(self):
        return _amplpy_xpress_swig.AMPLModel_get_solution_vector(self)

    def get_dual_vector(self):
        return _amplpy_xpress_swig.AMPLModel_get_dual_vector(self)

    def get_num_vars(self):
        return _amplpy_xpress_swig.AMPLModel_get_num_vars(self)

    def get_num_cons(self):
        return _amplpy_xpress_swig.AMPLModel_get_num_cons(self)

    def write_sol(self, *args):
        return _amplpy_xpress_swig.AMPLModel_write_sol(self, *args)

    def get_obj(self):
        return _amplpy_xpress_swig.AMPLModel_get_obj(self)

    def enable_lazy_constraints(self):
        return _amplpy_xpress_swig.AMPLModel_enable_lazy_constraints(self)

    def print_model_vars(self, onlyNonZero):
        return _amplpy_xpress_swig.AMPLModel_print_model_vars(self, onlyNonZero)

    def get_options(self):
        return _amplpy_xpress_swig.AMPLModel_get_options(self)

    def set_option(self, *args):
        return _amplpy_xpress_swig.AMPLModel_set_option(self, *args)

    def get_int_option(self, name):
        return _amplpy_xpress_swig.AMPLModel_get_int_option(self, name)

    def get_double_option(self, name):
        return _amplpy_xpress_swig.AMPLModel_get_double_option(self, name)

    def get_string_option(self, name):
        return _amplpy_xpress_swig.AMPLModel_get_string_option(self, name)
    __swig_destroy__ = _amplpy_xpress_swig.delete_AMPLModel

# Register AMPLModel in _amplpy_xpress_swig:
_amplpy_xpress_swig.AMPLModel_swigregister(AMPLModel)
class AMPLMPModel(AMPLModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOptions(self):
        return _amplpy_xpress_swig.AMPLMPModel_getOptions(self)

    def setOption(self, *args):
        return _amplpy_xpress_swig.AMPLMPModel_setOption(self, *args)

    def getIntOption(self, name):
        return _amplpy_xpress_swig.AMPLMPModel_getIntOption(self, name)

    def getDoubleOption(self, name):
        return _amplpy_xpress_swig.AMPLMPModel_getDoubleOption(self, name)

    def getStringOption(self, name):
        return _amplpy_xpress_swig.AMPLMPModel_getStringOption(self, name)

    def refresh(self):
        return _amplpy_xpress_swig.AMPLMPModel_refresh(self)

    def optimize(self):
        return _amplpy_xpress_swig.AMPLMPModel_optimize(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_AMPLMPModel

# Register AMPLMPModel in _amplpy_xpress_swig:
_amplpy_xpress_swig.AMPLMPModel_swigregister(AMPLMPModel)
class SolverDriverXpress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def loadModel(self, *args):
        return _amplpy_xpress_swig.SolverDriverXpress_loadModel(self, *args)
    __swig_destroy__ = _amplpy_xpress_swig.delete_SolverDriverXpress

# Register SolverDriverXpress in _amplpy_xpress_swig:
_amplpy_xpress_swig.SolverDriverXpress_swigregister(SolverDriverXpress)
XPRSdeprecatedattrib = _amplpy_xpress_swig.XPRSdeprecatedattrib
XPRSdeprecatedcontrol = _amplpy_xpress_swig.XPRSdeprecatedcontrol
XPRSdeprecatedenum = _amplpy_xpress_swig.XPRSdeprecatedenum
class XPRSalltype(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    XPRStype_undefined = _amplpy_xpress_swig.XPRSalltype_XPRStype_undefined
    XPRStype_integer = _amplpy_xpress_swig.XPRSalltype_XPRStype_integer
    XPRStype_real = _amplpy_xpress_swig.XPRSalltype_XPRStype_real
    type = property(_amplpy_xpress_swig.XPRSalltype_type_get, _amplpy_xpress_swig.XPRSalltype_type_set)

    def __init__(self):
        _amplpy_xpress_swig.XPRSalltype_swiginit(self, _amplpy_xpress_swig.new_XPRSalltype())
    __swig_destroy__ = _amplpy_xpress_swig.delete_XPRSalltype

# Register XPRSalltype in _amplpy_xpress_swig:
_amplpy_xpress_swig.XPRSalltype_swigregister(XPRSalltype)
XPRS_PLUSINFINITY = _amplpy_xpress_swig.XPRS_PLUSINFINITY
XPRS_MINUSINFINITY = _amplpy_xpress_swig.XPRS_MINUSINFINITY
XPRS_MAXINT = _amplpy_xpress_swig.XPRS_MAXINT
XPRS_MAXBANNERLENGTH = _amplpy_xpress_swig.XPRS_MAXBANNERLENGTH
XPVERSION = _amplpy_xpress_swig.XPVERSION
XPVERSION_MAJOR = _amplpy_xpress_swig.XPVERSION_MAJOR
XPVERSION_MINOR = _amplpy_xpress_swig.XPVERSION_MINOR
XPVERSION_BUILD = _amplpy_xpress_swig.XPVERSION_BUILD
XPVERSION_FULL = _amplpy_xpress_swig.XPVERSION_FULL
XPRS_MAXMESSAGELENGTH = _amplpy_xpress_swig.XPRS_MAXMESSAGELENGTH
XPRS_MPSRHSNAME = _amplpy_xpress_swig.XPRS_MPSRHSNAME
XPRS_MPSOBJNAME = _amplpy_xpress_swig.XPRS_MPSOBJNAME
XPRS_MPSRANGENAME = _amplpy_xpress_swig.XPRS_MPSRANGENAME
XPRS_MPSBOUNDNAME = _amplpy_xpress_swig.XPRS_MPSBOUNDNAME
XPRS_OUTPUTMASK = _amplpy_xpress_swig.XPRS_OUTPUTMASK
XPRS_TUNERMETHODFILE = _amplpy_xpress_swig.XPRS_TUNERMETHODFILE
XPRS_TUNEROUTPUTPATH = _amplpy_xpress_swig.XPRS_TUNEROUTPUTPATH
XPRS_TUNERSESSIONNAME = _amplpy_xpress_swig.XPRS_TUNERSESSIONNAME
XPRS_COMPUTEEXECSERVICE = _amplpy_xpress_swig.XPRS_COMPUTEEXECSERVICE
XPRS_MAXCUTTIME = _amplpy_xpress_swig.XPRS_MAXCUTTIME
XPRS_MAXSTALLTIME = _amplpy_xpress_swig.XPRS_MAXSTALLTIME
XPRS_TUNERMAXTIME = _amplpy_xpress_swig.XPRS_TUNERMAXTIME
XPRS_MATRIXTOL = _amplpy_xpress_swig.XPRS_MATRIXTOL
XPRS_PIVOTTOL = _amplpy_xpress_swig.XPRS_PIVOTTOL
XPRS_FEASTOL = _amplpy_xpress_swig.XPRS_FEASTOL
XPRS_OUTPUTTOL = _amplpy_xpress_swig.XPRS_OUTPUTTOL
XPRS_SOSREFTOL = _amplpy_xpress_swig.XPRS_SOSREFTOL
XPRS_OPTIMALITYTOL = _amplpy_xpress_swig.XPRS_OPTIMALITYTOL
XPRS_ETATOL = _amplpy_xpress_swig.XPRS_ETATOL
XPRS_RELPIVOTTOL = _amplpy_xpress_swig.XPRS_RELPIVOTTOL
XPRS_MIPTOL = _amplpy_xpress_swig.XPRS_MIPTOL
XPRS_MIPTOLTARGET = _amplpy_xpress_swig.XPRS_MIPTOLTARGET
XPRS_BARPERTURB = _amplpy_xpress_swig.XPRS_BARPERTURB
XPRS_MIPADDCUTOFF = _amplpy_xpress_swig.XPRS_MIPADDCUTOFF
XPRS_MIPABSCUTOFF = _amplpy_xpress_swig.XPRS_MIPABSCUTOFF
XPRS_MIPRELCUTOFF = _amplpy_xpress_swig.XPRS_MIPRELCUTOFF
XPRS_PSEUDOCOST = _amplpy_xpress_swig.XPRS_PSEUDOCOST
XPRS_PENALTY = _amplpy_xpress_swig.XPRS_PENALTY
XPRS_BIGM = _amplpy_xpress_swig.XPRS_BIGM
XPRS_MIPABSSTOP = _amplpy_xpress_swig.XPRS_MIPABSSTOP
XPRS_MIPRELSTOP = _amplpy_xpress_swig.XPRS_MIPRELSTOP
XPRS_CROSSOVERACCURACYTOL = _amplpy_xpress_swig.XPRS_CROSSOVERACCURACYTOL
XPRS_PRIMALPERTURB = _amplpy_xpress_swig.XPRS_PRIMALPERTURB
XPRS_DUALPERTURB = _amplpy_xpress_swig.XPRS_DUALPERTURB
XPRS_BAROBJSCALE = _amplpy_xpress_swig.XPRS_BAROBJSCALE
XPRS_BARRHSSCALE = _amplpy_xpress_swig.XPRS_BARRHSSCALE
XPRS_CHOLESKYTOL = _amplpy_xpress_swig.XPRS_CHOLESKYTOL
XPRS_BARGAPSTOP = _amplpy_xpress_swig.XPRS_BARGAPSTOP
XPRS_BARDUALSTOP = _amplpy_xpress_swig.XPRS_BARDUALSTOP
XPRS_BARPRIMALSTOP = _amplpy_xpress_swig.XPRS_BARPRIMALSTOP
XPRS_BARSTEPSTOP = _amplpy_xpress_swig.XPRS_BARSTEPSTOP
XPRS_ELIMTOL = _amplpy_xpress_swig.XPRS_ELIMTOL
XPRS_MARKOWITZTOL = _amplpy_xpress_swig.XPRS_MARKOWITZTOL
XPRS_MIPABSGAPNOTIFY = _amplpy_xpress_swig.XPRS_MIPABSGAPNOTIFY
XPRS_MIPRELGAPNOTIFY = _amplpy_xpress_swig.XPRS_MIPRELGAPNOTIFY
XPRS_BARLARGEBOUND = _amplpy_xpress_swig.XPRS_BARLARGEBOUND
XPRS_PPFACTOR = _amplpy_xpress_swig.XPRS_PPFACTOR
XPRS_REPAIRINDEFINITEQMAX = _amplpy_xpress_swig.XPRS_REPAIRINDEFINITEQMAX
XPRS_BARGAPTARGET = _amplpy_xpress_swig.XPRS_BARGAPTARGET
XPRS_DUMMYCONTROL = _amplpy_xpress_swig.XPRS_DUMMYCONTROL
XPRS_BARSTARTWEIGHT = _amplpy_xpress_swig.XPRS_BARSTARTWEIGHT
XPRS_BARFREESCALE = _amplpy_xpress_swig.XPRS_BARFREESCALE
XPRS_SBEFFORT = _amplpy_xpress_swig.XPRS_SBEFFORT
XPRS_HEURDIVERANDOMIZE = _amplpy_xpress_swig.XPRS_HEURDIVERANDOMIZE
XPRS_HEURSEARCHEFFORT = _amplpy_xpress_swig.XPRS_HEURSEARCHEFFORT
XPRS_CUTFACTOR = _amplpy_xpress_swig.XPRS_CUTFACTOR
XPRS_EIGENVALUETOL = _amplpy_xpress_swig.XPRS_EIGENVALUETOL
XPRS_INDLINBIGM = _amplpy_xpress_swig.XPRS_INDLINBIGM
XPRS_TREEMEMORYSAVINGTARGET = _amplpy_xpress_swig.XPRS_TREEMEMORYSAVINGTARGET
XPRS_INDPRELINBIGM = _amplpy_xpress_swig.XPRS_INDPRELINBIGM
XPRS_RELAXTREEMEMORYLIMIT = _amplpy_xpress_swig.XPRS_RELAXTREEMEMORYLIMIT
XPRS_MIPABSGAPNOTIFYOBJ = _amplpy_xpress_swig.XPRS_MIPABSGAPNOTIFYOBJ
XPRS_MIPABSGAPNOTIFYBOUND = _amplpy_xpress_swig.XPRS_MIPABSGAPNOTIFYBOUND
XPRS_PRESOLVEMAXGROW = _amplpy_xpress_swig.XPRS_PRESOLVEMAXGROW
XPRS_HEURSEARCHTARGETSIZE = _amplpy_xpress_swig.XPRS_HEURSEARCHTARGETSIZE
XPRS_CROSSOVERRELPIVOTTOL = _amplpy_xpress_swig.XPRS_CROSSOVERRELPIVOTTOL
XPRS_CROSSOVERRELPIVOTTOLSAFE = _amplpy_xpress_swig.XPRS_CROSSOVERRELPIVOTTOLSAFE
XPRS_DETLOGFREQ = _amplpy_xpress_swig.XPRS_DETLOGFREQ
XPRS_MAXIMPLIEDBOUND = _amplpy_xpress_swig.XPRS_MAXIMPLIEDBOUND
XPRS_FEASTOLTARGET = _amplpy_xpress_swig.XPRS_FEASTOLTARGET
XPRS_OPTIMALITYTOLTARGET = _amplpy_xpress_swig.XPRS_OPTIMALITYTOLTARGET
XPRS_PRECOMPONENTSEFFORT = _amplpy_xpress_swig.XPRS_PRECOMPONENTSEFFORT
XPRS_LPLOGDELAY = _amplpy_xpress_swig.XPRS_LPLOGDELAY
XPRS_HEURDIVEITERLIMIT = _amplpy_xpress_swig.XPRS_HEURDIVEITERLIMIT
XPRS_BARKERNEL = _amplpy_xpress_swig.XPRS_BARKERNEL
XPRS_FEASTOLPERTURB = _amplpy_xpress_swig.XPRS_FEASTOLPERTURB
XPRS_CROSSOVERFEASWEIGHT = _amplpy_xpress_swig.XPRS_CROSSOVERFEASWEIGHT
XPRS_LUPIVOTTOL = _amplpy_xpress_swig.XPRS_LUPIVOTTOL
XPRS_MIPRESTARTGAPTHRESHOLD = _amplpy_xpress_swig.XPRS_MIPRESTARTGAPTHRESHOLD
XPRS_NODEPROBINGEFFORT = _amplpy_xpress_swig.XPRS_NODEPROBINGEFFORT
XPRS_INPUTTOL = _amplpy_xpress_swig.XPRS_INPUTTOL
XPRS_MIPRESTARTFACTOR = _amplpy_xpress_swig.XPRS_MIPRESTARTFACTOR
XPRS_BAROBJPERTURB = _amplpy_xpress_swig.XPRS_BAROBJPERTURB
XPRS_CPIALPHA = _amplpy_xpress_swig.XPRS_CPIALPHA
XPRS_GLOBALSPATIALBRANCHPROPAGATIONEFFORT = _amplpy_xpress_swig.XPRS_GLOBALSPATIALBRANCHPROPAGATIONEFFORT
XPRS_GLOBALSPATIALBRANCHCUTTINGEFFORT = _amplpy_xpress_swig.XPRS_GLOBALSPATIALBRANCHCUTTINGEFFORT
XPRS_GLOBALBOUNDINGBOX = _amplpy_xpress_swig.XPRS_GLOBALBOUNDINGBOX
XPRS_TIMELIMIT = _amplpy_xpress_swig.XPRS_TIMELIMIT
XPRS_SOLTIMELIMIT = _amplpy_xpress_swig.XPRS_SOLTIMELIMIT
XPRS_REPAIRINFEASTIMELIMIT = _amplpy_xpress_swig.XPRS_REPAIRINFEASTIMELIMIT
XPRS_EXTRAROWS = _amplpy_xpress_swig.XPRS_EXTRAROWS
XPRS_EXTRACOLS = _amplpy_xpress_swig.XPRS_EXTRACOLS
XPRS_LPITERLIMIT = _amplpy_xpress_swig.XPRS_LPITERLIMIT
XPRS_LPLOG = _amplpy_xpress_swig.XPRS_LPLOG
XPRS_SCALING = _amplpy_xpress_swig.XPRS_SCALING
XPRS_PRESOLVE = _amplpy_xpress_swig.XPRS_PRESOLVE
XPRS_CRASH = _amplpy_xpress_swig.XPRS_CRASH
XPRS_PRICINGALG = _amplpy_xpress_swig.XPRS_PRICINGALG
XPRS_INVERTFREQ = _amplpy_xpress_swig.XPRS_INVERTFREQ
XPRS_INVERTMIN = _amplpy_xpress_swig.XPRS_INVERTMIN
XPRS_MAXNODE = _amplpy_xpress_swig.XPRS_MAXNODE
XPRS_MAXMIPSOL = _amplpy_xpress_swig.XPRS_MAXMIPSOL
XPRS_SIFTPASSES = _amplpy_xpress_swig.XPRS_SIFTPASSES
XPRS_DEFAULTALG = _amplpy_xpress_swig.XPRS_DEFAULTALG
XPRS_VARSELECTION = _amplpy_xpress_swig.XPRS_VARSELECTION
XPRS_NODESELECTION = _amplpy_xpress_swig.XPRS_NODESELECTION
XPRS_BACKTRACK = _amplpy_xpress_swig.XPRS_BACKTRACK
XPRS_MIPLOG = _amplpy_xpress_swig.XPRS_MIPLOG
XPRS_KEEPNROWS = _amplpy_xpress_swig.XPRS_KEEPNROWS
XPRS_MPSECHO = _amplpy_xpress_swig.XPRS_MPSECHO
XPRS_MAXPAGELINES = _amplpy_xpress_swig.XPRS_MAXPAGELINES
XPRS_OUTPUTLOG = _amplpy_xpress_swig.XPRS_OUTPUTLOG
XPRS_BARSOLUTION = _amplpy_xpress_swig.XPRS_BARSOLUTION
XPRS_CROSSOVER = _amplpy_xpress_swig.XPRS_CROSSOVER
XPRS_BARITERLIMIT = _amplpy_xpress_swig.XPRS_BARITERLIMIT
XPRS_CHOLESKYALG = _amplpy_xpress_swig.XPRS_CHOLESKYALG
XPRS_BAROUTPUT = _amplpy_xpress_swig.XPRS_BAROUTPUT
XPRS_EXTRAMIPENTS = _amplpy_xpress_swig.XPRS_EXTRAMIPENTS
XPRS_REFACTOR = _amplpy_xpress_swig.XPRS_REFACTOR
XPRS_BARTHREADS = _amplpy_xpress_swig.XPRS_BARTHREADS
XPRS_KEEPBASIS = _amplpy_xpress_swig.XPRS_KEEPBASIS
XPRS_CROSSOVEROPS = _amplpy_xpress_swig.XPRS_CROSSOVEROPS
XPRS_VERSION = _amplpy_xpress_swig.XPRS_VERSION
XPRS_CROSSOVERTHREADS = _amplpy_xpress_swig.XPRS_CROSSOVERTHREADS
XPRS_BIGMMETHOD = _amplpy_xpress_swig.XPRS_BIGMMETHOD
XPRS_MPSNAMELENGTH = _amplpy_xpress_swig.XPRS_MPSNAMELENGTH
XPRS_ELIMFILLIN = _amplpy_xpress_swig.XPRS_ELIMFILLIN
XPRS_PRESOLVEOPS = _amplpy_xpress_swig.XPRS_PRESOLVEOPS
XPRS_MIPPRESOLVE = _amplpy_xpress_swig.XPRS_MIPPRESOLVE
XPRS_MIPTHREADS = _amplpy_xpress_swig.XPRS_MIPTHREADS
XPRS_BARORDER = _amplpy_xpress_swig.XPRS_BARORDER
XPRS_BREADTHFIRST = _amplpy_xpress_swig.XPRS_BREADTHFIRST
XPRS_AUTOPERTURB = _amplpy_xpress_swig.XPRS_AUTOPERTURB
XPRS_DENSECOLLIMIT = _amplpy_xpress_swig.XPRS_DENSECOLLIMIT
XPRS_CALLBACKFROMMASTERTHREAD = _amplpy_xpress_swig.XPRS_CALLBACKFROMMASTERTHREAD
XPRS_MAXMCOEFFBUFFERELEMS = _amplpy_xpress_swig.XPRS_MAXMCOEFFBUFFERELEMS
XPRS_REFINEOPS = _amplpy_xpress_swig.XPRS_REFINEOPS
XPRS_LPREFINEITERLIMIT = _amplpy_xpress_swig.XPRS_LPREFINEITERLIMIT
XPRS_MIPREFINEITERLIMIT = _amplpy_xpress_swig.XPRS_MIPREFINEITERLIMIT
XPRS_DUALIZEOPS = _amplpy_xpress_swig.XPRS_DUALIZEOPS
XPRS_CROSSOVERITERLIMIT = _amplpy_xpress_swig.XPRS_CROSSOVERITERLIMIT
XPRS_PREBASISRED = _amplpy_xpress_swig.XPRS_PREBASISRED
XPRS_PRESORT = _amplpy_xpress_swig.XPRS_PRESORT
XPRS_PREPERMUTE = _amplpy_xpress_swig.XPRS_PREPERMUTE
XPRS_PREPERMUTESEED = _amplpy_xpress_swig.XPRS_PREPERMUTESEED
XPRS_MAXMEMORYSOFT = _amplpy_xpress_swig.XPRS_MAXMEMORYSOFT
XPRS_CUTFREQ = _amplpy_xpress_swig.XPRS_CUTFREQ
XPRS_SYMSELECT = _amplpy_xpress_swig.XPRS_SYMSELECT
XPRS_SYMMETRY = _amplpy_xpress_swig.XPRS_SYMMETRY
XPRS_MAXMEMORYHARD = _amplpy_xpress_swig.XPRS_MAXMEMORYHARD
XPRS_MIQCPALG = _amplpy_xpress_swig.XPRS_MIQCPALG
XPRS_QCCUTS = _amplpy_xpress_swig.XPRS_QCCUTS
XPRS_QCROOTALG = _amplpy_xpress_swig.XPRS_QCROOTALG
XPRS_PRECONVERTSEPARABLE = _amplpy_xpress_swig.XPRS_PRECONVERTSEPARABLE
XPRS_ALGAFTERNETWORK = _amplpy_xpress_swig.XPRS_ALGAFTERNETWORK
XPRS_TRACE = _amplpy_xpress_swig.XPRS_TRACE
XPRS_MAXIIS = _amplpy_xpress_swig.XPRS_MAXIIS
XPRS_CPUTIME = _amplpy_xpress_swig.XPRS_CPUTIME
XPRS_COVERCUTS = _amplpy_xpress_swig.XPRS_COVERCUTS
XPRS_GOMCUTS = _amplpy_xpress_swig.XPRS_GOMCUTS
XPRS_LPFOLDING = _amplpy_xpress_swig.XPRS_LPFOLDING
XPRS_MPSFORMAT = _amplpy_xpress_swig.XPRS_MPSFORMAT
XPRS_CUTSTRATEGY = _amplpy_xpress_swig.XPRS_CUTSTRATEGY
XPRS_CUTDEPTH = _amplpy_xpress_swig.XPRS_CUTDEPTH
XPRS_TREECOVERCUTS = _amplpy_xpress_swig.XPRS_TREECOVERCUTS
XPRS_TREEGOMCUTS = _amplpy_xpress_swig.XPRS_TREEGOMCUTS
XPRS_CUTSELECT = _amplpy_xpress_swig.XPRS_CUTSELECT
XPRS_TREECUTSELECT = _amplpy_xpress_swig.XPRS_TREECUTSELECT
XPRS_DUALIZE = _amplpy_xpress_swig.XPRS_DUALIZE
XPRS_DUALGRADIENT = _amplpy_xpress_swig.XPRS_DUALGRADIENT
XPRS_SBITERLIMIT = _amplpy_xpress_swig.XPRS_SBITERLIMIT
XPRS_SBBEST = _amplpy_xpress_swig.XPRS_SBBEST
XPRS_BARINDEFLIMIT = _amplpy_xpress_swig.XPRS_BARINDEFLIMIT
XPRS_HEURFREQ = _amplpy_xpress_swig.XPRS_HEURFREQ
XPRS_HEURDEPTH = _amplpy_xpress_swig.XPRS_HEURDEPTH
XPRS_HEURMAXSOL = _amplpy_xpress_swig.XPRS_HEURMAXSOL
XPRS_HEURNODES = _amplpy_xpress_swig.XPRS_HEURNODES
XPRS_LNPBEST = _amplpy_xpress_swig.XPRS_LNPBEST
XPRS_LNPITERLIMIT = _amplpy_xpress_swig.XPRS_LNPITERLIMIT
XPRS_BRANCHCHOICE = _amplpy_xpress_swig.XPRS_BRANCHCHOICE
XPRS_BARREGULARIZE = _amplpy_xpress_swig.XPRS_BARREGULARIZE
XPRS_SBSELECT = _amplpy_xpress_swig.XPRS_SBSELECT
XPRS_IISLOG = _amplpy_xpress_swig.XPRS_IISLOG
XPRS_LOCALCHOICE = _amplpy_xpress_swig.XPRS_LOCALCHOICE
XPRS_LOCALBACKTRACK = _amplpy_xpress_swig.XPRS_LOCALBACKTRACK
XPRS_DUALSTRATEGY = _amplpy_xpress_swig.XPRS_DUALSTRATEGY
XPRS_HEURDIVESTRATEGY = _amplpy_xpress_swig.XPRS_HEURDIVESTRATEGY
XPRS_HEURSELECT = _amplpy_xpress_swig.XPRS_HEURSELECT
XPRS_BARSTART = _amplpy_xpress_swig.XPRS_BARSTART
XPRS_PRESOLVEPASSES = _amplpy_xpress_swig.XPRS_PRESOLVEPASSES
XPRS_BARNUMSTABILITY = _amplpy_xpress_swig.XPRS_BARNUMSTABILITY
XPRS_BARORDERTHREADS = _amplpy_xpress_swig.XPRS_BARORDERTHREADS
XPRS_EXTRASETS = _amplpy_xpress_swig.XPRS_EXTRASETS
XPRS_FEASIBILITYPUMP = _amplpy_xpress_swig.XPRS_FEASIBILITYPUMP
XPRS_PRECOEFELIM = _amplpy_xpress_swig.XPRS_PRECOEFELIM
XPRS_PREDOMCOL = _amplpy_xpress_swig.XPRS_PREDOMCOL
XPRS_HEURSEARCHFREQ = _amplpy_xpress_swig.XPRS_HEURSEARCHFREQ
XPRS_HEURDIVESPEEDUP = _amplpy_xpress_swig.XPRS_HEURDIVESPEEDUP
XPRS_SBESTIMATE = _amplpy_xpress_swig.XPRS_SBESTIMATE
XPRS_BARCORES = _amplpy_xpress_swig.XPRS_BARCORES
XPRS_MAXCHECKSONMAXTIME = _amplpy_xpress_swig.XPRS_MAXCHECKSONMAXTIME
XPRS_MAXCHECKSONMAXCUTTIME = _amplpy_xpress_swig.XPRS_MAXCHECKSONMAXCUTTIME
XPRS_HISTORYCOSTS = _amplpy_xpress_swig.XPRS_HISTORYCOSTS
XPRS_ALGAFTERCROSSOVER = _amplpy_xpress_swig.XPRS_ALGAFTERCROSSOVER
XPRS_MUTEXCALLBACKS = _amplpy_xpress_swig.XPRS_MUTEXCALLBACKS
XPRS_BARCRASH = _amplpy_xpress_swig.XPRS_BARCRASH
XPRS_HEURDIVESOFTROUNDING = _amplpy_xpress_swig.XPRS_HEURDIVESOFTROUNDING
XPRS_HEURSEARCHROOTSELECT = _amplpy_xpress_swig.XPRS_HEURSEARCHROOTSELECT
XPRS_HEURSEARCHTREESELECT = _amplpy_xpress_swig.XPRS_HEURSEARCHTREESELECT
XPRS_MPS18COMPATIBLE = _amplpy_xpress_swig.XPRS_MPS18COMPATIBLE
XPRS_ROOTPRESOLVE = _amplpy_xpress_swig.XPRS_ROOTPRESOLVE
XPRS_CROSSOVERDRP = _amplpy_xpress_swig.XPRS_CROSSOVERDRP
XPRS_FORCEOUTPUT = _amplpy_xpress_swig.XPRS_FORCEOUTPUT
XPRS_PRIMALOPS = _amplpy_xpress_swig.XPRS_PRIMALOPS
XPRS_DETERMINISTIC = _amplpy_xpress_swig.XPRS_DETERMINISTIC
XPRS_PREPROBING = _amplpy_xpress_swig.XPRS_PREPROBING
XPRS_TREEMEMORYLIMIT = _amplpy_xpress_swig.XPRS_TREEMEMORYLIMIT
XPRS_TREECOMPRESSION = _amplpy_xpress_swig.XPRS_TREECOMPRESSION
XPRS_TREEDIAGNOSTICS = _amplpy_xpress_swig.XPRS_TREEDIAGNOSTICS
XPRS_MAXTREEFILESIZE = _amplpy_xpress_swig.XPRS_MAXTREEFILESIZE
XPRS_PRECLIQUESTRATEGY = _amplpy_xpress_swig.XPRS_PRECLIQUESTRATEGY
XPRS_IFCHECKCONVEXITY = _amplpy_xpress_swig.XPRS_IFCHECKCONVEXITY
XPRS_PRIMALUNSHIFT = _amplpy_xpress_swig.XPRS_PRIMALUNSHIFT
XPRS_REPAIRINDEFINITEQ = _amplpy_xpress_swig.XPRS_REPAIRINDEFINITEQ
XPRS_MIPRAMPUP = _amplpy_xpress_swig.XPRS_MIPRAMPUP
XPRS_MAXLOCALBACKTRACK = _amplpy_xpress_swig.XPRS_MAXLOCALBACKTRACK
XPRS_USERSOLHEURISTIC = _amplpy_xpress_swig.XPRS_USERSOLHEURISTIC
XPRS_PRECONVERTOBJTOCONS = _amplpy_xpress_swig.XPRS_PRECONVERTOBJTOCONS
XPRS_FORCEPARALLELDUAL = _amplpy_xpress_swig.XPRS_FORCEPARALLELDUAL
XPRS_BACKTRACKTIE = _amplpy_xpress_swig.XPRS_BACKTRACKTIE
XPRS_BRANCHDISJ = _amplpy_xpress_swig.XPRS_BRANCHDISJ
XPRS_MIPFRACREDUCE = _amplpy_xpress_swig.XPRS_MIPFRACREDUCE
XPRS_CONCURRENTTHREADS = _amplpy_xpress_swig.XPRS_CONCURRENTTHREADS
XPRS_MAXSCALEFACTOR = _amplpy_xpress_swig.XPRS_MAXSCALEFACTOR
XPRS_HEURTHREADS = _amplpy_xpress_swig.XPRS_HEURTHREADS
XPRS_THREADS = _amplpy_xpress_swig.XPRS_THREADS
XPRS_HEURBEFORELP = _amplpy_xpress_swig.XPRS_HEURBEFORELP
XPRS_PREDOMROW = _amplpy_xpress_swig.XPRS_PREDOMROW
XPRS_BRANCHSTRUCTURAL = _amplpy_xpress_swig.XPRS_BRANCHSTRUCTURAL
XPRS_QUADRATICUNSHIFT = _amplpy_xpress_swig.XPRS_QUADRATICUNSHIFT
XPRS_BARPRESOLVEOPS = _amplpy_xpress_swig.XPRS_BARPRESOLVEOPS
XPRS_QSIMPLEXOPS = _amplpy_xpress_swig.XPRS_QSIMPLEXOPS
XPRS_MIPRESTART = _amplpy_xpress_swig.XPRS_MIPRESTART
XPRS_CONFLICTCUTS = _amplpy_xpress_swig.XPRS_CONFLICTCUTS
XPRS_PREPROTECTDUAL = _amplpy_xpress_swig.XPRS_PREPROTECTDUAL
XPRS_CORESPERCPU = _amplpy_xpress_swig.XPRS_CORESPERCPU
XPRS_RESOURCESTRATEGY = _amplpy_xpress_swig.XPRS_RESOURCESTRATEGY
XPRS_CLAMPING = _amplpy_xpress_swig.XPRS_CLAMPING
XPRS_SLEEPONTHREADWAIT = _amplpy_xpress_swig.XPRS_SLEEPONTHREADWAIT
XPRS_PREDUPROW = _amplpy_xpress_swig.XPRS_PREDUPROW
XPRS_CPUPLATFORM = _amplpy_xpress_swig.XPRS_CPUPLATFORM
XPRS_BARALG = _amplpy_xpress_swig.XPRS_BARALG
XPRS_SIFTING = _amplpy_xpress_swig.XPRS_SIFTING
XPRS_LPLOGSTYLE = _amplpy_xpress_swig.XPRS_LPLOGSTYLE
XPRS_RANDOMSEED = _amplpy_xpress_swig.XPRS_RANDOMSEED
XPRS_TREEQCCUTS = _amplpy_xpress_swig.XPRS_TREEQCCUTS
XPRS_PRELINDEP = _amplpy_xpress_swig.XPRS_PRELINDEP
XPRS_DUALTHREADS = _amplpy_xpress_swig.XPRS_DUALTHREADS
XPRS_PREOBJCUTDETECT = _amplpy_xpress_swig.XPRS_PREOBJCUTDETECT
XPRS_PREBNDREDQUAD = _amplpy_xpress_swig.XPRS_PREBNDREDQUAD
XPRS_PREBNDREDCONE = _amplpy_xpress_swig.XPRS_PREBNDREDCONE
XPRS_PRECOMPONENTS = _amplpy_xpress_swig.XPRS_PRECOMPONENTS
XPRS_MAXMIPTASKS = _amplpy_xpress_swig.XPRS_MAXMIPTASKS
XPRS_MIPTERMINATIONMETHOD = _amplpy_xpress_swig.XPRS_MIPTERMINATIONMETHOD
XPRS_PRECONEDECOMP = _amplpy_xpress_swig.XPRS_PRECONEDECOMP
XPRS_HEURFORCESPECIALOBJ = _amplpy_xpress_swig.XPRS_HEURFORCESPECIALOBJ
XPRS_HEURSEARCHROOTCUTFREQ = _amplpy_xpress_swig.XPRS_HEURSEARCHROOTCUTFREQ
XPRS_PREELIMQUAD = _amplpy_xpress_swig.XPRS_PREELIMQUAD
XPRS_PREIMPLICATIONS = _amplpy_xpress_swig.XPRS_PREIMPLICATIONS
XPRS_TUNERMODE = _amplpy_xpress_swig.XPRS_TUNERMODE
XPRS_TUNERMETHOD = _amplpy_xpress_swig.XPRS_TUNERMETHOD
XPRS_TUNERTARGET = _amplpy_xpress_swig.XPRS_TUNERTARGET
XPRS_TUNERTHREADS = _amplpy_xpress_swig.XPRS_TUNERTHREADS
XPRS_TUNERHISTORY = _amplpy_xpress_swig.XPRS_TUNERHISTORY
XPRS_TUNERPERMUTE = _amplpy_xpress_swig.XPRS_TUNERPERMUTE
XPRS_TUNERVERBOSE = _amplpy_xpress_swig.XPRS_TUNERVERBOSE
XPRS_TUNEROUTPUT = _amplpy_xpress_swig.XPRS_TUNEROUTPUT
XPRS_PREANALYTICCENTER = _amplpy_xpress_swig.XPRS_PREANALYTICCENTER
XPRS_NETCUTS = _amplpy_xpress_swig.XPRS_NETCUTS
XPRS_LPFLAGS = _amplpy_xpress_swig.XPRS_LPFLAGS
XPRS_MIPKAPPAFREQ = _amplpy_xpress_swig.XPRS_MIPKAPPAFREQ
XPRS_OBJSCALEFACTOR = _amplpy_xpress_swig.XPRS_OBJSCALEFACTOR
XPRS_TREEFILELOGINTERVAL = _amplpy_xpress_swig.XPRS_TREEFILELOGINTERVAL
XPRS_IGNORECONTAINERCPULIMIT = _amplpy_xpress_swig.XPRS_IGNORECONTAINERCPULIMIT
XPRS_IGNORECONTAINERMEMORYLIMIT = _amplpy_xpress_swig.XPRS_IGNORECONTAINERMEMORYLIMIT
XPRS_MIPDUALREDUCTIONS = _amplpy_xpress_swig.XPRS_MIPDUALREDUCTIONS
XPRS_GENCONSDUALREDUCTIONS = _amplpy_xpress_swig.XPRS_GENCONSDUALREDUCTIONS
XPRS_PWLDUALREDUCTIONS = _amplpy_xpress_swig.XPRS_PWLDUALREDUCTIONS
XPRS_BARFAILITERLIMIT = _amplpy_xpress_swig.XPRS_BARFAILITERLIMIT
XPRS_AUTOSCALING = _amplpy_xpress_swig.XPRS_AUTOSCALING
XPRS_GENCONSABSTRANSFORMATION = _amplpy_xpress_swig.XPRS_GENCONSABSTRANSFORMATION
XPRS_COMPUTEJOBPRIORITY = _amplpy_xpress_swig.XPRS_COMPUTEJOBPRIORITY
XPRS_PREFOLDING = _amplpy_xpress_swig.XPRS_PREFOLDING
XPRS_COMPUTE = _amplpy_xpress_swig.XPRS_COMPUTE
XPRS_NETSTALLLIMIT = _amplpy_xpress_swig.XPRS_NETSTALLLIMIT
XPRS_SERIALIZEPREINTSOL = _amplpy_xpress_swig.XPRS_SERIALIZEPREINTSOL
XPRS_NUMERICALEMPHASIS = _amplpy_xpress_swig.XPRS_NUMERICALEMPHASIS
XPRS_PWLNONCONVEXTRANSFORMATION = _amplpy_xpress_swig.XPRS_PWLNONCONVEXTRANSFORMATION
XPRS_MIPCOMPONENTS = _amplpy_xpress_swig.XPRS_MIPCOMPONENTS
XPRS_MIPCONCURRENTNODES = _amplpy_xpress_swig.XPRS_MIPCONCURRENTNODES
XPRS_MIPCONCURRENTSOLVES = _amplpy_xpress_swig.XPRS_MIPCONCURRENTSOLVES
XPRS_OUTPUTCONTROLS = _amplpy_xpress_swig.XPRS_OUTPUTCONTROLS
XPRS_SIFTSWITCH = _amplpy_xpress_swig.XPRS_SIFTSWITCH
XPRS_HEUREMPHASIS = _amplpy_xpress_swig.XPRS_HEUREMPHASIS
XPRS_BARREFITER = _amplpy_xpress_swig.XPRS_BARREFITER
XPRS_COMPUTELOG = _amplpy_xpress_swig.XPRS_COMPUTELOG
XPRS_SIFTPRESOLVEOPS = _amplpy_xpress_swig.XPRS_SIFTPRESOLVEOPS
XPRS_CHECKINPUTDATA = _amplpy_xpress_swig.XPRS_CHECKINPUTDATA
XPRS_ESCAPENAMES = _amplpy_xpress_swig.XPRS_ESCAPENAMES
XPRS_IOTIMEOUT = _amplpy_xpress_swig.XPRS_IOTIMEOUT
XPRS_AUTOCUTTING = _amplpy_xpress_swig.XPRS_AUTOCUTTING
XPRS_CALLBACKCHECKTIMEDELAY = _amplpy_xpress_swig.XPRS_CALLBACKCHECKTIMEDELAY
XPRS_MULTIOBJOPS = _amplpy_xpress_swig.XPRS_MULTIOBJOPS
XPRS_MULTIOBJLOG = _amplpy_xpress_swig.XPRS_MULTIOBJLOG
XPRS_BACKGROUNDMAXTHREADS = _amplpy_xpress_swig.XPRS_BACKGROUNDMAXTHREADS
XPRS_GLOBALSPATIALBRANCHIFPREFERORIG = _amplpy_xpress_swig.XPRS_GLOBALSPATIALBRANCHIFPREFERORIG
XPRS_PRECONFIGURATION = _amplpy_xpress_swig.XPRS_PRECONFIGURATION
XPRS_FEASIBILITYJUMP = _amplpy_xpress_swig.XPRS_FEASIBILITYJUMP
XPRS_IISOPS = _amplpy_xpress_swig.XPRS_IISOPS
XPRS_RLTCUTS = _amplpy_xpress_swig.XPRS_RLTCUTS
XPRS_ALTERNATIVEREDCOSTS = _amplpy_xpress_swig.XPRS_ALTERNATIVEREDCOSTS
XPRS_HEURSHIFTPROP = _amplpy_xpress_swig.XPRS_HEURSHIFTPROP
XPRS_EXTRAELEMS = _amplpy_xpress_swig.XPRS_EXTRAELEMS
XPRS_EXTRASETELEMS = _amplpy_xpress_swig.XPRS_EXTRASETELEMS
XPRS_BACKGROUNDSELECT = _amplpy_xpress_swig.XPRS_BACKGROUNDSELECT
XPRS_HEURSEARCHBACKGROUNDSELECT = _amplpy_xpress_swig.XPRS_HEURSEARCHBACKGROUNDSELECT
XPRS_MATRIXNAME = _amplpy_xpress_swig.XPRS_MATRIXNAME
XPRS_BOUNDNAME = _amplpy_xpress_swig.XPRS_BOUNDNAME
XPRS_RHSNAME = _amplpy_xpress_swig.XPRS_RHSNAME
XPRS_RANGENAME = _amplpy_xpress_swig.XPRS_RANGENAME
XPRS_XPRESSVERSION = _amplpy_xpress_swig.XPRS_XPRESSVERSION
XPRS_UUID = _amplpy_xpress_swig.XPRS_UUID
XPRS_MIPSOLTIME = _amplpy_xpress_swig.XPRS_MIPSOLTIME
XPRS_TIME = _amplpy_xpress_swig.XPRS_TIME
XPRS_LPOBJVAL = _amplpy_xpress_swig.XPRS_LPOBJVAL
XPRS_SUMPRIMALINF = _amplpy_xpress_swig.XPRS_SUMPRIMALINF
XPRS_MIPOBJVAL = _amplpy_xpress_swig.XPRS_MIPOBJVAL
XPRS_BESTBOUND = _amplpy_xpress_swig.XPRS_BESTBOUND
XPRS_OBJRHS = _amplpy_xpress_swig.XPRS_OBJRHS
XPRS_MIPBESTOBJVAL = _amplpy_xpress_swig.XPRS_MIPBESTOBJVAL
XPRS_OBJSENSE = _amplpy_xpress_swig.XPRS_OBJSENSE
XPRS_BRANCHVALUE = _amplpy_xpress_swig.XPRS_BRANCHVALUE
XPRS_PENALTYVALUE = _amplpy_xpress_swig.XPRS_PENALTYVALUE
XPRS_CURRMIPCUTOFF = _amplpy_xpress_swig.XPRS_CURRMIPCUTOFF
XPRS_BARCONDA = _amplpy_xpress_swig.XPRS_BARCONDA
XPRS_BARCONDD = _amplpy_xpress_swig.XPRS_BARCONDD
XPRS_MAXABSPRIMALINFEAS = _amplpy_xpress_swig.XPRS_MAXABSPRIMALINFEAS
XPRS_MAXRELPRIMALINFEAS = _amplpy_xpress_swig.XPRS_MAXRELPRIMALINFEAS
XPRS_MAXABSDUALINFEAS = _amplpy_xpress_swig.XPRS_MAXABSDUALINFEAS
XPRS_MAXRELDUALINFEAS = _amplpy_xpress_swig.XPRS_MAXRELDUALINFEAS
XPRS_PRIMALDUALINTEGRAL = _amplpy_xpress_swig.XPRS_PRIMALDUALINTEGRAL
XPRS_MAXMIPINFEAS = _amplpy_xpress_swig.XPRS_MAXMIPINFEAS
XPRS_ATTENTIONLEVEL = _amplpy_xpress_swig.XPRS_ATTENTIONLEVEL
XPRS_MAXKAPPA = _amplpy_xpress_swig.XPRS_MAXKAPPA
XPRS_TREECOMPLETION = _amplpy_xpress_swig.XPRS_TREECOMPLETION
XPRS_PREDICTEDATTLEVEL = _amplpy_xpress_swig.XPRS_PREDICTEDATTLEVEL
XPRS_OBSERVEDPRIMALINTEGRAL = _amplpy_xpress_swig.XPRS_OBSERVEDPRIMALINTEGRAL
XPRS_CPISCALEFACTOR = _amplpy_xpress_swig.XPRS_CPISCALEFACTOR
XPRS_OBJVAL = _amplpy_xpress_swig.XPRS_OBJVAL
XPRS_BARPRIMALOBJ = _amplpy_xpress_swig.XPRS_BARPRIMALOBJ
XPRS_BARDUALOBJ = _amplpy_xpress_swig.XPRS_BARDUALOBJ
XPRS_BARPRIMALINF = _amplpy_xpress_swig.XPRS_BARPRIMALINF
XPRS_BARDUALINF = _amplpy_xpress_swig.XPRS_BARDUALINF
XPRS_BARCGAP = _amplpy_xpress_swig.XPRS_BARCGAP
XPRS_ROWS = _amplpy_xpress_swig.XPRS_ROWS
XPRS_SETS = _amplpy_xpress_swig.XPRS_SETS
XPRS_PRIMALINFEAS = _amplpy_xpress_swig.XPRS_PRIMALINFEAS
XPRS_DUALINFEAS = _amplpy_xpress_swig.XPRS_DUALINFEAS
XPRS_SIMPLEXITER = _amplpy_xpress_swig.XPRS_SIMPLEXITER
XPRS_LPSTATUS = _amplpy_xpress_swig.XPRS_LPSTATUS
XPRS_MIPSTATUS = _amplpy_xpress_swig.XPRS_MIPSTATUS
XPRS_CUTS = _amplpy_xpress_swig.XPRS_CUTS
XPRS_NODES = _amplpy_xpress_swig.XPRS_NODES
XPRS_NODEDEPTH = _amplpy_xpress_swig.XPRS_NODEDEPTH
XPRS_ACTIVENODES = _amplpy_xpress_swig.XPRS_ACTIVENODES
XPRS_MIPSOLNODE = _amplpy_xpress_swig.XPRS_MIPSOLNODE
XPRS_MIPSOLS = _amplpy_xpress_swig.XPRS_MIPSOLS
XPRS_COLS = _amplpy_xpress_swig.XPRS_COLS
XPRS_SPAREROWS = _amplpy_xpress_swig.XPRS_SPAREROWS
XPRS_SPARECOLS = _amplpy_xpress_swig.XPRS_SPARECOLS
XPRS_SPAREMIPENTS = _amplpy_xpress_swig.XPRS_SPAREMIPENTS
XPRS_ERRORCODE = _amplpy_xpress_swig.XPRS_ERRORCODE
XPRS_MIPINFEAS = _amplpy_xpress_swig.XPRS_MIPINFEAS
XPRS_PRESOLVESTATE = _amplpy_xpress_swig.XPRS_PRESOLVESTATE
XPRS_PARENTNODE = _amplpy_xpress_swig.XPRS_PARENTNODE
XPRS_NAMELENGTH = _amplpy_xpress_swig.XPRS_NAMELENGTH
XPRS_QELEMS = _amplpy_xpress_swig.XPRS_QELEMS
XPRS_NUMIIS = _amplpy_xpress_swig.XPRS_NUMIIS
XPRS_MIPENTS = _amplpy_xpress_swig.XPRS_MIPENTS
XPRS_BRANCHVAR = _amplpy_xpress_swig.XPRS_BRANCHVAR
XPRS_MIPTHREADID = _amplpy_xpress_swig.XPRS_MIPTHREADID
XPRS_ALGORITHM = _amplpy_xpress_swig.XPRS_ALGORITHM
XPRS_SOLSTATUS = _amplpy_xpress_swig.XPRS_SOLSTATUS
XPRS_ORIGINALROWS = _amplpy_xpress_swig.XPRS_ORIGINALROWS
XPRS_CALLBACKCOUNT_OPTNODE = _amplpy_xpress_swig.XPRS_CALLBACKCOUNT_OPTNODE
XPRS_CALLBACKCOUNT_CUTMGR = _amplpy_xpress_swig.XPRS_CALLBACKCOUNT_CUTMGR
XPRS_ORIGINALQELEMS = _amplpy_xpress_swig.XPRS_ORIGINALQELEMS
XPRS_MAXPROBNAMELENGTH = _amplpy_xpress_swig.XPRS_MAXPROBNAMELENGTH
XPRS_STOPSTATUS = _amplpy_xpress_swig.XPRS_STOPSTATUS
XPRS_ORIGINALMIPENTS = _amplpy_xpress_swig.XPRS_ORIGINALMIPENTS
XPRS_ORIGINALSETS = _amplpy_xpress_swig.XPRS_ORIGINALSETS
XPRS_SPARESETS = _amplpy_xpress_swig.XPRS_SPARESETS
XPRS_CHECKSONMAXTIME = _amplpy_xpress_swig.XPRS_CHECKSONMAXTIME
XPRS_CHECKSONMAXCUTTIME = _amplpy_xpress_swig.XPRS_CHECKSONMAXCUTTIME
XPRS_ORIGINALCOLS = _amplpy_xpress_swig.XPRS_ORIGINALCOLS
XPRS_QCELEMS = _amplpy_xpress_swig.XPRS_QCELEMS
XPRS_QCONSTRAINTS = _amplpy_xpress_swig.XPRS_QCONSTRAINTS
XPRS_ORIGINALQCELEMS = _amplpy_xpress_swig.XPRS_ORIGINALQCELEMS
XPRS_ORIGINALQCONSTRAINTS = _amplpy_xpress_swig.XPRS_ORIGINALQCONSTRAINTS
XPRS_PEAKTOTALTREEMEMORYUSAGE = _amplpy_xpress_swig.XPRS_PEAKTOTALTREEMEMORYUSAGE
XPRS_CURRENTNODE = _amplpy_xpress_swig.XPRS_CURRENTNODE
XPRS_TREEMEMORYUSAGE = _amplpy_xpress_swig.XPRS_TREEMEMORYUSAGE
XPRS_TREEFILESIZE = _amplpy_xpress_swig.XPRS_TREEFILESIZE
XPRS_TREEFILEUSAGE = _amplpy_xpress_swig.XPRS_TREEFILEUSAGE
XPRS_INDICATORS = _amplpy_xpress_swig.XPRS_INDICATORS
XPRS_ORIGINALINDICATORS = _amplpy_xpress_swig.XPRS_ORIGINALINDICATORS
XPRS_CORESPERCPUDETECTED = _amplpy_xpress_swig.XPRS_CORESPERCPUDETECTED
XPRS_CPUSDETECTED = _amplpy_xpress_swig.XPRS_CPUSDETECTED
XPRS_CORESDETECTED = _amplpy_xpress_swig.XPRS_CORESDETECTED
XPRS_PHYSICALCORESDETECTED = _amplpy_xpress_swig.XPRS_PHYSICALCORESDETECTED
XPRS_PHYSICALCORESPERCPUDETECTED = _amplpy_xpress_swig.XPRS_PHYSICALCORESPERCPUDETECTED
XPRS_OPTIMIZETYPEUSED = _amplpy_xpress_swig.XPRS_OPTIMIZETYPEUSED
XPRS_BARSING = _amplpy_xpress_swig.XPRS_BARSING
XPRS_BARSINGR = _amplpy_xpress_swig.XPRS_BARSINGR
XPRS_PRESOLVEINDEX = _amplpy_xpress_swig.XPRS_PRESOLVEINDEX
XPRS_CONES = _amplpy_xpress_swig.XPRS_CONES
XPRS_CONEELEMS = _amplpy_xpress_swig.XPRS_CONEELEMS
XPRS_PWLCONS = _amplpy_xpress_swig.XPRS_PWLCONS
XPRS_GENCONS = _amplpy_xpress_swig.XPRS_GENCONS
XPRS_TREERESTARTS = _amplpy_xpress_swig.XPRS_TREERESTARTS
XPRS_ORIGINALPWLS = _amplpy_xpress_swig.XPRS_ORIGINALPWLS
XPRS_ORIGINALGENCONS = _amplpy_xpress_swig.XPRS_ORIGINALGENCONS
XPRS_COMPUTEEXECUTIONS = _amplpy_xpress_swig.XPRS_COMPUTEEXECUTIONS
XPRS_RESTARTS = _amplpy_xpress_swig.XPRS_RESTARTS
XPRS_SOLVESTATUS = _amplpy_xpress_swig.XPRS_SOLVESTATUS
XPRS_GLOBALBOUNDINGBOXAPPLIED = _amplpy_xpress_swig.XPRS_GLOBALBOUNDINGBOXAPPLIED
XPRS_OBJECTIVES = _amplpy_xpress_swig.XPRS_OBJECTIVES
XPRS_SOLVEDOBJS = _amplpy_xpress_swig.XPRS_SOLVEDOBJS
XPRS_OBJSTOSOLVE = _amplpy_xpress_swig.XPRS_OBJSTOSOLVE
XPRS_GLOBALNLPINFEAS = _amplpy_xpress_swig.XPRS_GLOBALNLPINFEAS
XPRS_IISSOLSTATUS = _amplpy_xpress_swig.XPRS_IISSOLSTATUS
XPRS_BARITER = _amplpy_xpress_swig.XPRS_BARITER
XPRS_BARDENSECOL = _amplpy_xpress_swig.XPRS_BARDENSECOL
XPRS_BARCROSSOVER = _amplpy_xpress_swig.XPRS_BARCROSSOVER
XPRS_IIS = _amplpy_xpress_swig.XPRS_IIS
XPRS_SETMEMBERS = _amplpy_xpress_swig.XPRS_SETMEMBERS
XPRS_ELEMS = _amplpy_xpress_swig.XPRS_ELEMS
XPRS_SPAREELEMS = _amplpy_xpress_swig.XPRS_SPAREELEMS
XPRS_SYSTEMMEMORY = _amplpy_xpress_swig.XPRS_SYSTEMMEMORY
XPRS_ORIGINALSETMEMBERS = _amplpy_xpress_swig.XPRS_ORIGINALSETMEMBERS
XPRS_SPARESETELEMS = _amplpy_xpress_swig.XPRS_SPARESETELEMS
XPRS_CURRENTMEMORY = _amplpy_xpress_swig.XPRS_CURRENTMEMORY
XPRS_PEAKMEMORY = _amplpy_xpress_swig.XPRS_PEAKMEMORY
XPRS_TOTALMEMORY = _amplpy_xpress_swig.XPRS_TOTALMEMORY
XPRS_AVAILABLEMEMORY = _amplpy_xpress_swig.XPRS_AVAILABLEMEMORY
XPRS_PWLPOINTS = _amplpy_xpress_swig.XPRS_PWLPOINTS
XPRS_GENCONCOLS = _amplpy_xpress_swig.XPRS_GENCONCOLS
XPRS_GENCONVALS = _amplpy_xpress_swig.XPRS_GENCONVALS
XPRS_ORIGINALPWLPOINTS = _amplpy_xpress_swig.XPRS_ORIGINALPWLPOINTS
XPRS_ORIGINALGENCONCOLS = _amplpy_xpress_swig.XPRS_ORIGINALGENCONCOLS
XPRS_ORIGINALGENCONVALS = _amplpy_xpress_swig.XPRS_ORIGINALGENCONVALS
XPRS_MEMORYLIMITDETECTED = _amplpy_xpress_swig.XPRS_MEMORYLIMITDETECTED
XPRS_BARAASIZE = _amplpy_xpress_swig.XPRS_BARAASIZE
XPRS_BARLSIZE = _amplpy_xpress_swig.XPRS_BARLSIZE
XPRS_MSP_DEFAULTUSERSOLFEASTOL = _amplpy_xpress_swig.XPRS_MSP_DEFAULTUSERSOLFEASTOL
XPRS_MSP_DEFAULTUSERSOLMIPTOL = _amplpy_xpress_swig.XPRS_MSP_DEFAULTUSERSOLMIPTOL
XPRS_MSP_SOL_FEASTOL = _amplpy_xpress_swig.XPRS_MSP_SOL_FEASTOL
XPRS_MSP_SOL_MIPTOL = _amplpy_xpress_swig.XPRS_MSP_SOL_MIPTOL
XPRS_MSP_DUPLICATESOLUTIONSPOLICY = _amplpy_xpress_swig.XPRS_MSP_DUPLICATESOLUTIONSPOLICY
XPRS_MSP_INCLUDEPROBNAMEINLOGGING = _amplpy_xpress_swig.XPRS_MSP_INCLUDEPROBNAMEINLOGGING
XPRS_MSP_WRITESLXSOLLOGGING = _amplpy_xpress_swig.XPRS_MSP_WRITESLXSOLLOGGING
XPRS_MSP_ENABLESLACKSTORAGE = _amplpy_xpress_swig.XPRS_MSP_ENABLESLACKSTORAGE
XPRS_MSP_OUTPUTLOG = _amplpy_xpress_swig.XPRS_MSP_OUTPUTLOG
XPRS_MSP_SOL_BITFIELDSUSR = _amplpy_xpress_swig.XPRS_MSP_SOL_BITFIELDSUSR
XPRS_MSP_SOLPRB_OBJ = _amplpy_xpress_swig.XPRS_MSP_SOLPRB_OBJ
XPRS_MSP_SOLPRB_INFSUM_PRIMAL = _amplpy_xpress_swig.XPRS_MSP_SOLPRB_INFSUM_PRIMAL
XPRS_MSP_SOLPRB_INFSUM_MIP = _amplpy_xpress_swig.XPRS_MSP_SOLPRB_INFSUM_MIP
XPRS_MSP_SOLUTIONS = _amplpy_xpress_swig.XPRS_MSP_SOLUTIONS
XPRS_MSP_PRB_VALIDSOLS = _amplpy_xpress_swig.XPRS_MSP_PRB_VALIDSOLS
XPRS_MSP_PRB_FEASIBLESOLS = _amplpy_xpress_swig.XPRS_MSP_PRB_FEASIBLESOLS
XPRS_MSP_SOL_COLS = _amplpy_xpress_swig.XPRS_MSP_SOL_COLS
XPRS_MSP_SOL_NONZEROS = _amplpy_xpress_swig.XPRS_MSP_SOL_NONZEROS
XPRS_MSP_SOL_ISUSERSOLUTION = _amplpy_xpress_swig.XPRS_MSP_SOL_ISUSERSOLUTION
XPRS_MSP_SOL_ISREPROCESSEDUSERSOLUTION = _amplpy_xpress_swig.XPRS_MSP_SOL_ISREPROCESSEDUSERSOLUTION
XPRS_MSP_SOL_BITFIELDSSYS = _amplpy_xpress_swig.XPRS_MSP_SOL_BITFIELDSSYS
XPRS_MSP_SOLPRB_INFEASCOUNT = _amplpy_xpress_swig.XPRS_MSP_SOLPRB_INFEASCOUNT
XPRS_MSP_SOLPRB_INFCNT_PRIMAL = _amplpy_xpress_swig.XPRS_MSP_SOLPRB_INFCNT_PRIMAL
XPRS_MSP_SOLPRB_INFCNT_MIP = _amplpy_xpress_swig.XPRS_MSP_SOLPRB_INFCNT_MIP
XPRS_MSE_OUTPUTTOL = _amplpy_xpress_swig.XPRS_MSE_OUTPUTTOL
XPRS_MSE_CALLBACKCULLSOLS_MIPOBJECT = _amplpy_xpress_swig.XPRS_MSE_CALLBACKCULLSOLS_MIPOBJECT
XPRS_MSE_CALLBACKCULLSOLS_DIVERSITY = _amplpy_xpress_swig.XPRS_MSE_CALLBACKCULLSOLS_DIVERSITY
XPRS_MSE_CALLBACKCULLSOLS_MODOBJECT = _amplpy_xpress_swig.XPRS_MSE_CALLBACKCULLSOLS_MODOBJECT
XPRS_MSE_OPTIMIZEDIVERSITY = _amplpy_xpress_swig.XPRS_MSE_OPTIMIZEDIVERSITY
XPRS_MSE_OUTPUTLOG = _amplpy_xpress_swig.XPRS_MSE_OUTPUTLOG
XPRS_MSE_DIVERSITYSUM = _amplpy_xpress_swig.XPRS_MSE_DIVERSITYSUM
XPRS_MSE_SOLUTIONS = _amplpy_xpress_swig.XPRS_MSE_SOLUTIONS
XPRS_MSE_METRIC_MIPOBJECT = _amplpy_xpress_swig.XPRS_MSE_METRIC_MIPOBJECT
XPRS_MSE_METRIC_DIVERSITY = _amplpy_xpress_swig.XPRS_MSE_METRIC_DIVERSITY
XPRS_MSE_METRIC_MODOBJECT = _amplpy_xpress_swig.XPRS_MSE_METRIC_MODOBJECT
XPRS_NLPFUNCEVAL = _amplpy_xpress_swig.XPRS_NLPFUNCEVAL
XPRS_NLPLOG = _amplpy_xpress_swig.XPRS_NLPLOG
XPRS_NLPKEEPEQUALSCOLUMN = _amplpy_xpress_swig.XPRS_NLPKEEPEQUALSCOLUMN
XPRS_NLPEVALUATE = _amplpy_xpress_swig.XPRS_NLPEVALUATE
XPRS_NLPPRESOLVE = _amplpy_xpress_swig.XPRS_NLPPRESOLVE
XPRS_LOCALSOLVER = _amplpy_xpress_swig.XPRS_LOCALSOLVER
XPRS_NLPSTOPOUTOFRANGE = _amplpy_xpress_swig.XPRS_NLPSTOPOUTOFRANGE
XPRS_NLPTHREADSAFEUSERFUNC = _amplpy_xpress_swig.XPRS_NLPTHREADSAFEUSERFUNC
XPRS_NLPJACOBIAN = _amplpy_xpress_swig.XPRS_NLPJACOBIAN
XPRS_NLPHESSIAN = _amplpy_xpress_swig.XPRS_NLPHESSIAN
XPRS_MULTISTART = _amplpy_xpress_swig.XPRS_MULTISTART
XPRS_MULTISTART_THREADS = _amplpy_xpress_swig.XPRS_MULTISTART_THREADS
XPRS_MULTISTART_MAXSOLVES = _amplpy_xpress_swig.XPRS_MULTISTART_MAXSOLVES
XPRS_MULTISTART_MAXTIME = _amplpy_xpress_swig.XPRS_MULTISTART_MAXTIME
XPRS_NLPMAXTIME = _amplpy_xpress_swig.XPRS_NLPMAXTIME
XPRS_NLPDERIVATIVES = _amplpy_xpress_swig.XPRS_NLPDERIVATIVES
XPRS_NLPREFORMULATE = _amplpy_xpress_swig.XPRS_NLPREFORMULATE
XPRS_NLPPRESOLVEOPS = _amplpy_xpress_swig.XPRS_NLPPRESOLVEOPS
XPRS_MULTISTART_LOG = _amplpy_xpress_swig.XPRS_MULTISTART_LOG
XPRS_MULTISTART_SEED = _amplpy_xpress_swig.XPRS_MULTISTART_SEED
XPRS_MULTISTART_POOLSIZE = _amplpy_xpress_swig.XPRS_MULTISTART_POOLSIZE
XPRS_NLPPOSTSOLVE = _amplpy_xpress_swig.XPRS_NLPPOSTSOLVE
XPRS_NLPDETERMINISTIC = _amplpy_xpress_swig.XPRS_NLPDETERMINISTIC
XPRS_NLPPRESOLVELEVEL = _amplpy_xpress_swig.XPRS_NLPPRESOLVELEVEL
XPRS_NLPPROBING = _amplpy_xpress_swig.XPRS_NLPPROBING
XPRS_NLPCALCTHREADS = _amplpy_xpress_swig.XPRS_NLPCALCTHREADS
XPRS_NLPTHREADS = _amplpy_xpress_swig.XPRS_NLPTHREADS
XPRS_NLPFINDIV = _amplpy_xpress_swig.XPRS_NLPFINDIV
XPRS_NLPLINQUADBR = _amplpy_xpress_swig.XPRS_NLPLINQUADBR
XPRS_NLPSOLVER = _amplpy_xpress_swig.XPRS_NLPSOLVER
XPRS_SLPALGORITHM = _amplpy_xpress_swig.XPRS_SLPALGORITHM
XPRS_SLPAUGMENTATION = _amplpy_xpress_swig.XPRS_SLPAUGMENTATION
XPRS_SLPBARLIMIT = _amplpy_xpress_swig.XPRS_SLPBARLIMIT
XPRS_SLPCASCADE = _amplpy_xpress_swig.XPRS_SLPCASCADE
XPRS_SLPCASCADENLIMIT = _amplpy_xpress_swig.XPRS_SLPCASCADENLIMIT
XPRS_SLPDAMPSTART = _amplpy_xpress_swig.XPRS_SLPDAMPSTART
XPRS_SLPCUTSTRATEGY = _amplpy_xpress_swig.XPRS_SLPCUTSTRATEGY
XPRS_SLPDELTAZLIMIT = _amplpy_xpress_swig.XPRS_SLPDELTAZLIMIT
XPRS_SLPINFEASLIMIT = _amplpy_xpress_swig.XPRS_SLPINFEASLIMIT
XPRS_SLPITERLIMIT = _amplpy_xpress_swig.XPRS_SLPITERLIMIT
XPRS_SLPSAMECOUNT = _amplpy_xpress_swig.XPRS_SLPSAMECOUNT
XPRS_SLPSAMEDAMP = _amplpy_xpress_swig.XPRS_SLPSAMEDAMP
XPRS_SLPSBSTART = _amplpy_xpress_swig.XPRS_SLPSBSTART
XPRS_SLPXCOUNT = _amplpy_xpress_swig.XPRS_SLPXCOUNT
XPRS_SLPXLIMIT = _amplpy_xpress_swig.XPRS_SLPXLIMIT
XPRS_SLPDELAYUPDATEROWS = _amplpy_xpress_swig.XPRS_SLPDELAYUPDATEROWS
XPRS_SLPAUTOSAVE = _amplpy_xpress_swig.XPRS_SLPAUTOSAVE
XPRS_SLPANALYZE = _amplpy_xpress_swig.XPRS_SLPANALYZE
XPRS_SLPOCOUNT = _amplpy_xpress_swig.XPRS_SLPOCOUNT
XPRS_SLPMIPALGORITHM = _amplpy_xpress_swig.XPRS_SLPMIPALGORITHM
XPRS_SLPMIPRELAXSTEPBOUNDS = _amplpy_xpress_swig.XPRS_SLPMIPRELAXSTEPBOUNDS
XPRS_SLPMIPFIXSTEPBOUNDS = _amplpy_xpress_swig.XPRS_SLPMIPFIXSTEPBOUNDS
XPRS_SLPMIPITERLIMIT = _amplpy_xpress_swig.XPRS_SLPMIPITERLIMIT
XPRS_SLPMIPCUTOFFLIMIT = _amplpy_xpress_swig.XPRS_SLPMIPCUTOFFLIMIT
XPRS_SLPMIPOCOUNT = _amplpy_xpress_swig.XPRS_SLPMIPOCOUNT
XPRS_SLPMIPDEFAULTALGORITHM = _amplpy_xpress_swig.XPRS_SLPMIPDEFAULTALGORITHM
XPRS_SLPMIPLOG = _amplpy_xpress_swig.XPRS_SLPMIPLOG
XPRS_SLPDELTAOFFSET = _amplpy_xpress_swig.XPRS_SLPDELTAOFFSET
XPRS_SLPUPDATEOFFSET = _amplpy_xpress_swig.XPRS_SLPUPDATEOFFSET
XPRS_SLPERROROFFSET = _amplpy_xpress_swig.XPRS_SLPERROROFFSET
XPRS_SLPSBROWOFFSET = _amplpy_xpress_swig.XPRS_SLPSBROWOFFSET
XPRS_SLPVCOUNT = _amplpy_xpress_swig.XPRS_SLPVCOUNT
XPRS_SLPVLIMIT = _amplpy_xpress_swig.XPRS_SLPVLIMIT
XPRS_SLPECFCHECK = _amplpy_xpress_swig.XPRS_SLPECFCHECK
XPRS_SLPMIPCUTOFFCOUNT = _amplpy_xpress_swig.XPRS_SLPMIPCUTOFFCOUNT
XPRS_SLPWCOUNT = _amplpy_xpress_swig.XPRS_SLPWCOUNT
XPRS_SLPUNFINISHEDLIMIT = _amplpy_xpress_swig.XPRS_SLPUNFINISHEDLIMIT
XPRS_SLPCONVERGENCEOPS = _amplpy_xpress_swig.XPRS_SLPCONVERGENCEOPS
XPRS_SLPZEROCRITERION = _amplpy_xpress_swig.XPRS_SLPZEROCRITERION
XPRS_SLPZEROCRITERIONSTART = _amplpy_xpress_swig.XPRS_SLPZEROCRITERIONSTART
XPRS_SLPZEROCRITERIONCOUNT = _amplpy_xpress_swig.XPRS_SLPZEROCRITERIONCOUNT
XPRS_SLPLSPATTERNLIMIT = _amplpy_xpress_swig.XPRS_SLPLSPATTERNLIMIT
XPRS_SLPLSITERLIMIT = _amplpy_xpress_swig.XPRS_SLPLSITERLIMIT
XPRS_SLPLSSTART = _amplpy_xpress_swig.XPRS_SLPLSSTART
XPRS_SLPPENALTYINFOSTART = _amplpy_xpress_swig.XPRS_SLPPENALTYINFOSTART
XPRS_SLPFILTER = _amplpy_xpress_swig.XPRS_SLPFILTER
XPRS_SLPTRACEMASKOPS = _amplpy_xpress_swig.XPRS_SLPTRACEMASKOPS
XPRS_SLPLSZEROLIMIT = _amplpy_xpress_swig.XPRS_SLPLSZEROLIMIT
XPRS_SLPHEURSTRATEGY = _amplpy_xpress_swig.XPRS_SLPHEURSTRATEGY
XPRS_SLPBARCROSSOVERSTART = _amplpy_xpress_swig.XPRS_SLPBARCROSSOVERSTART
XPRS_SLPBARSTALLINGLIMIT = _amplpy_xpress_swig.XPRS_SLPBARSTALLINGLIMIT
XPRS_SLPBARSTALLINGOBJLIMIT = _amplpy_xpress_swig.XPRS_SLPBARSTALLINGOBJLIMIT
XPRS_SLPBARSTARTOPS = _amplpy_xpress_swig.XPRS_SLPBARSTARTOPS
XPRS_SLPGRIDHEURSELECT = _amplpy_xpress_swig.XPRS_SLPGRIDHEURSELECT
XPRS_NLPINFINITY = _amplpy_xpress_swig.XPRS_NLPINFINITY
XPRS_NLPZERO = _amplpy_xpress_swig.XPRS_NLPZERO
XPRS_NLPDEFAULTIV = _amplpy_xpress_swig.XPRS_NLPDEFAULTIV
XPRS_NLPOPTTIME = _amplpy_xpress_swig.XPRS_NLPOPTTIME
XPRS_NLPVALIDATIONTOL_A = _amplpy_xpress_swig.XPRS_NLPVALIDATIONTOL_A
XPRS_NLPVALIDATIONTOL_R = _amplpy_xpress_swig.XPRS_NLPVALIDATIONTOL_R
XPRS_NLPVALIDATIONINDEX_A = _amplpy_xpress_swig.XPRS_NLPVALIDATIONINDEX_A
XPRS_NLPVALIDATIONINDEX_R = _amplpy_xpress_swig.XPRS_NLPVALIDATIONINDEX_R
XPRS_NLPPRIMALINTEGRALREF = _amplpy_xpress_swig.XPRS_NLPPRIMALINTEGRALREF
XPRS_NLPPRIMALINTEGRALALPHA = _amplpy_xpress_swig.XPRS_NLPPRIMALINTEGRALALPHA
XPRS_NLPOBJVAL = _amplpy_xpress_swig.XPRS_NLPOBJVAL
XPRS_NLPPRESOLVEZERO = _amplpy_xpress_swig.XPRS_NLPPRESOLVEZERO
XPRS_NLPMERITLAMBDA = _amplpy_xpress_swig.XPRS_NLPMERITLAMBDA
XPRS_MSMAXBOUNDRANGE = _amplpy_xpress_swig.XPRS_MSMAXBOUNDRANGE
XPRS_NLPVALIDATIONTOL_K = _amplpy_xpress_swig.XPRS_NLPVALIDATIONTOL_K
XPRS_NLPPRESOLVE_ELIMTOL = _amplpy_xpress_swig.XPRS_NLPPRESOLVE_ELIMTOL
XPRS_NLPVALIDATIONTARGET_R = _amplpy_xpress_swig.XPRS_NLPVALIDATIONTARGET_R
XPRS_NLPVALIDATIONTARGET_K = _amplpy_xpress_swig.XPRS_NLPVALIDATIONTARGET_K
XPRS_NLPVALIDATIONFACTOR = _amplpy_xpress_swig.XPRS_NLPVALIDATIONFACTOR
XPRS_SLPDAMP = _amplpy_xpress_swig.XPRS_SLPDAMP
XPRS_SLPDAMPEXPAND = _amplpy_xpress_swig.XPRS_SLPDAMPEXPAND
XPRS_SLPDAMPSHRINK = _amplpy_xpress_swig.XPRS_SLPDAMPSHRINK
XPRS_SLPDELTA_A = _amplpy_xpress_swig.XPRS_SLPDELTA_A
XPRS_SLPDELTA_R = _amplpy_xpress_swig.XPRS_SLPDELTA_R
XPRS_SLPDELTA_Z = _amplpy_xpress_swig.XPRS_SLPDELTA_Z
XPRS_SLPDELTACOST = _amplpy_xpress_swig.XPRS_SLPDELTACOST
XPRS_SLPDELTAMAXCOST = _amplpy_xpress_swig.XPRS_SLPDELTAMAXCOST
XPRS_SLPDJTOL = _amplpy_xpress_swig.XPRS_SLPDJTOL
XPRS_SLPERRORCOST = _amplpy_xpress_swig.XPRS_SLPERRORCOST
XPRS_SLPERRORMAXCOST = _amplpy_xpress_swig.XPRS_SLPERRORMAXCOST
XPRS_SLPERRORTOL_A = _amplpy_xpress_swig.XPRS_SLPERRORTOL_A
XPRS_SLPEXPAND = _amplpy_xpress_swig.XPRS_SLPEXPAND
XPRS_SLPMAXWEIGHT = _amplpy_xpress_swig.XPRS_SLPMAXWEIGHT
XPRS_SLPMINWEIGHT = _amplpy_xpress_swig.XPRS_SLPMINWEIGHT
XPRS_SLPSHRINK = _amplpy_xpress_swig.XPRS_SLPSHRINK
XPRS_SLPCTOL = _amplpy_xpress_swig.XPRS_SLPCTOL
XPRS_SLPATOL_A = _amplpy_xpress_swig.XPRS_SLPATOL_A
XPRS_SLPATOL_R = _amplpy_xpress_swig.XPRS_SLPATOL_R
XPRS_SLPMTOL_A = _amplpy_xpress_swig.XPRS_SLPMTOL_A
XPRS_SLPMTOL_R = _amplpy_xpress_swig.XPRS_SLPMTOL_R
XPRS_SLPITOL_A = _amplpy_xpress_swig.XPRS_SLPITOL_A
XPRS_SLPITOL_R = _amplpy_xpress_swig.XPRS_SLPITOL_R
XPRS_SLPSTOL_A = _amplpy_xpress_swig.XPRS_SLPSTOL_A
XPRS_SLPSTOL_R = _amplpy_xpress_swig.XPRS_SLPSTOL_R
XPRS_SLPMVTOL = _amplpy_xpress_swig.XPRS_SLPMVTOL
XPRS_SLPXTOL_A = _amplpy_xpress_swig.XPRS_SLPXTOL_A
XPRS_SLPXTOL_R = _amplpy_xpress_swig.XPRS_SLPXTOL_R
XPRS_SLPDEFAULTSTEPBOUND = _amplpy_xpress_swig.XPRS_SLPDEFAULTSTEPBOUND
XPRS_SLPDAMPMAX = _amplpy_xpress_swig.XPRS_SLPDAMPMAX
XPRS_SLPDAMPMIN = _amplpy_xpress_swig.XPRS_SLPDAMPMIN
XPRS_SLPDELTACOSTFACTOR = _amplpy_xpress_swig.XPRS_SLPDELTACOSTFACTOR
XPRS_SLPERRORCOSTFACTOR = _amplpy_xpress_swig.XPRS_SLPERRORCOSTFACTOR
XPRS_SLPERRORTOL_P = _amplpy_xpress_swig.XPRS_SLPERRORTOL_P
XPRS_SLPCASCADETOL_PA = _amplpy_xpress_swig.XPRS_SLPCASCADETOL_PA
XPRS_SLPCASCADETOL_PR = _amplpy_xpress_swig.XPRS_SLPCASCADETOL_PR
XPRS_SLPCASCADETOL_Z = _amplpy_xpress_swig.XPRS_SLPCASCADETOL_Z
XPRS_SLPOTOL_A = _amplpy_xpress_swig.XPRS_SLPOTOL_A
XPRS_SLPOTOL_R = _amplpy_xpress_swig.XPRS_SLPOTOL_R
XPRS_SLPDELTA_X = _amplpy_xpress_swig.XPRS_SLPDELTA_X
XPRS_SLPERRORCOSTS = _amplpy_xpress_swig.XPRS_SLPERRORCOSTS
XPRS_SLPGRANULARITY = _amplpy_xpress_swig.XPRS_SLPGRANULARITY
XPRS_SLPMIPCUTOFF_A = _amplpy_xpress_swig.XPRS_SLPMIPCUTOFF_A
XPRS_SLPMIPCUTOFF_R = _amplpy_xpress_swig.XPRS_SLPMIPCUTOFF_R
XPRS_SLPMIPOTOL_A = _amplpy_xpress_swig.XPRS_SLPMIPOTOL_A
XPRS_SLPMIPOTOL_R = _amplpy_xpress_swig.XPRS_SLPMIPOTOL_R
XPRS_SLPESCALATION = _amplpy_xpress_swig.XPRS_SLPESCALATION
XPRS_SLPOBJTOPENALTYCOST = _amplpy_xpress_swig.XPRS_SLPOBJTOPENALTYCOST
XPRS_SLPSHRINKBIAS = _amplpy_xpress_swig.XPRS_SLPSHRINKBIAS
XPRS_SLPFEASTOLTARGET = _amplpy_xpress_swig.XPRS_SLPFEASTOLTARGET
XPRS_SLPOPTIMALITYTOLTARGET = _amplpy_xpress_swig.XPRS_SLPOPTIMALITYTOLTARGET
XPRS_SLPDELTA_INFINITY = _amplpy_xpress_swig.XPRS_SLPDELTA_INFINITY
XPRS_SLPVTOL_A = _amplpy_xpress_swig.XPRS_SLPVTOL_A
XPRS_SLPVTOL_R = _amplpy_xpress_swig.XPRS_SLPVTOL_R
XPRS_SLPETOL_A = _amplpy_xpress_swig.XPRS_SLPETOL_A
XPRS_SLPETOL_R = _amplpy_xpress_swig.XPRS_SLPETOL_R
XPRS_SLPEVTOL_A = _amplpy_xpress_swig.XPRS_SLPEVTOL_A
XPRS_SLPEVTOL_R = _amplpy_xpress_swig.XPRS_SLPEVTOL_R
XPRS_SLPDELTA_ZERO = _amplpy_xpress_swig.XPRS_SLPDELTA_ZERO
XPRS_SLPMINSBFACTOR = _amplpy_xpress_swig.XPRS_SLPMINSBFACTOR
XPRS_SLPCLAMPVALIDATIONTOL_A = _amplpy_xpress_swig.XPRS_SLPCLAMPVALIDATIONTOL_A
XPRS_SLPCLAMPVALIDATIONTOL_R = _amplpy_xpress_swig.XPRS_SLPCLAMPVALIDATIONTOL_R
XPRS_SLPCLAMPSHRINK = _amplpy_xpress_swig.XPRS_SLPCLAMPSHRINK
XPRS_SLPECFTOL_A = _amplpy_xpress_swig.XPRS_SLPECFTOL_A
XPRS_SLPECFTOL_R = _amplpy_xpress_swig.XPRS_SLPECFTOL_R
XPRS_SLPWTOL_A = _amplpy_xpress_swig.XPRS_SLPWTOL_A
XPRS_SLPWTOL_R = _amplpy_xpress_swig.XPRS_SLPWTOL_R
XPRS_SLPMATRIXTOL = _amplpy_xpress_swig.XPRS_SLPMATRIXTOL
XPRS_SLPDRFIXRANGE = _amplpy_xpress_swig.XPRS_SLPDRFIXRANGE
XPRS_SLPDRCOLTOL = _amplpy_xpress_swig.XPRS_SLPDRCOLTOL
XPRS_SLPMIPERRORTOL_A = _amplpy_xpress_swig.XPRS_SLPMIPERRORTOL_A
XPRS_SLPMIPERRORTOL_R = _amplpy_xpress_swig.XPRS_SLPMIPERRORTOL_R
XPRS_SLPCDTOL_A = _amplpy_xpress_swig.XPRS_SLPCDTOL_A
XPRS_SLPCDTOL_R = _amplpy_xpress_swig.XPRS_SLPCDTOL_R
XPRS_SLPENFORCEMAXCOST = _amplpy_xpress_swig.XPRS_SLPENFORCEMAXCOST
XPRS_SLPENFORCECOSTSHRINK = _amplpy_xpress_swig.XPRS_SLPENFORCECOSTSHRINK
XPRS_SLPDRCOLDJTOL = _amplpy_xpress_swig.XPRS_SLPDRCOLDJTOL
XPRS_SLPBARSTALLINGTOL = _amplpy_xpress_swig.XPRS_SLPBARSTALLINGTOL
XPRS_SLPOBJTHRESHOLD = _amplpy_xpress_swig.XPRS_SLPOBJTHRESHOLD
XPRS_SLPBOUNDTHRESHOLD = _amplpy_xpress_swig.XPRS_SLPBOUNDTHRESHOLD
XPRS_NLPIVNAME = _amplpy_xpress_swig.XPRS_NLPIVNAME
XPRS_SLPDELTAFORMAT = _amplpy_xpress_swig.XPRS_SLPDELTAFORMAT
XPRS_SLPMINUSDELTAFORMAT = _amplpy_xpress_swig.XPRS_SLPMINUSDELTAFORMAT
XPRS_SLPMINUSERRORFORMAT = _amplpy_xpress_swig.XPRS_SLPMINUSERRORFORMAT
XPRS_SLPPLUSDELTAFORMAT = _amplpy_xpress_swig.XPRS_SLPPLUSDELTAFORMAT
XPRS_SLPPLUSERRORFORMAT = _amplpy_xpress_swig.XPRS_SLPPLUSERRORFORMAT
XPRS_SLPSBNAME = _amplpy_xpress_swig.XPRS_SLPSBNAME
XPRS_SLPTOLNAME = _amplpy_xpress_swig.XPRS_SLPTOLNAME
XPRS_SLPUPDATEFORMAT = _amplpy_xpress_swig.XPRS_SLPUPDATEFORMAT
XPRS_SLPPENALTYROWFORMAT = _amplpy_xpress_swig.XPRS_SLPPENALTYROWFORMAT
XPRS_SLPPENALTYCOLFORMAT = _amplpy_xpress_swig.XPRS_SLPPENALTYCOLFORMAT
XPRS_SLPSBLOROWFORMAT = _amplpy_xpress_swig.XPRS_SLPSBLOROWFORMAT
XPRS_SLPSBUPROWFORMAT = _amplpy_xpress_swig.XPRS_SLPSBUPROWFORMAT
XPRS_SLPTRACEMASK = _amplpy_xpress_swig.XPRS_SLPTRACEMASK
XPRS_SLPITERFALLBACKOPS = _amplpy_xpress_swig.XPRS_SLPITERFALLBACKOPS
XPRS_NLPVALIDATIONSTATUS = _amplpy_xpress_swig.XPRS_NLPVALIDATIONSTATUS
XPRS_NLPSOLSTATUS = _amplpy_xpress_swig.XPRS_NLPSOLSTATUS
XPRS_NLPORIGINALROWS = _amplpy_xpress_swig.XPRS_NLPORIGINALROWS
XPRS_NLPORIGINALCOLS = _amplpy_xpress_swig.XPRS_NLPORIGINALCOLS
XPRS_NLPUFS = _amplpy_xpress_swig.XPRS_NLPUFS
XPRS_NLPIFS = _amplpy_xpress_swig.XPRS_NLPIFS
XPRS_NLPEQUALSCOLUMN = _amplpy_xpress_swig.XPRS_NLPEQUALSCOLUMN
XPRS_NLPVARIABLES = _amplpy_xpress_swig.XPRS_NLPVARIABLES
XPRS_NLPIMPLICITVARIABLES = _amplpy_xpress_swig.XPRS_NLPIMPLICITVARIABLES
XPRS_NONLINEARCONSTRAINTS = _amplpy_xpress_swig.XPRS_NONLINEARCONSTRAINTS
XPRS_NLPUSERFUNCCALLS = _amplpy_xpress_swig.XPRS_NLPUSERFUNCCALLS
XPRS_NLPUSEDERIVATIVES = _amplpy_xpress_swig.XPRS_NLPUSEDERIVATIVES
XPRS_NLPKEEPBESTITER = _amplpy_xpress_swig.XPRS_NLPKEEPBESTITER
XPRS_NLPSTATUS = _amplpy_xpress_swig.XPRS_NLPSTATUS
XPRS_LOCALSOLVERSELECTED = _amplpy_xpress_swig.XPRS_LOCALSOLVERSELECTED
XPRS_NLPMODELROWS = _amplpy_xpress_swig.XPRS_NLPMODELROWS
XPRS_NLPMODELCOLS = _amplpy_xpress_swig.XPRS_NLPMODELCOLS
XPRS_NLPJOBID = _amplpy_xpress_swig.XPRS_NLPJOBID
XPRS_MSJOBS = _amplpy_xpress_swig.XPRS_MSJOBS
XPRS_NLPSTOPSTATUS = _amplpy_xpress_swig.XPRS_NLPSTOPSTATUS
XPRS_NLPPRESOLVEELIMINATIONS = _amplpy_xpress_swig.XPRS_NLPPRESOLVEELIMINATIONS
XPRS_NLPTOTALEVALUATIONERRORS = _amplpy_xpress_swig.XPRS_NLPTOTALEVALUATIONERRORS
XPRS_SLPEXPLOREDELTAS = _amplpy_xpress_swig.XPRS_SLPEXPLOREDELTAS
XPRS_SLPSEMICONTDELTAS = _amplpy_xpress_swig.XPRS_SLPSEMICONTDELTAS
XPRS_SLPINTEGERDELTAS = _amplpy_xpress_swig.XPRS_SLPINTEGERDELTAS
XPRS_SLPITER = _amplpy_xpress_swig.XPRS_SLPITER
XPRS_SLPSTATUS = _amplpy_xpress_swig.XPRS_SLPSTATUS
XPRS_SLPUNCONVERGED = _amplpy_xpress_swig.XPRS_SLPUNCONVERGED
XPRS_SLPSBXCONVERGED = _amplpy_xpress_swig.XPRS_SLPSBXCONVERGED
XPRS_SLPPENALTYDELTAROW = _amplpy_xpress_swig.XPRS_SLPPENALTYDELTAROW
XPRS_SLPPENALTYDELTACOLUMN = _amplpy_xpress_swig.XPRS_SLPPENALTYDELTACOLUMN
XPRS_SLPPENALTYERRORROW = _amplpy_xpress_swig.XPRS_SLPPENALTYERRORROW
XPRS_SLPPENALTYERRORCOLUMN = _amplpy_xpress_swig.XPRS_SLPPENALTYERRORCOLUMN
XPRS_SLPCOEFFICIENTS = _amplpy_xpress_swig.XPRS_SLPCOEFFICIENTS
XPRS_SLPPENALTYDELTAS = _amplpy_xpress_swig.XPRS_SLPPENALTYDELTAS
XPRS_SLPPENALTYERRORS = _amplpy_xpress_swig.XPRS_SLPPENALTYERRORS
XPRS_SLPPLUSPENALTYERRORS = _amplpy_xpress_swig.XPRS_SLPPLUSPENALTYERRORS
XPRS_SLPMINUSPENALTYERRORS = _amplpy_xpress_swig.XPRS_SLPMINUSPENALTYERRORS
XPRS_SLPUCCONSTRAINEDCOUNT = _amplpy_xpress_swig.XPRS_SLPUCCONSTRAINEDCOUNT
XPRS_SLPMIPNODES = _amplpy_xpress_swig.XPRS_SLPMIPNODES
XPRS_SLPMIPITER = _amplpy_xpress_swig.XPRS_SLPMIPITER
XPRS_SLPTOLSETS = _amplpy_xpress_swig.XPRS_SLPTOLSETS
XPRS_SLPECFCOUNT = _amplpy_xpress_swig.XPRS_SLPECFCOUNT
XPRS_SLPDELTAS = _amplpy_xpress_swig.XPRS_SLPDELTAS
XPRS_SLPZEROESRESET = _amplpy_xpress_swig.XPRS_SLPZEROESRESET
XPRS_SLPZEROESTOTAL = _amplpy_xpress_swig.XPRS_SLPZEROESTOTAL
XPRS_SLPZEROESRETAINED = _amplpy_xpress_swig.XPRS_SLPZEROESRETAINED
XPRS_SLPNONCONSTANTCOEFFS = _amplpy_xpress_swig.XPRS_SLPNONCONSTANTCOEFFS
XPRS_SLPMIPSOLS = _amplpy_xpress_swig.XPRS_SLPMIPSOLS
XPRS_NLPVALIDATIONINDEX_K = _amplpy_xpress_swig.XPRS_NLPVALIDATIONINDEX_K
XPRS_NLPVALIDATIONNETOBJ = _amplpy_xpress_swig.XPRS_NLPVALIDATIONNETOBJ
XPRS_NLPPRIMALINTEGRAL = _amplpy_xpress_swig.XPRS_NLPPRIMALINTEGRAL
XPRS_SLPCURRENTDELTACOST = _amplpy_xpress_swig.XPRS_SLPCURRENTDELTACOST
XPRS_SLPCURRENTERRORCOST = _amplpy_xpress_swig.XPRS_SLPCURRENTERRORCOST
XPRS_SLPPENALTYERRORTOTAL = _amplpy_xpress_swig.XPRS_SLPPENALTYERRORTOTAL
XPRS_SLPPENALTYERRORVALUE = _amplpy_xpress_swig.XPRS_SLPPENALTYERRORVALUE
XPRS_SLPPENALTYDELTATOTAL = _amplpy_xpress_swig.XPRS_SLPPENALTYDELTATOTAL
XPRS_SLPPENALTYDELTAVALUE = _amplpy_xpress_swig.XPRS_SLPPENALTYDELTAVALUE
XPRS_KNITRO_PARAM_NEWPOINT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_NEWPOINT
XPRS_KNITRO_PARAM_HONORBNDS = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_HONORBNDS
XPRS_KNITRO_PARAM_ALGORITHM = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_ALGORITHM
XPRS_KNITRO_PARAM_BAR_MURULE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_MURULE
XPRS_KNITRO_PARAM_BAR_FEASIBLE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_FEASIBLE
XPRS_KNITRO_PARAM_GRADOPT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_GRADOPT
XPRS_KNITRO_PARAM_HESSOPT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_HESSOPT
XPRS_KNITRO_PARAM_BAR_INITPT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_INITPT
XPRS_KNITRO_PARAM_MAXCGIT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MAXCGIT
XPRS_KNITRO_PARAM_MAXIT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MAXIT
XPRS_KNITRO_PARAM_OUTLEV = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_OUTLEV
XPRS_KNITRO_PARAM_SCALE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_SCALE
XPRS_KNITRO_PARAM_SOC = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_SOC
XPRS_KNITRO_PARAM_DELTA = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_DELTA
XPRS_KNITRO_PARAM_BAR_FEASMODETOL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_FEASMODETOL
XPRS_KNITRO_PARAM_FEASTOL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_FEASTOL
XPRS_KNITRO_PARAM_FEASTOLABS = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_FEASTOLABS
XPRS_KNITRO_PARAM_BAR_INITMU = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_INITMU
XPRS_KNITRO_PARAM_OBJRANGE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_OBJRANGE
XPRS_KNITRO_PARAM_OPTTOL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_OPTTOL
XPRS_KNITRO_PARAM_OPTTOLABS = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_OPTTOLABS
XPRS_KNITRO_PARAM_PIVOT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_PIVOT
XPRS_KNITRO_PARAM_XTOL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_XTOL
XPRS_KNITRO_PARAM_DEBUG = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_DEBUG
XPRS_KNITRO_PARAM_MULTISTART = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MULTISTART
XPRS_KNITRO_PARAM_MSMAXSOLVES = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MSMAXSOLVES
XPRS_KNITRO_PARAM_MSMAXBNDRANGE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MSMAXBNDRANGE
XPRS_KNITRO_PARAM_LMSIZE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_LMSIZE
XPRS_KNITRO_PARAM_BAR_MAXCROSSIT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_MAXCROSSIT
XPRS_KNITRO_PARAM_BLASOPTION = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BLASOPTION
XPRS_KNITRO_PARAM_BAR_MAXREFACTOR = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_MAXREFACTOR
XPRS_KNITRO_PARAM_BAR_MAXBACKTRACK = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_MAXBACKTRACK
XPRS_KNITRO_PARAM_BAR_PENRULE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_PENRULE
XPRS_KNITRO_PARAM_BAR_PENCONS = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_PENCONS
XPRS_KNITRO_PARAM_MSNUMTOSAVE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MSNUMTOSAVE
XPRS_KNITRO_PARAM_MSSAVETOL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MSSAVETOL
XPRS_KNITRO_PARAM_MSTERMINATE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MSTERMINATE
XPRS_KNITRO_PARAM_MSSTARTPTRANGE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MSSTARTPTRANGE
XPRS_KNITRO_PARAM_INFEASTOL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_INFEASTOL
XPRS_KNITRO_PARAM_LINSOLVER = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_LINSOLVER
XPRS_KNITRO_PARAM_BAR_DIRECTINTERVAL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_DIRECTINTERVAL
XPRS_KNITRO_PARAM_PRESOLVE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_PRESOLVE
XPRS_KNITRO_PARAM_PRESOLVE_TOL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_PRESOLVE_TOL
XPRS_KNITRO_PARAM_BAR_SWITCHRULE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_SWITCHRULE
XPRS_KNITRO_PARAM_MA_TERMINATE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MA_TERMINATE
XPRS_KNITRO_PARAM_MSSEED = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MSSEED
XPRS_KNITRO_PARAM_BAR_RELAXCONS = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_BAR_RELAXCONS
XPRS_KNITRO_PARAM_MIP_METHOD = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_METHOD
XPRS_KNITRO_PARAM_MIP_BRANCHRULE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_BRANCHRULE
XPRS_KNITRO_PARAM_MIP_SELECTRULE = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_SELECTRULE
XPRS_KNITRO_PARAM_MIP_INTGAPABS = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_INTGAPABS
XPRS_KNITRO_PARAM_MIP_INTGAPREL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_INTGAPREL
XPRS_KNITRO_PARAM_MIP_OUTLEVEL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_OUTLEVEL
XPRS_KNITRO_PARAM_MIP_OUTINTERVAL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_OUTINTERVAL
XPRS_KNITRO_PARAM_MIP_DEBUG = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_DEBUG
XPRS_KNITRO_PARAM_MIP_IMPLICATNS = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_IMPLICATNS
XPRS_KNITRO_PARAM_MIP_GUB_BRANCH = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_GUB_BRANCH
XPRS_KNITRO_PARAM_MIP_KNAPSACK = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_KNAPSACK
XPRS_KNITRO_PARAM_MIP_ROUNDING = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_ROUNDING
XPRS_KNITRO_PARAM_MIP_ROOTALG = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_ROOTALG
XPRS_KNITRO_PARAM_MIP_LPALG = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_LPALG
XPRS_KNITRO_PARAM_MIP_MAXNODES = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_MAXNODES
XPRS_KNITRO_PARAM_MIP_HEURISTIC = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_HEURISTIC
XPRS_KNITRO_PARAM_MIP_HEUR_MAXIT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_HEUR_MAXIT
XPRS_KNITRO_PARAM_MIP_PSEUDOINIT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_PSEUDOINIT
XPRS_KNITRO_PARAM_MIP_STRONG_MAXIT = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_STRONG_MAXIT
XPRS_KNITRO_PARAM_MIP_STRONG_CANDLIM = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_STRONG_CANDLIM
XPRS_KNITRO_PARAM_MIP_STRONG_LEVEL = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_MIP_STRONG_LEVEL
XPRS_KNITRO_PARAM_PAR_NUMTHREADS = _amplpy_xpress_swig.XPRS_KNITRO_PARAM_PAR_NUMTHREADS
XPRS_TOK_EOF = _amplpy_xpress_swig.XPRS_TOK_EOF
XPRS_TOK_CON = _amplpy_xpress_swig.XPRS_TOK_CON
XPRS_TOK_COL = _amplpy_xpress_swig.XPRS_TOK_COL
XPRS_TOK_FUN = _amplpy_xpress_swig.XPRS_TOK_FUN
XPRS_TOK_IFUN = _amplpy_xpress_swig.XPRS_TOK_IFUN
XPRS_TOK_LB = _amplpy_xpress_swig.XPRS_TOK_LB
XPRS_TOK_RB = _amplpy_xpress_swig.XPRS_TOK_RB
XPRS_TOK_DEL = _amplpy_xpress_swig.XPRS_TOK_DEL
XPRS_TOK_OP = _amplpy_xpress_swig.XPRS_TOK_OP
XPRS_OP_UMINUS = _amplpy_xpress_swig.XPRS_OP_UMINUS
XPRS_OP_EXPONENT = _amplpy_xpress_swig.XPRS_OP_EXPONENT
XPRS_OP_MULTIPLY = _amplpy_xpress_swig.XPRS_OP_MULTIPLY
XPRS_OP_DIVIDE = _amplpy_xpress_swig.XPRS_OP_DIVIDE
XPRS_OP_PLUS = _amplpy_xpress_swig.XPRS_OP_PLUS
XPRS_OP_MINUS = _amplpy_xpress_swig.XPRS_OP_MINUS
XPRS_DEL_COMMA = _amplpy_xpress_swig.XPRS_DEL_COMMA
XPRS_DEL_COLON = _amplpy_xpress_swig.XPRS_DEL_COLON
XPRS_IFUN_LOG = _amplpy_xpress_swig.XPRS_IFUN_LOG
XPRS_IFUN_LOG10 = _amplpy_xpress_swig.XPRS_IFUN_LOG10
XPRS_IFUN_LN = _amplpy_xpress_swig.XPRS_IFUN_LN
XPRS_IFUN_EXP = _amplpy_xpress_swig.XPRS_IFUN_EXP
XPRS_IFUN_ABS = _amplpy_xpress_swig.XPRS_IFUN_ABS
XPRS_IFUN_SQRT = _amplpy_xpress_swig.XPRS_IFUN_SQRT
XPRS_IFUN_SIN = _amplpy_xpress_swig.XPRS_IFUN_SIN
XPRS_IFUN_COS = _amplpy_xpress_swig.XPRS_IFUN_COS
XPRS_IFUN_TAN = _amplpy_xpress_swig.XPRS_IFUN_TAN
XPRS_IFUN_ARCSIN = _amplpy_xpress_swig.XPRS_IFUN_ARCSIN
XPRS_IFUN_ARCCOS = _amplpy_xpress_swig.XPRS_IFUN_ARCCOS
XPRS_IFUN_ARCTAN = _amplpy_xpress_swig.XPRS_IFUN_ARCTAN
XPRS_IFUN_MIN = _amplpy_xpress_swig.XPRS_IFUN_MIN
XPRS_IFUN_MAX = _amplpy_xpress_swig.XPRS_IFUN_MAX
XPRS_IFUN_PWL = _amplpy_xpress_swig.XPRS_IFUN_PWL
XPRS_IFUN_SUM = _amplpy_xpress_swig.XPRS_IFUN_SUM
XPRS_IFUN_PROD = _amplpy_xpress_swig.XPRS_IFUN_PROD
XPRS_IFUN_SIGN = _amplpy_xpress_swig.XPRS_IFUN_SIGN
XPRS_IFUN_ERF = _amplpy_xpress_swig.XPRS_IFUN_ERF
XPRS_IFUN_ERFC = _amplpy_xpress_swig.XPRS_IFUN_ERFC
XPRS_SLPTOLSET_TC = _amplpy_xpress_swig.XPRS_SLPTOLSET_TC
XPRS_SLPTOLSET_TA = _amplpy_xpress_swig.XPRS_SLPTOLSET_TA
XPRS_SLPTOLSET_RA = _amplpy_xpress_swig.XPRS_SLPTOLSET_RA
XPRS_SLPTOLSET_TM = _amplpy_xpress_swig.XPRS_SLPTOLSET_TM
XPRS_SLPTOLSET_RM = _amplpy_xpress_swig.XPRS_SLPTOLSET_RM
XPRS_SLPTOLSET_TI = _amplpy_xpress_swig.XPRS_SLPTOLSET_TI
XPRS_SLPTOLSET_RI = _amplpy_xpress_swig.XPRS_SLPTOLSET_RI
XPRS_SLPTOLSET_TS = _amplpy_xpress_swig.XPRS_SLPTOLSET_TS
XPRS_SLPTOLSET_RS = _amplpy_xpress_swig.XPRS_SLPTOLSET_RS
XPRS_SLPTOLSETBIT_TC = _amplpy_xpress_swig.XPRS_SLPTOLSETBIT_TC
XPRS_SLPTOLSETBIT_TA = _amplpy_xpress_swig.XPRS_SLPTOLSETBIT_TA
XPRS_SLPTOLSETBIT_RA = _amplpy_xpress_swig.XPRS_SLPTOLSETBIT_RA
XPRS_SLPTOLSETBIT_TM = _amplpy_xpress_swig.XPRS_SLPTOLSETBIT_TM
XPRS_SLPTOLSETBIT_RM = _amplpy_xpress_swig.XPRS_SLPTOLSETBIT_RM
XPRS_SLPTOLSETBIT_TI = _amplpy_xpress_swig.XPRS_SLPTOLSETBIT_TI
XPRS_SLPTOLSETBIT_RI = _amplpy_xpress_swig.XPRS_SLPTOLSETBIT_RI
XPRS_SLPTOLSETBIT_TS = _amplpy_xpress_swig.XPRS_SLPTOLSETBIT_TS
XPRS_SLPTOLSETBIT_RS = _amplpy_xpress_swig.XPRS_SLPTOLSETBIT_RS
XPRS_SLPTOLSET_DELETE = _amplpy_xpress_swig.XPRS_SLPTOLSET_DELETE
XPRS_SLPCONVERGEBIT_CTOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_CTOL
XPRS_SLPCONVERGEBIT_ATOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_ATOL
XPRS_SLPCONVERGEBIT_MTOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_MTOL
XPRS_SLPCONVERGEBIT_ITOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_ITOL
XPRS_SLPCONVERGEBIT_STOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_STOL
XPRS_SLPCONVERGEBIT_USER = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_USER
XPRS_SLPCONVERGEBIT_VTOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_VTOL
XPRS_SLPCONVERGEBIT_XTOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_XTOL
XPRS_SLPCONVERGEBIT_OTOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_OTOL
XPRS_SLPCONVERGEBIT_WTOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_WTOL
XPRS_SLPCONVERGEBIT_EXTENDEDSCALING = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_EXTENDEDSCALING
XPRS_SLPCONVERGEBIT_VALIDATION = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_VALIDATION
XPRS_SLPCONVERGEBIT_VALIDATION_K = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_VALIDATION_K
XPRS_SLPCONVERGEBIT_NOQUADCHECK = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_NOQUADCHECK
XPRS_SLPCONVERGEBIT_ECF_BEFORE_SOL = _amplpy_xpress_swig.XPRS_SLPCONVERGEBIT_ECF_BEFORE_SOL
XPRS_SLPHASNOCOEFS = _amplpy_xpress_swig.XPRS_SLPHASNOCOEFS
XPRS_SLPHASDELTA = _amplpy_xpress_swig.XPRS_SLPHASDELTA
XPRS_SLPHASIV = _amplpy_xpress_swig.XPRS_SLPHASIV
XPRS_SLPHASCALCIV = _amplpy_xpress_swig.XPRS_SLPHASCALCIV
XPRS_SLPISDELTA = _amplpy_xpress_swig.XPRS_SLPISDELTA
XPRS_SLPISPLUSPENALTYDELTA = _amplpy_xpress_swig.XPRS_SLPISPLUSPENALTYDELTA
XPRS_SLPISMINUSPENALTYDELTA = _amplpy_xpress_swig.XPRS_SLPISMINUSPENALTYDELTA
XPRS_SLPISPENALTYDELTA = _amplpy_xpress_swig.XPRS_SLPISPENALTYDELTA
XPRS_SLPISPLUSERRORVECTOR = _amplpy_xpress_swig.XPRS_SLPISPLUSERRORVECTOR
XPRS_SLPISMINUSERRORVECTOR = _amplpy_xpress_swig.XPRS_SLPISMINUSERRORVECTOR
XPRS_SLPISERRORVECTOR = _amplpy_xpress_swig.XPRS_SLPISERRORVECTOR
XPRS_SLPISMISCVECTOR = _amplpy_xpress_swig.XPRS_SLPISMISCVECTOR
XPRS_SLPISEQUALSCOLUMN = _amplpy_xpress_swig.XPRS_SLPISEQUALSCOLUMN
XPRS_NLPPRESOLVEPROTECT = _amplpy_xpress_swig.XPRS_NLPPRESOLVEPROTECT
XPRS_SLPHASCONVERGED = _amplpy_xpress_swig.XPRS_SLPHASCONVERGED
XPRS_SLPACTIVESTEPBOUND = _amplpy_xpress_swig.XPRS_SLPACTIVESTEPBOUND
XPRS_SLPACTIVESBROW = _amplpy_xpress_swig.XPRS_SLPACTIVESBROW
XPRS_SLPELIMINATEDCOL = _amplpy_xpress_swig.XPRS_SLPELIMINATEDCOL
XPRS_SLPISSTRUCTURALCOLUMN = _amplpy_xpress_swig.XPRS_SLPISSTRUCTURALCOLUMN
XPRS_SLPISINCOEFS = _amplpy_xpress_swig.XPRS_SLPISINCOEFS
XPRS_SLPISINGLOBAL = _amplpy_xpress_swig.XPRS_SLPISINGLOBAL
XPRS_SLPHASZEROBOUND = _amplpy_xpress_swig.XPRS_SLPHASZEROBOUND
XPRS_SLPFIXEDVAR = _amplpy_xpress_swig.XPRS_SLPFIXEDVAR
XPRS_SLPBOUNDSSET = _amplpy_xpress_swig.XPRS_SLPBOUNDSSET
XPRS_SLPUSEFULDELTA = _amplpy_xpress_swig.XPRS_SLPUSEFULDELTA
XPRS_SLPNOUSEFULDELTA = _amplpy_xpress_swig.XPRS_SLPNOUSEFULDELTA
XPRS_SLPISINTEGER = _amplpy_xpress_swig.XPRS_SLPISINTEGER
XPRS_SLPCASCADECONTRACTION = _amplpy_xpress_swig.XPRS_SLPCASCADECONTRACTION
XPRS_SLPISUPDATEROW = _amplpy_xpress_swig.XPRS_SLPISUPDATEROW
XPRS_SLPISPENALTYROW = _amplpy_xpress_swig.XPRS_SLPISPENALTYROW
XPRS_SLPISMISCROW = _amplpy_xpress_swig.XPRS_SLPISMISCROW
XPRS_SLPISSBROW = _amplpy_xpress_swig.XPRS_SLPISSBROW
XPRS_SLPHASPLUSERROR = _amplpy_xpress_swig.XPRS_SLPHASPLUSERROR
XPRS_SLPHASMINUSERROR = _amplpy_xpress_swig.XPRS_SLPHASMINUSERROR
XPRS_SLPHASERROR = _amplpy_xpress_swig.XPRS_SLPHASERROR
XPRS_SLPISDETERMININGROW = _amplpy_xpress_swig.XPRS_SLPISDETERMININGROW
XPRS_SLPNOERRORVECTORS = _amplpy_xpress_swig.XPRS_SLPNOERRORVECTORS
XPRS_SLPHASNONZEROCOEF = _amplpy_xpress_swig.XPRS_SLPHASNONZEROCOEF
XPRS_SLPREDUNDANTROW = _amplpy_xpress_swig.XPRS_SLPREDUNDANTROW
XPRS_SLPUNCONVERGEDROW = _amplpy_xpress_swig.XPRS_SLPUNCONVERGEDROW
XPRS_SLPACTIVEPENALTY = _amplpy_xpress_swig.XPRS_SLPACTIVEPENALTY
XPRS_SLPHASSLPELEMENT = _amplpy_xpress_swig.XPRS_SLPHASSLPELEMENT
XPRS_SLPTRANSFERROW = _amplpy_xpress_swig.XPRS_SLPTRANSFERROW
XPRS_SLPMINIMUMAUGMENTATION = _amplpy_xpress_swig.XPRS_SLPMINIMUMAUGMENTATION
XPRS_SLPEVENHANDEDAUGMENTATION = _amplpy_xpress_swig.XPRS_SLPEVENHANDEDAUGMENTATION
XPRS_SLPEQUALITYERRORVECTORS = _amplpy_xpress_swig.XPRS_SLPEQUALITYERRORVECTORS
XPRS_SLPALLERRORVECTORS = _amplpy_xpress_swig.XPRS_SLPALLERRORVECTORS
XPRS_SLPPENALTYDELTAVECTORS = _amplpy_xpress_swig.XPRS_SLPPENALTYDELTAVECTORS
XPRS_SLPAMEANWEIGHT = _amplpy_xpress_swig.XPRS_SLPAMEANWEIGHT
XPRS_SLPSBFROMVALUES = _amplpy_xpress_swig.XPRS_SLPSBFROMVALUES
XPRS_SLPSBFROMABSVALUES = _amplpy_xpress_swig.XPRS_SLPSBFROMABSVALUES
XPRS_SLPSTEPBOUNDROWS = _amplpy_xpress_swig.XPRS_SLPSTEPBOUNDROWS
XPRS_SLPALLROWERRORVECTORS = _amplpy_xpress_swig.XPRS_SLPALLROWERRORVECTORS
XPRS_SLPNOUPDATEIFONLYIV = _amplpy_xpress_swig.XPRS_SLPNOUPDATEIFONLYIV
XPRS_SLPNOFORMULADOMAINIV = _amplpy_xpress_swig.XPRS_SLPNOFORMULADOMAINIV
XPRS_SLPSKIPIVLPHEURISTICS = _amplpy_xpress_swig.XPRS_SLPSKIPIVLPHEURISTICS
XPRS_SLPNOSTEPBOUNDS = _amplpy_xpress_swig.XPRS_SLPNOSTEPBOUNDS
XPRS_SLPSTEPBOUNDSASREQUIRED = _amplpy_xpress_swig.XPRS_SLPSTEPBOUNDSASREQUIRED
XPRS_SLPESTIMATESTEPBOUNDS = _amplpy_xpress_swig.XPRS_SLPESTIMATESTEPBOUNDS
XPRS_SLPDYNAMICDAMPING = _amplpy_xpress_swig.XPRS_SLPDYNAMICDAMPING
XPRS_SLPHOLDVALUES = _amplpy_xpress_swig.XPRS_SLPHOLDVALUES
XPRS_SLPRETAINPREVIOUSVALUE = _amplpy_xpress_swig.XPRS_SLPRETAINPREVIOUSVALUE
XPRS_SLPRESETDELTAZ = _amplpy_xpress_swig.XPRS_SLPRESETDELTAZ
XPRS_SLPQUICKCONVERGENCECHECK = _amplpy_xpress_swig.XPRS_SLPQUICKCONVERGENCECHECK
XPRS_SLPESCALATEPENALTIES = _amplpy_xpress_swig.XPRS_SLPESCALATEPENALTIES
XPRS_SLPSWITCHTOPRIMAL = _amplpy_xpress_swig.XPRS_SLPSWITCHTOPRIMAL
XPRS_SLPNONZEROBOUND = _amplpy_xpress_swig.XPRS_SLPNONZEROBOUND
XPRS_SLPMAXCOSTOPTION = _amplpy_xpress_swig.XPRS_SLPMAXCOSTOPTION
XPRS_SLPRESIDUALERRORS = _amplpy_xpress_swig.XPRS_SLPRESIDUALERRORS
XPRS_SLPNOLPPOLISHING = _amplpy_xpress_swig.XPRS_SLPNOLPPOLISHING
XPRS_SLPCASCADEDBOUNDS = _amplpy_xpress_swig.XPRS_SLPCASCADEDBOUNDS
XPRS_SLPCLAMPEXTENDEDACTIVESB = _amplpy_xpress_swig.XPRS_SLPCLAMPEXTENDEDACTIVESB
XPRS_SLPCLAMPEXTENDEDALL = _amplpy_xpress_swig.XPRS_SLPCLAMPEXTENDEDALL
XPRS_SLPMIPINITIALSLP = _amplpy_xpress_swig.XPRS_SLPMIPINITIALSLP
XPRS_SLPMIPINITIALRELAXSLP = _amplpy_xpress_swig.XPRS_SLPMIPINITIALRELAXSLP
XPRS_SLPMIPINITIALFIXSLP = _amplpy_xpress_swig.XPRS_SLPMIPINITIALFIXSLP
XPRS_SLPMIPNODERELAXSLP = _amplpy_xpress_swig.XPRS_SLPMIPNODERELAXSLP
XPRS_SLPMIPNODEFIXSLP = _amplpy_xpress_swig.XPRS_SLPMIPNODEFIXSLP
XPRS_SLPMIPNODELIMITSLP = _amplpy_xpress_swig.XPRS_SLPMIPNODELIMITSLP
XPRS_SLPMIPFINALRELAXSLP = _amplpy_xpress_swig.XPRS_SLPMIPFINALRELAXSLP
XPRS_SLPMIPFINALFIXSLP = _amplpy_xpress_swig.XPRS_SLPMIPFINALFIXSLP
XPRS_SLPMIPWITHINSLP = _amplpy_xpress_swig.XPRS_SLPMIPWITHINSLP
XPRS_SLPSLPTHENMIP = _amplpy_xpress_swig.XPRS_SLPSLPTHENMIP
XPRS_SLPROOTMIPDRIVEN = _amplpy_xpress_swig.XPRS_SLPROOTMIPDRIVEN
XPRS_SLPSTATUS_CONVERGEDOBJUCC = _amplpy_xpress_swig.XPRS_SLPSTATUS_CONVERGEDOBJUCC
XPRS_SLPSTATUS_CONVERGEDOBJSBX = _amplpy_xpress_swig.XPRS_SLPSTATUS_CONVERGEDOBJSBX
XPRS_SLPSTATUS_LPINFEASIBLE = _amplpy_xpress_swig.XPRS_SLPSTATUS_LPINFEASIBLE
XPRS_SLPSTATUS_LPUNFINISHED = _amplpy_xpress_swig.XPRS_SLPSTATUS_LPUNFINISHED
XPRS_SLPSTATUS_MAXSLPITERATIONS = _amplpy_xpress_swig.XPRS_SLPSTATUS_MAXSLPITERATIONS
XPRS_SLPSTATUS_INTEGERINFEASIBLE = _amplpy_xpress_swig.XPRS_SLPSTATUS_INTEGERINFEASIBLE
XPRS_SLPSTATUS_RESIDUALPENALTIES = _amplpy_xpress_swig.XPRS_SLPSTATUS_RESIDUALPENALTIES
XPRS_SLPSTATUS_CONVERGEDOBJOBJ = _amplpy_xpress_swig.XPRS_SLPSTATUS_CONVERGEDOBJOBJ
XPRS_SLPSTATUS_MAXTIME = _amplpy_xpress_swig.XPRS_SLPSTATUS_MAXTIME
XPRS_SLPSTATUS_USER = _amplpy_xpress_swig.XPRS_SLPSTATUS_USER
XPRS_SLPSTATUS_VARSLINKEDINACTIVE = _amplpy_xpress_swig.XPRS_SLPSTATUS_VARSLINKEDINACTIVE
XPRS_SLPSTATUS_NOVARSINACTIVE = _amplpy_xpress_swig.XPRS_SLPSTATUS_NOVARSINACTIVE
XPRS_SLPSTATUS_OTOL = _amplpy_xpress_swig.XPRS_SLPSTATUS_OTOL
XPRS_SLPSTATUS_VTOL = _amplpy_xpress_swig.XPRS_SLPSTATUS_VTOL
XPRS_SLPSTATUS_XTOL = _amplpy_xpress_swig.XPRS_SLPSTATUS_XTOL
XPRS_SLPSTATUS_WTOL = _amplpy_xpress_swig.XPRS_SLPSTATUS_WTOL
XPRS_SLPSTATUS_ERROTOL = _amplpy_xpress_swig.XPRS_SLPSTATUS_ERROTOL
XPRS_SLPSTATUS_EVTOL = _amplpy_xpress_swig.XPRS_SLPSTATUS_EVTOL
XPRS_SLPSTATUS_POLISHED = _amplpy_xpress_swig.XPRS_SLPSTATUS_POLISHED
XPRS_SLPSTATUS_POLISH_FAILURE = _amplpy_xpress_swig.XPRS_SLPSTATUS_POLISH_FAILURE
XPRS_SLPSTATUS_ENFORCED = _amplpy_xpress_swig.XPRS_SLPSTATUS_ENFORCED
XPRS_SLPSTATUS_CONSECUTIVE_INFEAS = _amplpy_xpress_swig.XPRS_SLPSTATUS_CONSECUTIVE_INFEAS
XPRS_SLPSTATUS_KEEPBEST = _amplpy_xpress_swig.XPRS_SLPSTATUS_KEEPBEST
XPRS_SLPSTATUS_CLAMPING = _amplpy_xpress_swig.XPRS_SLPSTATUS_CLAMPING
XPRS_SLPSTATUS_ADAPTIVEITERS = _amplpy_xpress_swig.XPRS_SLPSTATUS_ADAPTIVEITERS
XPRS_SLPSTATUS_OBJQNONCONVEX = _amplpy_xpress_swig.XPRS_SLPSTATUS_OBJQNONCONVEX
XPRS_NLPSTATUS_UNSTARTED = _amplpy_xpress_swig.XPRS_NLPSTATUS_UNSTARTED
XPRS_NLPSTATUS_SOLUTION = _amplpy_xpress_swig.XPRS_NLPSTATUS_SOLUTION
XPRS_NLPSTATUS_LOCALLY_OPTIMAL = _amplpy_xpress_swig.XPRS_NLPSTATUS_LOCALLY_OPTIMAL
XPRS_NLPSTATUS_OPTIMAL = _amplpy_xpress_swig.XPRS_NLPSTATUS_OPTIMAL
XPRS_NLPSTATUS_NOSOLUTION = _amplpy_xpress_swig.XPRS_NLPSTATUS_NOSOLUTION
XPRS_NLPSTATUS_LOCALLY_INFEASIBLE = _amplpy_xpress_swig.XPRS_NLPSTATUS_LOCALLY_INFEASIBLE
XPRS_NLPSTATUS_INFEASIBLE = _amplpy_xpress_swig.XPRS_NLPSTATUS_INFEASIBLE
XPRS_NLPSTATUS_UNBOUNDED = _amplpy_xpress_swig.XPRS_NLPSTATUS_UNBOUNDED
XPRS_NLPSTATUS_UNFINISHED = _amplpy_xpress_swig.XPRS_NLPSTATUS_UNFINISHED
XPRS_NLPSTATUS_UNSOLVED = _amplpy_xpress_swig.XPRS_NLPSTATUS_UNSOLVED
XPRS_NLPSOLSTATUS_NONE = _amplpy_xpress_swig.XPRS_NLPSOLSTATUS_NONE
XPRS_NLPSOLSTATUS_SOLUTION_NODUALS = _amplpy_xpress_swig.XPRS_NLPSOLSTATUS_SOLUTION_NODUALS
XPRS_NLPSOLSTATUS_LOCALLYOPTIMAL_WITHDUALS = _amplpy_xpress_swig.XPRS_NLPSOLSTATUS_LOCALLYOPTIMAL_WITHDUALS
XPRS_NLPSOLSTATUS_GLOBALLYOPTIMAL_NODUALS = _amplpy_xpress_swig.XPRS_NLPSOLSTATUS_GLOBALLYOPTIMAL_NODUALS
XPRS_NLPSOLSTATUS_GLOBALLYOPTIMAL_WITHDUALS = _amplpy_xpress_swig.XPRS_NLPSOLSTATUS_GLOBALLYOPTIMAL_WITHDUALS
XPRS_SLPGRIDENUMERATE = _amplpy_xpress_swig.XPRS_SLPGRIDENUMERATE
XPRS_SLPGRIDCYCLIC = _amplpy_xpress_swig.XPRS_SLPGRIDCYCLIC
XPRS_SLPGRIDANNEALING = _amplpy_xpress_swig.XPRS_SLPGRIDANNEALING
XPRS_NLPRECALC = _amplpy_xpress_swig.XPRS_NLPRECALC
XPRS_NLPTOLCALC = _amplpy_xpress_swig.XPRS_NLPTOLCALC
XPRS_NLPALLCALCS = _amplpy_xpress_swig.XPRS_NLPALLCALCS
XPRS_NLP2DERIVATIVE = _amplpy_xpress_swig.XPRS_NLP2DERIVATIVE
XPRS_NLP1DERIVATIVE = _amplpy_xpress_swig.XPRS_NLP1DERIVATIVE
XPRS_NLPALLDERIVATIVES = _amplpy_xpress_swig.XPRS_NLPALLDERIVATIVES
XPRS_NLPINSTANCEFUNCTION = _amplpy_xpress_swig.XPRS_NLPINSTANCEFUNCTION
XPRS_NLPPRESOLVEOPS_GENERAL = _amplpy_xpress_swig.XPRS_NLPPRESOLVEOPS_GENERAL
XPRS_NLPPRESOLVEFIXZERO = _amplpy_xpress_swig.XPRS_NLPPRESOLVEFIXZERO
XPRS_NLPPRESOLVEFIXALL = _amplpy_xpress_swig.XPRS_NLPPRESOLVEFIXALL
XPRS_NLPPRESOLVESETBOUNDS = _amplpy_xpress_swig.XPRS_NLPPRESOLVESETBOUNDS
XPRS_NLPPRESOLVEINTBOUNDS = _amplpy_xpress_swig.XPRS_NLPPRESOLVEINTBOUNDS
XPRS_NLPPRESOLVEDOMAIN = _amplpy_xpress_swig.XPRS_NLPPRESOLVEDOMAIN
XPRS_SLPNOPRESOLVECOEFFICIENTS = _amplpy_xpress_swig.XPRS_SLPNOPRESOLVECOEFFICIENTS
XPRS_SLPNOPRESOLVEDELTAS = _amplpy_xpress_swig.XPRS_SLPNOPRESOLVEDELTAS
XPRS_NLPPRESOLVEOPS_NO_DUAL_SIDE = _amplpy_xpress_swig.XPRS_NLPPRESOLVEOPS_NO_DUAL_SIDE
XPRS_NLPPRESOLVEOPS_ELIMINATIONS = _amplpy_xpress_swig.XPRS_NLPPRESOLVEOPS_ELIMINATIONS
XPRS_NLPPRESOLVEOPS_NOLINEAR = _amplpy_xpress_swig.XPRS_NLPPRESOLVEOPS_NOLINEAR
XPRS_NLPPRESOLVEOPS_NOSIMPLIFIER = _amplpy_xpress_swig.XPRS_NLPPRESOLVEOPS_NOSIMPLIFIER
XPRS_NLPPRESOLVELEVEL_LOCALIZED = _amplpy_xpress_swig.XPRS_NLPPRESOLVELEVEL_LOCALIZED
XPRS_NLPPRESOLVELEVEL_BASIC = _amplpy_xpress_swig.XPRS_NLPPRESOLVELEVEL_BASIC
XPRS_NLPPRESOLVELEVEL_LINEAR = _amplpy_xpress_swig.XPRS_NLPPRESOLVELEVEL_LINEAR
XPRS_NLPPRESOLVELEVEL_FULL = _amplpy_xpress_swig.XPRS_NLPPRESOLVELEVEL_FULL
XPRS_SLPCASCADE_ALL = _amplpy_xpress_swig.XPRS_SLPCASCADE_ALL
XPRS_SLPCASCADE_COEF_VAR = _amplpy_xpress_swig.XPRS_SLPCASCADE_COEF_VAR
XPRS_SLPCASCADE_ALL_COEF_VAR = _amplpy_xpress_swig.XPRS_SLPCASCADE_ALL_COEF_VAR
XPRS_SLPCASCADE_STRUCT_VAR = _amplpy_xpress_swig.XPRS_SLPCASCADE_STRUCT_VAR
XPRS_SLPCASCADE_ALL_STRUCT_VAR = _amplpy_xpress_swig.XPRS_SLPCASCADE_ALL_STRUCT_VAR
XPRS_SLPCASCADE_SECONDARY_GROUPS = _amplpy_xpress_swig.XPRS_SLPCASCADE_SECONDARY_GROUPS
XPRS_SLPCASCADE_DRCOL_PREVOUSVALUE = _amplpy_xpress_swig.XPRS_SLPCASCADE_DRCOL_PREVOUSVALUE
XPRS_SLPCASCADE_DRCOL_PVRANGE = _amplpy_xpress_swig.XPRS_SLPCASCADE_DRCOL_PVRANGE
XPRS_SLPCASCADE_AUTOAPPLY = _amplpy_xpress_swig.XPRS_SLPCASCADE_AUTOAPPLY
XPRS_LOCALSOLVER_AUTO = _amplpy_xpress_swig.XPRS_LOCALSOLVER_AUTO
XPRS_LOCALSOLVER_XSLP = _amplpy_xpress_swig.XPRS_LOCALSOLVER_XSLP
XPRS_LOCALSOLVER_KNITRO = _amplpy_xpress_swig.XPRS_LOCALSOLVER_KNITRO
XPRS_LOCALSOLVER_OPTIMIZER = _amplpy_xpress_swig.XPRS_LOCALSOLVER_OPTIMIZER
XPRS_MSSET_INITIALVALUES = _amplpy_xpress_swig.XPRS_MSSET_INITIALVALUES
XPRS_MSSET_SOLVERS = _amplpy_xpress_swig.XPRS_MSSET_SOLVERS
XPRS_MSSET_SLP_BASIC = _amplpy_xpress_swig.XPRS_MSSET_SLP_BASIC
XPRS_MSSET_SLP_EXTENDED = _amplpy_xpress_swig.XPRS_MSSET_SLP_EXTENDED
XPRS_MSSET_KNITRO_BASIC = _amplpy_xpress_swig.XPRS_MSSET_KNITRO_BASIC
XPRS_MSSET_KNITRO_EXTENDED = _amplpy_xpress_swig.XPRS_MSSET_KNITRO_EXTENDED
XPRS_MSSET_INITIALFILTERED = _amplpy_xpress_swig.XPRS_MSSET_INITIALFILTERED
XPRS_KKT_CALCULATION_RECALCULATE_RDJ = _amplpy_xpress_swig.XPRS_KKT_CALCULATION_RECALCULATE_RDJ
XPRS_KKT_CALCULATION_MINIMZE_KKT_ERROR = _amplpy_xpress_swig.XPRS_KKT_CALCULATION_MINIMZE_KKT_ERROR
XPRS_KKT_CALCULATION_MEASURE_BOTH = _amplpy_xpress_swig.XPRS_KKT_CALCULATION_MEASURE_BOTH
XPRS_KKT_CALCULATION_ACTIVITY_BASED = _amplpy_xpress_swig.XPRS_KKT_CALCULATION_ACTIVITY_BASED
XPRS_KKT_CALCULATION_RESPECT_BASIS = _amplpy_xpress_swig.XPRS_KKT_CALCULATION_RESPECT_BASIS
XPRS_KKT_CALCULATION_ACTIVITY_BOTH = _amplpy_xpress_swig.XPRS_KKT_CALCULATION_ACTIVITY_BOTH
XPRS_KKT_JUST_CALCULATE = _amplpy_xpress_swig.XPRS_KKT_JUST_CALCULATE
XPRS_KKT_UPDATE_MULTIPLIERS = _amplpy_xpress_swig.XPRS_KKT_UPDATE_MULTIPLIERS
XPRS_SLPTRACEMASK_GENERALFIT = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_GENERALFIT
XPRS_SLPTRACEMASK_ROWS = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_ROWS
XPRS_SLPTRACEMASK_COLS = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_COLS
XPRS_SLPTRACEMASK_CASCADE = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_CASCADE
XPRS_SLPTRACEMASK_TYPE = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_TYPE
XPRS_SLPTRACEMASK_SLACK = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_SLACK
XPRS_SLPTRACEMASK_DUAL = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_DUAL
XPRS_SLPTRACEMASK_WEIGHT = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_WEIGHT
XPRS_SLPTRACEMASK_SOLUTION = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_SOLUTION
XPRS_SLPTRACEMASK_REDUCEDCOST = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_REDUCEDCOST
XPRS_SLPTRACEMASK_SLPVALUE = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_SLPVALUE
XPRS_SLPTRACEMASK_STEPBOUND = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_STEPBOUND
XPRS_SLPTRACEMASK_CONVERGE = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_CONVERGE
XPRS_SLPTRACEMASK_LINESEARCH = _amplpy_xpress_swig.XPRS_SLPTRACEMASK_LINESEARCH
XPRS_SLPFILTER_KEEPBEST = _amplpy_xpress_swig.XPRS_SLPFILTER_KEEPBEST
XPRS_SLPFILTER_CASCADE = _amplpy_xpress_swig.XPRS_SLPFILTER_CASCADE
XPRS_SLPFILTER_ZEROLINESEARCH = _amplpy_xpress_swig.XPRS_SLPFILTER_ZEROLINESEARCH
XPRS_SLPFILTER_ZEROLINESEARCHTR = _amplpy_xpress_swig.XPRS_SLPFILTER_ZEROLINESEARCHTR
XPRS_SLPANALYZE_RECORDLINEARIZATION = _amplpy_xpress_swig.XPRS_SLPANALYZE_RECORDLINEARIZATION
XPRS_SLPANALYZE_RECORDCASCADE = _amplpy_xpress_swig.XPRS_SLPANALYZE_RECORDCASCADE
XPRS_SLPANALYZE_RECORDLINESEARCH = _amplpy_xpress_swig.XPRS_SLPANALYZE_RECORDLINESEARCH
XPRS_SLPANALYZE_EXTENDEDFINALSUMMARY = _amplpy_xpress_swig.XPRS_SLPANALYZE_EXTENDEDFINALSUMMARY
XPRS_SLPANALYZE_INFEASIBLE_ITERATION = _amplpy_xpress_swig.XPRS_SLPANALYZE_INFEASIBLE_ITERATION
XPRS_SLPANALYZE_AUTOSAVEPOOL = _amplpy_xpress_swig.XPRS_SLPANALYZE_AUTOSAVEPOOL
XPRS_SLPANALYZE_SAVELINEARIZATIONS = _amplpy_xpress_swig.XPRS_SLPANALYZE_SAVELINEARIZATIONS
XPRS_SLPANALYZE_SAVEITERBASIS = _amplpy_xpress_swig.XPRS_SLPANALYZE_SAVEITERBASIS
XPRS_SLPANALYZE_SAVEFILE = _amplpy_xpress_swig.XPRS_SLPANALYZE_SAVEFILE
XPRS_NLPREFORMULATE_SLP2QP = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_SLP2QP
XPRS_NLPREFORMULATE_QP2SLP = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_QP2SLP
XPRS_NLPREFORMULATE_SLP2QCQP = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_SLP2QCQP
XPRS_NLPREFORMULATE_QCQP2SLP = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_QCQP2SLP
XPRS_NLPREFORMULATE_SOCP2SLP = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_SOCP2SLP
XPRS_NLPREFORMULATE_QPSOLVE = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_QPSOLVE
XPRS_NLPREFORMULATE_PWL = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_PWL
XPRS_NLPREFORMULATE_ABS = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_ABS
XPRS_NLPREFORMULATE_MINMAX = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_MINMAX
XPRS_NLPREFORMULATE_ALLABS = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_ALLABS
XPRS_NLPREFORMULATE_ALLMINMAX = _amplpy_xpress_swig.XPRS_NLPREFORMULATE_ALLMINMAX
XPRS_SLPDELTA_CONT = _amplpy_xpress_swig.XPRS_SLPDELTA_CONT
XPRS_SLPDELTA_SEMICONT = _amplpy_xpress_swig.XPRS_SLPDELTA_SEMICONT
XPRS_SLPDELTA_INTEGER = _amplpy_xpress_swig.XPRS_SLPDELTA_INTEGER
XPRS_SLPDELTA_EXPLORE = _amplpy_xpress_swig.XPRS_SLPDELTA_EXPLORE
XPRS_SLPROWINFO_SLACK = _amplpy_xpress_swig.XPRS_SLPROWINFO_SLACK
XPRS_SLPROWINFO_DUAL = _amplpy_xpress_swig.XPRS_SLPROWINFO_DUAL
XPRS_SLPROWINFO_NUMPENALTYERRORS = _amplpy_xpress_swig.XPRS_SLPROWINFO_NUMPENALTYERRORS
XPRS_SLPROWINFO_MAXPENALTYERROR = _amplpy_xpress_swig.XPRS_SLPROWINFO_MAXPENALTYERROR
XPRS_SLPROWINFO_TOTALPENALTYERROR = _amplpy_xpress_swig.XPRS_SLPROWINFO_TOTALPENALTYERROR
XPRS_SLPROWINFO_CURRENTPENALTYERROR = _amplpy_xpress_swig.XPRS_SLPROWINFO_CURRENTPENALTYERROR
XPRS_SLPROWINFO_CURRENTPENALTYFACTOR = _amplpy_xpress_swig.XPRS_SLPROWINFO_CURRENTPENALTYFACTOR
XPRS_SLPROWINFO_PENALTYCOLUMNPLUS = _amplpy_xpress_swig.XPRS_SLPROWINFO_PENALTYCOLUMNPLUS
XPRS_SLPROWINFO_PENALTYCOLUMNPLUSVALUE = _amplpy_xpress_swig.XPRS_SLPROWINFO_PENALTYCOLUMNPLUSVALUE
XPRS_SLPROWINFO_PENALTYCOLUMNPLUSDJ = _amplpy_xpress_swig.XPRS_SLPROWINFO_PENALTYCOLUMNPLUSDJ
XPRS_SLPROWINFO_PENALTYCOLUMNMINUS = _amplpy_xpress_swig.XPRS_SLPROWINFO_PENALTYCOLUMNMINUS
XPRS_SLPROWINFO_PENALTYCOLUMNMINUSVALUE = _amplpy_xpress_swig.XPRS_SLPROWINFO_PENALTYCOLUMNMINUSVALUE
XPRS_SLPROWINFO_PENALTYCOLUMNMINUSDJ = _amplpy_xpress_swig.XPRS_SLPROWINFO_PENALTYCOLUMNMINUSDJ
XPRS_SLPCOLINFO_VALUE = _amplpy_xpress_swig.XPRS_SLPCOLINFO_VALUE
XPRS_SLPCOLINFO_RDJ = _amplpy_xpress_swig.XPRS_SLPCOLINFO_RDJ
XPRS_SLPCOLINFO_DELTAINDEX = _amplpy_xpress_swig.XPRS_SLPCOLINFO_DELTAINDEX
XPRS_SLPCOLINFO_DELTA = _amplpy_xpress_swig.XPRS_SLPCOLINFO_DELTA
XPRS_SLPCOLINFO_DELTADJ = _amplpy_xpress_swig.XPRS_SLPCOLINFO_DELTADJ
XPRS_SLPCOLINFO_UPDATEROW = _amplpy_xpress_swig.XPRS_SLPCOLINFO_UPDATEROW
XPRS_SLPCOLINFO_SB = _amplpy_xpress_swig.XPRS_SLPCOLINFO_SB
XPRS_SLPCOLINFO_SBDUAL = _amplpy_xpress_swig.XPRS_SLPCOLINFO_SBDUAL
XPRS_SLPCOLINFO_LPVALUE = _amplpy_xpress_swig.XPRS_SLPCOLINFO_LPVALUE
XPRS_USERFUNCTION_MAP = _amplpy_xpress_swig.XPRS_USERFUNCTION_MAP
XPRS_USERFUNCTION_VECMAP = _amplpy_xpress_swig.XPRS_USERFUNCTION_VECMAP
XPRS_USERFUNCTION_MULTIMAP = _amplpy_xpress_swig.XPRS_USERFUNCTION_MULTIMAP
XPRS_USERFUNCTION_MAPDELTA = _amplpy_xpress_swig.XPRS_USERFUNCTION_MAPDELTA
XPRS_USERFUNCTION_VECMAPDELTA = _amplpy_xpress_swig.XPRS_USERFUNCTION_VECMAPDELTA
XPRS_USERFUNCTION_MULTIMAPDELTA = _amplpy_xpress_swig.XPRS_USERFUNCTION_MULTIMAPDELTA
XPRS_NLPUSERFUNCNAMES = _amplpy_xpress_swig.XPRS_NLPUSERFUNCNAMES
XPRS_NLPINTERNALFUNCNAMES = _amplpy_xpress_swig.XPRS_NLPINTERNALFUNCNAMES
XPRS_NLPUSERFUNCNAMESNOCASE = _amplpy_xpress_swig.XPRS_NLPUSERFUNCNAMESNOCASE
XPRS_NLPINTERNALFUNCNAMESNOCASE = _amplpy_xpress_swig.XPRS_NLPINTERNALFUNCNAMESNOCASE
XPRS_NLPFORMULACOEFFCOLUMNINDEX = _amplpy_xpress_swig.XPRS_NLPFORMULACOEFFCOLUMNINDEX
XPRS_NLPOBJECTIVEROWINDEX = _amplpy_xpress_swig.XPRS_NLPOBJECTIVEROWINDEX
XPRS_NLPSOLVER_AUTOMATIC = _amplpy_xpress_swig.XPRS_NLPSOLVER_AUTOMATIC
XPRS_NLPSOLVER_LOCAL = _amplpy_xpress_swig.XPRS_NLPSOLVER_LOCAL
XPRS_NLPSOLVER_GLOBAL = _amplpy_xpress_swig.XPRS_NLPSOLVER_GLOBAL
XPRS_SOLSTATUS_NOTFOUND = _amplpy_xpress_swig.XPRS_SOLSTATUS_NOTFOUND
XPRS_SOLSTATUS_OPTIMAL = _amplpy_xpress_swig.XPRS_SOLSTATUS_OPTIMAL
XPRS_SOLSTATUS_FEASIBLE = _amplpy_xpress_swig.XPRS_SOLSTATUS_FEASIBLE
XPRS_SOLSTATUS_INFEASIBLE = _amplpy_xpress_swig.XPRS_SOLSTATUS_INFEASIBLE
XPRS_SOLSTATUS_UNBOUNDED = _amplpy_xpress_swig.XPRS_SOLSTATUS_UNBOUNDED
XPRS_SOLVESTATUS_UNSTARTED = _amplpy_xpress_swig.XPRS_SOLVESTATUS_UNSTARTED
XPRS_SOLVESTATUS_STOPPED = _amplpy_xpress_swig.XPRS_SOLVESTATUS_STOPPED
XPRS_SOLVESTATUS_FAILED = _amplpy_xpress_swig.XPRS_SOLVESTATUS_FAILED
XPRS_SOLVESTATUS_COMPLETED = _amplpy_xpress_swig.XPRS_SOLVESTATUS_COMPLETED
XPRS_LP_UNSTARTED = _amplpy_xpress_swig.XPRS_LP_UNSTARTED
XPRS_LP_OPTIMAL = _amplpy_xpress_swig.XPRS_LP_OPTIMAL
XPRS_LP_INFEAS = _amplpy_xpress_swig.XPRS_LP_INFEAS
XPRS_LP_CUTOFF = _amplpy_xpress_swig.XPRS_LP_CUTOFF
XPRS_LP_UNFINISHED = _amplpy_xpress_swig.XPRS_LP_UNFINISHED
XPRS_LP_UNBOUNDED = _amplpy_xpress_swig.XPRS_LP_UNBOUNDED
XPRS_LP_CUTOFF_IN_DUAL = _amplpy_xpress_swig.XPRS_LP_CUTOFF_IN_DUAL
XPRS_LP_UNSOLVED = _amplpy_xpress_swig.XPRS_LP_UNSOLVED
XPRS_LP_NONCONVEX = _amplpy_xpress_swig.XPRS_LP_NONCONVEX
XPRS_MIP_NOT_LOADED = _amplpy_xpress_swig.XPRS_MIP_NOT_LOADED
XPRS_MIP_LP_NOT_OPTIMAL = _amplpy_xpress_swig.XPRS_MIP_LP_NOT_OPTIMAL
XPRS_MIP_LP_OPTIMAL = _amplpy_xpress_swig.XPRS_MIP_LP_OPTIMAL
XPRS_MIP_NO_SOL_FOUND = _amplpy_xpress_swig.XPRS_MIP_NO_SOL_FOUND
XPRS_MIP_SOLUTION = _amplpy_xpress_swig.XPRS_MIP_SOLUTION
XPRS_MIP_INFEAS = _amplpy_xpress_swig.XPRS_MIP_INFEAS
XPRS_MIP_OPTIMAL = _amplpy_xpress_swig.XPRS_MIP_OPTIMAL
XPRS_MIP_UNBOUNDED = _amplpy_xpress_swig.XPRS_MIP_UNBOUNDED
XPRS_IIS_UNSTARTED = _amplpy_xpress_swig.XPRS_IIS_UNSTARTED
XPRS_IIS_FEASIBLE = _amplpy_xpress_swig.XPRS_IIS_FEASIBLE
XPRS_IIS_COMPLETED = _amplpy_xpress_swig.XPRS_IIS_COMPLETED
XPRS_IIS_UNFINISHED = _amplpy_xpress_swig.XPRS_IIS_UNFINISHED
XPRS_OPTIMIZETYPE_LP = _amplpy_xpress_swig.XPRS_OPTIMIZETYPE_LP
XPRS_OPTIMIZETYPE_MIP = _amplpy_xpress_swig.XPRS_OPTIMIZETYPE_MIP
XPRS_OPTIMIZETYPE_LOCAL = _amplpy_xpress_swig.XPRS_OPTIMIZETYPE_LOCAL
XPRS_OPTIMIZETYPE_GLOBAL = _amplpy_xpress_swig.XPRS_OPTIMIZETYPE_GLOBAL
XPRS_BAR_DEFAULT = _amplpy_xpress_swig.XPRS_BAR_DEFAULT
XPRS_BAR_MIN_DEGREE = _amplpy_xpress_swig.XPRS_BAR_MIN_DEGREE
XPRS_BAR_MIN_LOCAL_FILL = _amplpy_xpress_swig.XPRS_BAR_MIN_LOCAL_FILL
XPRS_BAR_NESTED_DISSECTION = _amplpy_xpress_swig.XPRS_BAR_NESTED_DISSECTION
XPRS_ALG_DEFAULT = _amplpy_xpress_swig.XPRS_ALG_DEFAULT
XPRS_ALG_DUAL = _amplpy_xpress_swig.XPRS_ALG_DUAL
XPRS_ALG_PRIMAL = _amplpy_xpress_swig.XPRS_ALG_PRIMAL
XPRS_ALG_BARRIER = _amplpy_xpress_swig.XPRS_ALG_BARRIER
XPRS_ALG_NETWORK = _amplpy_xpress_swig.XPRS_ALG_NETWORK
XPRS_STOP_NONE = _amplpy_xpress_swig.XPRS_STOP_NONE
XPRS_STOP_TIMELIMIT = _amplpy_xpress_swig.XPRS_STOP_TIMELIMIT
XPRS_STOP_CTRLC = _amplpy_xpress_swig.XPRS_STOP_CTRLC
XPRS_STOP_NODELIMIT = _amplpy_xpress_swig.XPRS_STOP_NODELIMIT
XPRS_STOP_ITERLIMIT = _amplpy_xpress_swig.XPRS_STOP_ITERLIMIT
XPRS_STOP_MIPGAP = _amplpy_xpress_swig.XPRS_STOP_MIPGAP
XPRS_STOP_SOLLIMIT = _amplpy_xpress_swig.XPRS_STOP_SOLLIMIT
XPRS_STOP_GENERICERROR = _amplpy_xpress_swig.XPRS_STOP_GENERICERROR
XPRS_STOP_MEMORYERROR = _amplpy_xpress_swig.XPRS_STOP_MEMORYERROR
XPRS_STOP_USER = _amplpy_xpress_swig.XPRS_STOP_USER
XPRS_STOP_SOLVECOMPLETE = _amplpy_xpress_swig.XPRS_STOP_SOLVECOMPLETE
XPRS_STOP_LICENSELOST = _amplpy_xpress_swig.XPRS_STOP_LICENSELOST
XPRS_STOP_NUMERICALERROR = _amplpy_xpress_swig.XPRS_STOP_NUMERICALERROR
XPRS_ANA_AUTOMATIC = _amplpy_xpress_swig.XPRS_ANA_AUTOMATIC
XPRS_ANA_NEVER = _amplpy_xpress_swig.XPRS_ANA_NEVER
XPRS_ANA_ALWAYS = _amplpy_xpress_swig.XPRS_ANA_ALWAYS
XPRS_BOOL_OFF = _amplpy_xpress_swig.XPRS_BOOL_OFF
XPRS_BOOL_ON = _amplpy_xpress_swig.XPRS_BOOL_ON
XPRS_BACKTRACKALG_BEST_ESTIMATE = _amplpy_xpress_swig.XPRS_BACKTRACKALG_BEST_ESTIMATE
XPRS_BACKTRACKALG_BEST_BOUND = _amplpy_xpress_swig.XPRS_BACKTRACKALG_BEST_BOUND
XPRS_BACKTRACKALG_DEEPEST_NODE = _amplpy_xpress_swig.XPRS_BACKTRACKALG_DEEPEST_NODE
XPRS_BACKTRACKALG_HIGHEST_NODE = _amplpy_xpress_swig.XPRS_BACKTRACKALG_HIGHEST_NODE
XPRS_BACKTRACKALG_EARLIEST_NODE = _amplpy_xpress_swig.XPRS_BACKTRACKALG_EARLIEST_NODE
XPRS_BACKTRACKALG_LATEST_NODE = _amplpy_xpress_swig.XPRS_BACKTRACKALG_LATEST_NODE
XPRS_BACKTRACKALG_RANDOM = _amplpy_xpress_swig.XPRS_BACKTRACKALG_RANDOM
XPRS_BACKTRACKALG_MIN_INFEAS = _amplpy_xpress_swig.XPRS_BACKTRACKALG_MIN_INFEAS
XPRS_BACKTRACKALG_BEST_ESTIMATE_MIN_INFEAS = _amplpy_xpress_swig.XPRS_BACKTRACKALG_BEST_ESTIMATE_MIN_INFEAS
XPRS_BACKTRACKALG_DEEPEST_BEST_ESTIMATE = _amplpy_xpress_swig.XPRS_BACKTRACKALG_DEEPEST_BEST_ESTIMATE
XPRS_BRANCH_MIN_EST_FIRST = _amplpy_xpress_swig.XPRS_BRANCH_MIN_EST_FIRST
XPRS_BRANCH_MAX_EST_FIRST = _amplpy_xpress_swig.XPRS_BRANCH_MAX_EST_FIRST
XPRS_ALG_PULL_CHOLESKY = _amplpy_xpress_swig.XPRS_ALG_PULL_CHOLESKY
XPRS_ALG_PUSH_CHOLESKY = _amplpy_xpress_swig.XPRS_ALG_PUSH_CHOLESKY
XPRS_XDRPBEFORE_CROSSOVER = _amplpy_xpress_swig.XPRS_XDRPBEFORE_CROSSOVER
XPRS_XDRPINSIDE_CROSSOVER = _amplpy_xpress_swig.XPRS_XDRPINSIDE_CROSSOVER
XPRS_XDRPAGGRESSIVE_BEFORE_CROSSOVER = _amplpy_xpress_swig.XPRS_XDRPAGGRESSIVE_BEFORE_CROSSOVER
XPRS_DUALGRADIENT_AUTOMATIC = _amplpy_xpress_swig.XPRS_DUALGRADIENT_AUTOMATIC
XPRS_DUALGRADIENT_DEVEX = _amplpy_xpress_swig.XPRS_DUALGRADIENT_DEVEX
XPRS_DUALGRADIENT_STEEPESTEDGE = _amplpy_xpress_swig.XPRS_DUALGRADIENT_STEEPESTEDGE
XPRS_DUALSTRATEGY_REMOVE_INFEAS_WITH_PRIMAL = _amplpy_xpress_swig.XPRS_DUALSTRATEGY_REMOVE_INFEAS_WITH_PRIMAL
XPRS_DUALSTRATEGY_REMOVE_INFEAS_WITH_DUAL = _amplpy_xpress_swig.XPRS_DUALSTRATEGY_REMOVE_INFEAS_WITH_DUAL
XPRS_FEASIBILITYPUMP_AUTOMATIC = _amplpy_xpress_swig.XPRS_FEASIBILITYPUMP_AUTOMATIC
XPRS_FEASIBILITYPUMP_NEVER = _amplpy_xpress_swig.XPRS_FEASIBILITYPUMP_NEVER
XPRS_FEASIBILITYPUMP_ALWAYS = _amplpy_xpress_swig.XPRS_FEASIBILITYPUMP_ALWAYS
XPRS_FEASIBILITYPUMP_LASTRESORT = _amplpy_xpress_swig.XPRS_FEASIBILITYPUMP_LASTRESORT
XPRS_HEURSEARCH_LOCAL_SEARCH_LARGE_NEIGHBOURHOOD = _amplpy_xpress_swig.XPRS_HEURSEARCH_LOCAL_SEARCH_LARGE_NEIGHBOURHOOD
XPRS_HEURSEARCH_LOCAL_SEARCH_NODE_NEIGHBOURHOOD = _amplpy_xpress_swig.XPRS_HEURSEARCH_LOCAL_SEARCH_NODE_NEIGHBOURHOOD
XPRS_HEURSEARCH_LOCAL_SEARCH_SOLUTION_NEIGHBOURHOOD = _amplpy_xpress_swig.XPRS_HEURSEARCH_LOCAL_SEARCH_SOLUTION_NEIGHBOURHOOD
XPRS_NODESELECTION_LOCAL_FIRST = _amplpy_xpress_swig.XPRS_NODESELECTION_LOCAL_FIRST
XPRS_NODESELECTION_BEST_FIRST = _amplpy_xpress_swig.XPRS_NODESELECTION_BEST_FIRST
XPRS_NODESELECTION_LOCAL_DEPTH_FIRST = _amplpy_xpress_swig.XPRS_NODESELECTION_LOCAL_DEPTH_FIRST
XPRS_NODESELECTION_BEST_FIRST_THEN_LOCAL_FIRST = _amplpy_xpress_swig.XPRS_NODESELECTION_BEST_FIRST_THEN_LOCAL_FIRST
XPRS_NODESELECTION_DEPTH_FIRST = _amplpy_xpress_swig.XPRS_NODESELECTION_DEPTH_FIRST
XPRS_OUTPUTLOG_NO_OUTPUT = _amplpy_xpress_swig.XPRS_OUTPUTLOG_NO_OUTPUT
XPRS_OUTPUTLOG_FULL_OUTPUT = _amplpy_xpress_swig.XPRS_OUTPUTLOG_FULL_OUTPUT
XPRS_OUTPUTLOG_ERRORS_AND_WARNINGS = _amplpy_xpress_swig.XPRS_OUTPUTLOG_ERRORS_AND_WARNINGS
XPRS_OUTPUTLOG_ERRORS = _amplpy_xpress_swig.XPRS_OUTPUTLOG_ERRORS
XPRS_PREPROBING_AUTOMATIC = _amplpy_xpress_swig.XPRS_PREPROBING_AUTOMATIC
XPRS_PREPROBING_DISABLED = _amplpy_xpress_swig.XPRS_PREPROBING_DISABLED
XPRS_PREPROBING_LIGHT = _amplpy_xpress_swig.XPRS_PREPROBING_LIGHT
XPRS_PREPROBING_FULL = _amplpy_xpress_swig.XPRS_PREPROBING_FULL
XPRS_PREPROBING_FULL_AND_REPEAT = _amplpy_xpress_swig.XPRS_PREPROBING_FULL_AND_REPEAT
XPRS_PRESOLVEOPS_SINGLETONCOLUMNREMOVAL = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_SINGLETONCOLUMNREMOVAL
XPRS_PRESOLVEOPS_SINGLETONROWREMOVAL = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_SINGLETONROWREMOVAL
XPRS_PRESOLVEOPS_FORCINGROWREMOVAL = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_FORCINGROWREMOVAL
XPRS_PRESOLVEOPS_DUALREDUCTIONS = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_DUALREDUCTIONS
XPRS_PRESOLVEOPS_REDUNDANTROWREMOVAL = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_REDUNDANTROWREMOVAL
XPRS_PRESOLVEOPS_DUPLICATECOLUMNREMOVAL = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_DUPLICATECOLUMNREMOVAL
XPRS_PRESOLVEOPS_DUPLICATEROWREMOVAL = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_DUPLICATEROWREMOVAL
XPRS_PRESOLVEOPS_STRONGDUALREDUCTIONS = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_STRONGDUALREDUCTIONS
XPRS_PRESOLVEOPS_VARIABLEELIMINATIONS = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_VARIABLEELIMINATIONS
XPRS_PRESOLVEOPS_NOIPREDUCTIONS = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_NOIPREDUCTIONS
XPRS_PRESOLVEOPS_NOGLOBALDOMAINCHANGE = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_NOGLOBALDOMAINCHANGE
XPRS_PRESOLVEOPS_NOADVANCEDIPREDUCTIONS = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_NOADVANCEDIPREDUCTIONS
XPRS_PRESOLVEOPS_LINEARLYDEPENDANTROWREMOVAL = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_LINEARLYDEPENDANTROWREMOVAL
XPRS_PRESOLVEOPS_NOINTEGERVARIABLEANDSOSDETECTION = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_NOINTEGERVARIABLEANDSOSDETECTION
XPRS_PRESOLVEOPS_NODUALREDONGLOBALS = _amplpy_xpress_swig.XPRS_PRESOLVEOPS_NODUALREDONGLOBALS
XPRS_PRESOLVESTATE_PROBLEMLOADED = _amplpy_xpress_swig.XPRS_PRESOLVESTATE_PROBLEMLOADED
XPRS_PRESOLVESTATE_PROBLEMLPPRESOLVED = _amplpy_xpress_swig.XPRS_PRESOLVESTATE_PROBLEMLPPRESOLVED
XPRS_PRESOLVESTATE_PROBLEMMIPPRESOLVED = _amplpy_xpress_swig.XPRS_PRESOLVESTATE_PROBLEMMIPPRESOLVED
XPRS_PRESOLVESTATE_SOLUTIONVALID = _amplpy_xpress_swig.XPRS_PRESOLVESTATE_SOLUTIONVALID
XPRS_MIPPRESOLVE_REDUCED_COST_FIXING = _amplpy_xpress_swig.XPRS_MIPPRESOLVE_REDUCED_COST_FIXING
XPRS_MIPPRESOLVE_LOGIC_PREPROCESSING = _amplpy_xpress_swig.XPRS_MIPPRESOLVE_LOGIC_PREPROCESSING
XPRS_MIPPRESOLVE_ALLOW_CHANGE_BOUNDS = _amplpy_xpress_swig.XPRS_MIPPRESOLVE_ALLOW_CHANGE_BOUNDS
XPRS_MIPPRESOLVE_DUAL_REDUCTIONS = _amplpy_xpress_swig.XPRS_MIPPRESOLVE_DUAL_REDUCTIONS
XPRS_MIPPRESOLVE_GLOBAL_COEFFICIENT_TIGHTENING = _amplpy_xpress_swig.XPRS_MIPPRESOLVE_GLOBAL_COEFFICIENT_TIGHTENING
XPRS_MIPPRESOLVE_OBJECTIVE_BASED_REDUCTIONS = _amplpy_xpress_swig.XPRS_MIPPRESOLVE_OBJECTIVE_BASED_REDUCTIONS
XPRS_MIPPRESOLVE_ALLOW_TREE_RESTART = _amplpy_xpress_swig.XPRS_MIPPRESOLVE_ALLOW_TREE_RESTART
XPRS_MIPPRESOLVE_SYMMETRY_REDUCTIONS = _amplpy_xpress_swig.XPRS_MIPPRESOLVE_SYMMETRY_REDUCTIONS
XPRS_PRESOLVE_NOPRIMALINFEASIBILITY = _amplpy_xpress_swig.XPRS_PRESOLVE_NOPRIMALINFEASIBILITY
XPRS_PRESOLVE_NONE = _amplpy_xpress_swig.XPRS_PRESOLVE_NONE
XPRS_PRESOLVE_DEFAULT = _amplpy_xpress_swig.XPRS_PRESOLVE_DEFAULT
XPRS_PRESOLVE_KEEPREDUNDANTBOUNDS = _amplpy_xpress_swig.XPRS_PRESOLVE_KEEPREDUNDANTBOUNDS
XPRS_PRICING_PARTIAL = _amplpy_xpress_swig.XPRS_PRICING_PARTIAL
XPRS_PRICING_DEFAULT = _amplpy_xpress_swig.XPRS_PRICING_DEFAULT
XPRS_PRICING_DEVEX = _amplpy_xpress_swig.XPRS_PRICING_DEVEX
XPRS_CUTSTRATEGY_DEFAULT = _amplpy_xpress_swig.XPRS_CUTSTRATEGY_DEFAULT
XPRS_CUTSTRATEGY_NONE = _amplpy_xpress_swig.XPRS_CUTSTRATEGY_NONE
XPRS_CUTSTRATEGY_CONSERVATIVE = _amplpy_xpress_swig.XPRS_CUTSTRATEGY_CONSERVATIVE
XPRS_CUTSTRATEGY_MODERATE = _amplpy_xpress_swig.XPRS_CUTSTRATEGY_MODERATE
XPRS_CUTSTRATEGY_AGGRESSIVE = _amplpy_xpress_swig.XPRS_CUTSTRATEGY_AGGRESSIVE
XPRS_VARSELECTION_AUTOMATIC = _amplpy_xpress_swig.XPRS_VARSELECTION_AUTOMATIC
XPRS_VARSELECTION_MIN_UPDOWN_PSEUDO_COSTS = _amplpy_xpress_swig.XPRS_VARSELECTION_MIN_UPDOWN_PSEUDO_COSTS
XPRS_VARSELECTION_SUM_UPDOWN_PSEUDO_COSTS = _amplpy_xpress_swig.XPRS_VARSELECTION_SUM_UPDOWN_PSEUDO_COSTS
XPRS_VARSELECTION_MAX_UPDOWN_PSEUDO_COSTS_PLUS_TWICE_MIN = _amplpy_xpress_swig.XPRS_VARSELECTION_MAX_UPDOWN_PSEUDO_COSTS_PLUS_TWICE_MIN
XPRS_VARSELECTION_MAX_UPDOWN_PSEUDO_COSTS = _amplpy_xpress_swig.XPRS_VARSELECTION_MAX_UPDOWN_PSEUDO_COSTS
XPRS_VARSELECTION_DOWN_PSEUDO_COST = _amplpy_xpress_swig.XPRS_VARSELECTION_DOWN_PSEUDO_COST
XPRS_VARSELECTION_UP_PSEUDO_COST = _amplpy_xpress_swig.XPRS_VARSELECTION_UP_PSEUDO_COST
XPRS_SCALING_ROW_SCALING = _amplpy_xpress_swig.XPRS_SCALING_ROW_SCALING
XPRS_SCALING_COLUMN_SCALING = _amplpy_xpress_swig.XPRS_SCALING_COLUMN_SCALING
XPRS_SCALING_ROW_SCALING_AGAIN = _amplpy_xpress_swig.XPRS_SCALING_ROW_SCALING_AGAIN
XPRS_SCALING_MAXIMUM = _amplpy_xpress_swig.XPRS_SCALING_MAXIMUM
XPRS_SCALING_CURTIS_REID = _amplpy_xpress_swig.XPRS_SCALING_CURTIS_REID
XPRS_SCALING_BY_MAX_ELEM_NOT_GEO_MEAN = _amplpy_xpress_swig.XPRS_SCALING_BY_MAX_ELEM_NOT_GEO_MEAN
XPRS_SCALING_BIGM = _amplpy_xpress_swig.XPRS_SCALING_BIGM
XPRS_SCALING_SIMPLEX_OBJECTIVE_SCALING = _amplpy_xpress_swig.XPRS_SCALING_SIMPLEX_OBJECTIVE_SCALING
XPRS_SCALING_IGNORE_QUADRATIC_ROW_PART = _amplpy_xpress_swig.XPRS_SCALING_IGNORE_QUADRATIC_ROW_PART
XPRS_SCALING_BEFORE_PRESOLVE = _amplpy_xpress_swig.XPRS_SCALING_BEFORE_PRESOLVE
XPRS_SCALING_NO_SCALING_ROWS_UP = _amplpy_xpress_swig.XPRS_SCALING_NO_SCALING_ROWS_UP
XPRS_SCALING_NO_SCALING_COLUMNS_DOWN = _amplpy_xpress_swig.XPRS_SCALING_NO_SCALING_COLUMNS_DOWN
XPRS_SCALING_DISABLE_GLOBAL_OBJECTIVE_SCALING = _amplpy_xpress_swig.XPRS_SCALING_DISABLE_GLOBAL_OBJECTIVE_SCALING
XPRS_SCALING_RHS_SCALING = _amplpy_xpress_swig.XPRS_SCALING_RHS_SCALING
XPRS_SCALING_NO_AGGRESSIVE_Q_SCALING = _amplpy_xpress_swig.XPRS_SCALING_NO_AGGRESSIVE_Q_SCALING
XPRS_SCALING_SLACK_SCALING = _amplpy_xpress_swig.XPRS_SCALING_SLACK_SCALING
XPRS_SCALING_RUIZ = _amplpy_xpress_swig.XPRS_SCALING_RUIZ
XPRS_SCALING_DOGLEG = _amplpy_xpress_swig.XPRS_SCALING_DOGLEG
XPRS_SCALING_BEFORE_AND_AFTER_PRESOLVE = _amplpy_xpress_swig.XPRS_SCALING_BEFORE_AND_AFTER_PRESOLVE
XPRS_CUTSELECT_CLIQUE = _amplpy_xpress_swig.XPRS_CUTSELECT_CLIQUE
XPRS_CUTSELECT_MIR = _amplpy_xpress_swig.XPRS_CUTSELECT_MIR
XPRS_CUTSELECT_COVER = _amplpy_xpress_swig.XPRS_CUTSELECT_COVER
XPRS_CUTSELECT_FLOWPATH = _amplpy_xpress_swig.XPRS_CUTSELECT_FLOWPATH
XPRS_CUTSELECT_IMPLICATION = _amplpy_xpress_swig.XPRS_CUTSELECT_IMPLICATION
XPRS_CUTSELECT_LIFT_AND_PROJECT = _amplpy_xpress_swig.XPRS_CUTSELECT_LIFT_AND_PROJECT
XPRS_CUTSELECT_DISABLE_CUT_ROWS = _amplpy_xpress_swig.XPRS_CUTSELECT_DISABLE_CUT_ROWS
XPRS_CUTSELECT_GUB_COVER = _amplpy_xpress_swig.XPRS_CUTSELECT_GUB_COVER
XPRS_CUTSELECT_DEFAULT = _amplpy_xpress_swig.XPRS_CUTSELECT_DEFAULT
XPRS_REFINEOPS_LPOPTIMAL = _amplpy_xpress_swig.XPRS_REFINEOPS_LPOPTIMAL
XPRS_REFINEOPS_MIPSOLUTION = _amplpy_xpress_swig.XPRS_REFINEOPS_MIPSOLUTION
XPRS_REFINEOPS_MIPOPTIMAL = _amplpy_xpress_swig.XPRS_REFINEOPS_MIPOPTIMAL
XPRS_REFINEOPS_MIPNODELP = _amplpy_xpress_swig.XPRS_REFINEOPS_MIPNODELP
XPRS_REFINEOPS_LPPRESOLVE = _amplpy_xpress_swig.XPRS_REFINEOPS_LPPRESOLVE
XPRS_REFINEOPS_ITERATIVEREFINER = _amplpy_xpress_swig.XPRS_REFINEOPS_ITERATIVEREFINER
XPRS_REFINEOPS_REFINERPRECISION = _amplpy_xpress_swig.XPRS_REFINEOPS_REFINERPRECISION
XPRS_REFINEOPS_REFINERUSEPRIMAL = _amplpy_xpress_swig.XPRS_REFINEOPS_REFINERUSEPRIMAL
XPRS_REFINEOPS_REFINERUSEDUAL = _amplpy_xpress_swig.XPRS_REFINEOPS_REFINERUSEDUAL
XPRS_REFINEOPS_MIPFIXGLOBALS = _amplpy_xpress_swig.XPRS_REFINEOPS_MIPFIXGLOBALS
XPRS_REFINEOPS_MIPFIXGLOBALSTARGET = _amplpy_xpress_swig.XPRS_REFINEOPS_MIPFIXGLOBALSTARGET
XPRS_DUALIZEOPS_SWITCHALGORITHM = _amplpy_xpress_swig.XPRS_DUALIZEOPS_SWITCHALGORITHM
XPRS_TREEDIAGNOSTICS_MEMORY_USAGE_SUMMARIES = _amplpy_xpress_swig.XPRS_TREEDIAGNOSTICS_MEMORY_USAGE_SUMMARIES
XPRS_TREEDIAGNOSTICS_MEMORY_SAVED_REPORTS = _amplpy_xpress_swig.XPRS_TREEDIAGNOSTICS_MEMORY_SAVED_REPORTS
XPRS_BARPRESOLVEOPS_STANDARD_PRESOLVE = _amplpy_xpress_swig.XPRS_BARPRESOLVEOPS_STANDARD_PRESOLVE
XPRS_BARPRESOLVEOPS_EXTRA_BARRIER_PRESOLVE = _amplpy_xpress_swig.XPRS_BARPRESOLVEOPS_EXTRA_BARRIER_PRESOLVE
XPRS_MIPRESTART_DEFAULT = _amplpy_xpress_swig.XPRS_MIPRESTART_DEFAULT
XPRS_MIPRESTART_OFF = _amplpy_xpress_swig.XPRS_MIPRESTART_OFF
XPRS_MIPRESTART_MODERATE = _amplpy_xpress_swig.XPRS_MIPRESTART_MODERATE
XPRS_MIPRESTART_AGGRESSIVE = _amplpy_xpress_swig.XPRS_MIPRESTART_AGGRESSIVE
XPRS_PRECOEFELIM_DISABLED = _amplpy_xpress_swig.XPRS_PRECOEFELIM_DISABLED
XPRS_PRECOEFELIM_AGGRESSIVE = _amplpy_xpress_swig.XPRS_PRECOEFELIM_AGGRESSIVE
XPRS_PRECOEFELIM_CAUTIOUS = _amplpy_xpress_swig.XPRS_PRECOEFELIM_CAUTIOUS
XPRS_PREDOMROW_AUTOMATIC = _amplpy_xpress_swig.XPRS_PREDOMROW_AUTOMATIC
XPRS_PREDOMROW_DISABLED = _amplpy_xpress_swig.XPRS_PREDOMROW_DISABLED
XPRS_PREDOMROW_CAUTIOUS = _amplpy_xpress_swig.XPRS_PREDOMROW_CAUTIOUS
XPRS_PREDOMROW_MEDIUM = _amplpy_xpress_swig.XPRS_PREDOMROW_MEDIUM
XPRS_PREDOMROW_AGGRESSIVE = _amplpy_xpress_swig.XPRS_PREDOMROW_AGGRESSIVE
XPRS_PREDOMCOL_AUTOMATIC = _amplpy_xpress_swig.XPRS_PREDOMCOL_AUTOMATIC
XPRS_PREDOMCOL_DISABLED = _amplpy_xpress_swig.XPRS_PREDOMCOL_DISABLED
XPRS_PREDOMCOL_CAUTIOUS = _amplpy_xpress_swig.XPRS_PREDOMCOL_CAUTIOUS
XPRS_PREDOMCOL_AGGRESSIVE = _amplpy_xpress_swig.XPRS_PREDOMCOL_AGGRESSIVE
XPRS_PRIMALUNSHIFT_ALLOW_DUAL_UNSHIFT = _amplpy_xpress_swig.XPRS_PRIMALUNSHIFT_ALLOW_DUAL_UNSHIFT
XPRS_PRIMALUNSHIFT_NO_DUAL_UNSHIFT = _amplpy_xpress_swig.XPRS_PRIMALUNSHIFT_NO_DUAL_UNSHIFT
XPRS_REPAIRINDEFINITEQ_REPAIR_IF_POSSIBLE = _amplpy_xpress_swig.XPRS_REPAIRINDEFINITEQ_REPAIR_IF_POSSIBLE
XPRS_REPAIRINDEFINITEQ_NO_REPAIR = _amplpy_xpress_swig.XPRS_REPAIRINDEFINITEQ_NO_REPAIR
XPRS_OBJ_MINIMIZE = _amplpy_xpress_swig.XPRS_OBJ_MINIMIZE
XPRS_OBJ_MAXIMIZE = _amplpy_xpress_swig.XPRS_OBJ_MAXIMIZE
XPRS_TYPE_NOTDEFINED = _amplpy_xpress_swig.XPRS_TYPE_NOTDEFINED
XPRS_TYPE_INT = _amplpy_xpress_swig.XPRS_TYPE_INT
XPRS_TYPE_INT64 = _amplpy_xpress_swig.XPRS_TYPE_INT64
XPRS_TYPE_DOUBLE = _amplpy_xpress_swig.XPRS_TYPE_DOUBLE
XPRS_TYPE_STRING = _amplpy_xpress_swig.XPRS_TYPE_STRING
XPRS_QCONVEXITY_UNKNOWN = _amplpy_xpress_swig.XPRS_QCONVEXITY_UNKNOWN
XPRS_QCONVEXITY_NONCONVEX = _amplpy_xpress_swig.XPRS_QCONVEXITY_NONCONVEX
XPRS_QCONVEXITY_CONVEX = _amplpy_xpress_swig.XPRS_QCONVEXITY_CONVEX
XPRS_QCONVEXITY_REPAIRABLE = _amplpy_xpress_swig.XPRS_QCONVEXITY_REPAIRABLE
XPRS_QCONVEXITY_CONVEXCONE = _amplpy_xpress_swig.XPRS_QCONVEXITY_CONVEXCONE
XPRS_QCONVEXITY_CONECONVERTABLE = _amplpy_xpress_swig.XPRS_QCONVEXITY_CONECONVERTABLE
XPRS_SOLINFO_ABSPRIMALINFEAS = _amplpy_xpress_swig.XPRS_SOLINFO_ABSPRIMALINFEAS
XPRS_SOLINFO_RELPRIMALINFEAS = _amplpy_xpress_swig.XPRS_SOLINFO_RELPRIMALINFEAS
XPRS_SOLINFO_ABSDUALINFEAS = _amplpy_xpress_swig.XPRS_SOLINFO_ABSDUALINFEAS
XPRS_SOLINFO_RELDUALINFEAS = _amplpy_xpress_swig.XPRS_SOLINFO_RELDUALINFEAS
XPRS_SOLINFO_MAXMIPFRACTIONAL = _amplpy_xpress_swig.XPRS_SOLINFO_MAXMIPFRACTIONAL
XPRS_SOLINFO_ABSMIPINFEAS = _amplpy_xpress_swig.XPRS_SOLINFO_ABSMIPINFEAS
XPRS_SOLINFO_RELMIPINFEAS = _amplpy_xpress_swig.XPRS_SOLINFO_RELMIPINFEAS
XPRS_TUNERMODE_AUTOMATIC = _amplpy_xpress_swig.XPRS_TUNERMODE_AUTOMATIC
XPRS_TUNERMODE_OFF = _amplpy_xpress_swig.XPRS_TUNERMODE_OFF
XPRS_TUNERMODE_ON = _amplpy_xpress_swig.XPRS_TUNERMODE_ON
XPRS_TUNERMETHOD_AUTOMATIC = _amplpy_xpress_swig.XPRS_TUNERMETHOD_AUTOMATIC
XPRS_TUNERMETHOD_LPQUICK = _amplpy_xpress_swig.XPRS_TUNERMETHOD_LPQUICK
XPRS_TUNERMETHOD_MIPQUICK = _amplpy_xpress_swig.XPRS_TUNERMETHOD_MIPQUICK
XPRS_TUNERMETHOD_MIPCOMPREHENSIVE = _amplpy_xpress_swig.XPRS_TUNERMETHOD_MIPCOMPREHENSIVE
XPRS_TUNERMETHOD_MIPROOTFOCUS = _amplpy_xpress_swig.XPRS_TUNERMETHOD_MIPROOTFOCUS
XPRS_TUNERMETHOD_MIPTREEFOCUS = _amplpy_xpress_swig.XPRS_TUNERMETHOD_MIPTREEFOCUS
XPRS_TUNERMETHOD_MIPSIMPLE = _amplpy_xpress_swig.XPRS_TUNERMETHOD_MIPSIMPLE
XPRS_TUNERMETHOD_SLPQUICK = _amplpy_xpress_swig.XPRS_TUNERMETHOD_SLPQUICK
XPRS_TUNERMETHOD_MISLPQUICK = _amplpy_xpress_swig.XPRS_TUNERMETHOD_MISLPQUICK
XPRS_TUNERMETHOD_MIPHEURISTICS = _amplpy_xpress_swig.XPRS_TUNERMETHOD_MIPHEURISTICS
XPRS_TUNERMETHOD_GLOBALQUICK = _amplpy_xpress_swig.XPRS_TUNERMETHOD_GLOBALQUICK
XPRS_TUNERMETHOD_LPNUMERICS = _amplpy_xpress_swig.XPRS_TUNERMETHOD_LPNUMERICS
XPRS_TUNERTARGET_AUTOMATIC = _amplpy_xpress_swig.XPRS_TUNERTARGET_AUTOMATIC
XPRS_TUNERTARGET_TIMEGAP = _amplpy_xpress_swig.XPRS_TUNERTARGET_TIMEGAP
XPRS_TUNERTARGET_TIMEBOUND = _amplpy_xpress_swig.XPRS_TUNERTARGET_TIMEBOUND
XPRS_TUNERTARGET_TIMEOBJVAL = _amplpy_xpress_swig.XPRS_TUNERTARGET_TIMEOBJVAL
XPRS_TUNERTARGET_INTEGRAL = _amplpy_xpress_swig.XPRS_TUNERTARGET_INTEGRAL
XPRS_TUNERTARGET_SLPTIME = _amplpy_xpress_swig.XPRS_TUNERTARGET_SLPTIME
XPRS_TUNERTARGET_SLPOBJVAL = _amplpy_xpress_swig.XPRS_TUNERTARGET_SLPOBJVAL
XPRS_TUNERTARGET_SLPVALIDATION = _amplpy_xpress_swig.XPRS_TUNERTARGET_SLPVALIDATION
XPRS_TUNERTARGET_GAP = _amplpy_xpress_swig.XPRS_TUNERTARGET_GAP
XPRS_TUNERTARGET_BOUND = _amplpy_xpress_swig.XPRS_TUNERTARGET_BOUND
XPRS_TUNERTARGET_OBJVAL = _amplpy_xpress_swig.XPRS_TUNERTARGET_OBJVAL
XPRS_TUNERTARGET_PRIMALINTEGRAL = _amplpy_xpress_swig.XPRS_TUNERTARGET_PRIMALINTEGRAL
XPRS_TUNERHISTORY_IGNORE = _amplpy_xpress_swig.XPRS_TUNERHISTORY_IGNORE
XPRS_TUNERHISTORY_APPEND = _amplpy_xpress_swig.XPRS_TUNERHISTORY_APPEND
XPRS_TUNERHISTORY_REUSE = _amplpy_xpress_swig.XPRS_TUNERHISTORY_REUSE
XPRS_TUNERROOTALG_DUAL = _amplpy_xpress_swig.XPRS_TUNERROOTALG_DUAL
XPRS_TUNERROOTALG_PRIMAL = _amplpy_xpress_swig.XPRS_TUNERROOTALG_PRIMAL
XPRS_TUNERROOTALG_BARRIER = _amplpy_xpress_swig.XPRS_TUNERROOTALG_BARRIER
XPRS_TUNERROOTALG_NETWORK = _amplpy_xpress_swig.XPRS_TUNERROOTALG_NETWORK
XPRS_LPFLAGS_DUAL = _amplpy_xpress_swig.XPRS_LPFLAGS_DUAL
XPRS_LPFLAGS_PRIMAL = _amplpy_xpress_swig.XPRS_LPFLAGS_PRIMAL
XPRS_LPFLAGS_BARRIER = _amplpy_xpress_swig.XPRS_LPFLAGS_BARRIER
XPRS_LPFLAGS_NETWORK = _amplpy_xpress_swig.XPRS_LPFLAGS_NETWORK
XPRS_GENCONS_MAX = _amplpy_xpress_swig.XPRS_GENCONS_MAX
XPRS_GENCONS_MIN = _amplpy_xpress_swig.XPRS_GENCONS_MIN
XPRS_GENCONS_AND = _amplpy_xpress_swig.XPRS_GENCONS_AND
XPRS_GENCONS_OR = _amplpy_xpress_swig.XPRS_GENCONS_OR
XPRS_GENCONS_ABS = _amplpy_xpress_swig.XPRS_GENCONS_ABS
XPRS_CLAMPING_PRIMAL = _amplpy_xpress_swig.XPRS_CLAMPING_PRIMAL
XPRS_CLAMPING_DUAL = _amplpy_xpress_swig.XPRS_CLAMPING_DUAL
XPRS_CLAMPING_SLACKS = _amplpy_xpress_swig.XPRS_CLAMPING_SLACKS
XPRS_CLAMPING_RDJ = _amplpy_xpress_swig.XPRS_CLAMPING_RDJ
XPRS_ROWFLAG_QUADRATIC = _amplpy_xpress_swig.XPRS_ROWFLAG_QUADRATIC
XPRS_ROWFLAG_DELAYED = _amplpy_xpress_swig.XPRS_ROWFLAG_DELAYED
XPRS_ROWFLAG_MODELCUT = _amplpy_xpress_swig.XPRS_ROWFLAG_MODELCUT
XPRS_ROWFLAG_INDICATOR = _amplpy_xpress_swig.XPRS_ROWFLAG_INDICATOR
XPRS_ROWFLAG_NONLINEAR = _amplpy_xpress_swig.XPRS_ROWFLAG_NONLINEAR
XPRS_OBJECTIVE_PRIORITY = _amplpy_xpress_swig.XPRS_OBJECTIVE_PRIORITY
XPRS_OBJECTIVE_WEIGHT = _amplpy_xpress_swig.XPRS_OBJECTIVE_WEIGHT
XPRS_OBJECTIVE_ABSTOL = _amplpy_xpress_swig.XPRS_OBJECTIVE_ABSTOL
XPRS_OBJECTIVE_RELTOL = _amplpy_xpress_swig.XPRS_OBJECTIVE_RELTOL
XPRS_OBJECTIVE_RHS = _amplpy_xpress_swig.XPRS_OBJECTIVE_RHS
XPRS_ALLOW_COMPUTE_ALWAYS = _amplpy_xpress_swig.XPRS_ALLOW_COMPUTE_ALWAYS
XPRS_ALLOW_COMPUTE_NEVER = _amplpy_xpress_swig.XPRS_ALLOW_COMPUTE_NEVER
XPRS_ALLOW_COMPUTE_DEFAULT = _amplpy_xpress_swig.XPRS_ALLOW_COMPUTE_DEFAULT
XPRS_COMPUTELOG_NEVER = _amplpy_xpress_swig.XPRS_COMPUTELOG_NEVER
XPRS_COMPUTELOG_REALTIME = _amplpy_xpress_swig.XPRS_COMPUTELOG_REALTIME
XPRS_COMPUTELOG_ONCOMPLETION = _amplpy_xpress_swig.XPRS_COMPUTELOG_ONCOMPLETION
XPRS_COMPUTELOG_ONERROR = _amplpy_xpress_swig.XPRS_COMPUTELOG_ONERROR
XPRS_NAMES_ROW = _amplpy_xpress_swig.XPRS_NAMES_ROW
XPRS_NAMES_COLUMN = _amplpy_xpress_swig.XPRS_NAMES_COLUMN
XPRS_NAMES_SET = _amplpy_xpress_swig.XPRS_NAMES_SET
XPRS_NAMES_PWLCONS = _amplpy_xpress_swig.XPRS_NAMES_PWLCONS
XPRS_NAMES_GENCONS = _amplpy_xpress_swig.XPRS_NAMES_GENCONS
XPRS_NAMES_OBJECTIVE = _amplpy_xpress_swig.XPRS_NAMES_OBJECTIVE
XPRS_NAMES_USERFUNC = _amplpy_xpress_swig.XPRS_NAMES_USERFUNC
XPRS_NAMES_INTERNALFUNC = _amplpy_xpress_swig.XPRS_NAMES_INTERNALFUNC
XPRS_NAMES_USERFUNCNOCASE = _amplpy_xpress_swig.XPRS_NAMES_USERFUNCNOCASE
XPRS_NAMES_INTERNALFUNCNOCASE = _amplpy_xpress_swig.XPRS_NAMES_INTERNALFUNCNOCASE
XPRS_GLOBALBOUNDINGBOX_NOT_APPLIED = _amplpy_xpress_swig.XPRS_GLOBALBOUNDINGBOX_NOT_APPLIED
XPRS_GLOBALBOUNDINGBOX_ORIGINAL = _amplpy_xpress_swig.XPRS_GLOBALBOUNDINGBOX_ORIGINAL
XPRS_GLOBALBOUNDINGBOX_AUXILIARY = _amplpy_xpress_swig.XPRS_GLOBALBOUNDINGBOX_AUXILIARY
XPRS_MULTIOBJOPS_ENABLED = _amplpy_xpress_swig.XPRS_MULTIOBJOPS_ENABLED
XPRS_MULTIOBJOPS_PRESOLVE = _amplpy_xpress_swig.XPRS_MULTIOBJOPS_PRESOLVE
XPRS_MULTIOBJOPS_RCFIXING = _amplpy_xpress_swig.XPRS_MULTIOBJOPS_RCFIXING
XPRS_IISOPS_BINARY = _amplpy_xpress_swig.XPRS_IISOPS_BINARY
XPRS_IISOPS_ZEROLOWER = _amplpy_xpress_swig.XPRS_IISOPS_ZEROLOWER
XPRS_IISOPS_FIXEDVAR = _amplpy_xpress_swig.XPRS_IISOPS_FIXEDVAR
XPRS_IISOPS_BOUND = _amplpy_xpress_swig.XPRS_IISOPS_BOUND
XPRS_IISOPS_GENINTEGRALITY = _amplpy_xpress_swig.XPRS_IISOPS_GENINTEGRALITY
XPRS_IISOPS_INTEGRALITY = _amplpy_xpress_swig.XPRS_IISOPS_INTEGRALITY
XPRS_IISOPS_VARIABLE = _amplpy_xpress_swig.XPRS_IISOPS_VARIABLE
XPRS_IISOPS_EQUALITY = _amplpy_xpress_swig.XPRS_IISOPS_EQUALITY
XPRS_IISOPS_GENERAL = _amplpy_xpress_swig.XPRS_IISOPS_GENERAL
XPRS_IISOPS_PWL = _amplpy_xpress_swig.XPRS_IISOPS_PWL
XPRS_IISOPS_SET = _amplpy_xpress_swig.XPRS_IISOPS_SET
XPRS_IISOPS_INDICATOR = _amplpy_xpress_swig.XPRS_IISOPS_INDICATOR
XPRS_IISOPS_DELAYED = _amplpy_xpress_swig.XPRS_IISOPS_DELAYED
XPRS_IISOPS_CONSTRAINT = _amplpy_xpress_swig.XPRS_IISOPS_CONSTRAINT
XPRS_ISUSERSOLUTION = _amplpy_xpress_swig.XPRS_ISUSERSOLUTION
XPRS_ISREPROCESSEDUSERSOLUTION = _amplpy_xpress_swig.XPRS_ISREPROCESSEDUSERSOLUTION

def XPRScopycallbacks(dest, src):
    return _amplpy_xpress_swig.XPRScopycallbacks(dest, src)

def XPRScopycontrols(dest, src):
    return _amplpy_xpress_swig.XPRScopycontrols(dest, src)

def XPRScopyprob(dest, src, name):
    return _amplpy_xpress_swig.XPRScopyprob(dest, src, name)

def XPRScreateprob(p_prob):
    return _amplpy_xpress_swig.XPRScreateprob(p_prob)

def XPRSdestroyprob(prob):
    return _amplpy_xpress_swig.XPRSdestroyprob(prob)

def XPRSinit(path):
    return _amplpy_xpress_swig.XPRSinit(path)

def XPRSfree():
    return _amplpy_xpress_swig.XPRSfree()

def XPRSgetlicerrmsg(buffer, maxbytes):
    return _amplpy_xpress_swig.XPRSgetlicerrmsg(buffer, maxbytes)

def XPRSlicense(p_i, p_c):
    return _amplpy_xpress_swig.XPRSlicense(p_i, p_c)

def XPRSbeginlicensing(p_notyet):
    return _amplpy_xpress_swig.XPRSbeginlicensing(p_notyet)

def XPRSendlicensing():
    return _amplpy_xpress_swig.XPRSendlicensing()

def XPRSsetcheckedmode(checkedmode):
    return _amplpy_xpress_swig.XPRSsetcheckedmode(checkedmode)

def XPRSgetcheckedmode(p_checkedmode):
    return _amplpy_xpress_swig.XPRSgetcheckedmode(p_checkedmode)

def XPRSgetbanner(banner):
    return _amplpy_xpress_swig.XPRSgetbanner(banner)

def XPRSgetversion(version):
    return _amplpy_xpress_swig.XPRSgetversion(version)

def XPRSgetversionnumbers(p_major, p_minor, p_build):
    return _amplpy_xpress_swig.XPRSgetversionnumbers(p_major, p_minor, p_build)

def XPRSgetdaysleft(p_daysleft):
    return _amplpy_xpress_swig.XPRSgetdaysleft(p_daysleft)

def XPRSfeaturequery(feature, p_status):
    return _amplpy_xpress_swig.XPRSfeaturequery(feature, p_status)

def XPRSsetprobname(prob, probname):
    return _amplpy_xpress_swig.XPRSsetprobname(prob, probname)

def XPRSsetlogfile(prob, filename):
    return _amplpy_xpress_swig.XPRSsetlogfile(prob, filename)

def XPRSsetdefaultcontrol(prob, control):
    return _amplpy_xpress_swig.XPRSsetdefaultcontrol(prob, control)

def XPRSsetdefaults(prob):
    return _amplpy_xpress_swig.XPRSsetdefaults(prob)

def XPRSinterrupt(prob, reason):
    return _amplpy_xpress_swig.XPRSinterrupt(prob, reason)

def XPRSgetprobname(prob, name):
    return _amplpy_xpress_swig.XPRSgetprobname(prob, name)

def XPRSsetintcontrol(prob, control, value):
    return _amplpy_xpress_swig.XPRSsetintcontrol(prob, control, value)

def XPRSsetdblcontrol(prob, control, value):
    return _amplpy_xpress_swig.XPRSsetdblcontrol(prob, control, value)

def XPRSsetstrcontrol(prob, control, value):
    return _amplpy_xpress_swig.XPRSsetstrcontrol(prob, control, value)

def XPRSgetintcontrol(prob, control, p_value):
    return _amplpy_xpress_swig.XPRSgetintcontrol(prob, control, p_value)

def XPRSgetdblcontrol(prob, control, p_value):
    return _amplpy_xpress_swig.XPRSgetdblcontrol(prob, control, p_value)

def XPRSgetstrcontrol(prob, control, value):
    return _amplpy_xpress_swig.XPRSgetstrcontrol(prob, control, value)

def XPRSgetstringcontrol(prob, control, value, maxbytes, p_nbytes):
    return _amplpy_xpress_swig.XPRSgetstringcontrol(prob, control, value, maxbytes, p_nbytes)

def XPRSgetintattrib(prob, attrib, p_value):
    return _amplpy_xpress_swig.XPRSgetintattrib(prob, attrib, p_value)

def XPRSgetstrattrib(prob, attrib, value):
    return _amplpy_xpress_swig.XPRSgetstrattrib(prob, attrib, value)

def XPRSgetstringattrib(prob, attrib, value, maxbytes, p_nbytes):
    return _amplpy_xpress_swig.XPRSgetstringattrib(prob, attrib, value, maxbytes, p_nbytes)

def XPRSgetdblattrib(prob, attrib, p_value):
    return _amplpy_xpress_swig.XPRSgetdblattrib(prob, attrib, p_value)

def XPRSgetcontrolinfo(prob, name, p_id, p_type):
    return _amplpy_xpress_swig.XPRSgetcontrolinfo(prob, name, p_id, p_type)

def XPRSgetattribinfo(prob, name, p_id, p_type):
    return _amplpy_xpress_swig.XPRSgetattribinfo(prob, name, p_id, p_type)

def XPRSsetobjintcontrol(prob, objidx, control, value):
    return _amplpy_xpress_swig.XPRSsetobjintcontrol(prob, objidx, control, value)

def XPRSsetobjdblcontrol(prob, objidx, control, value):
    return _amplpy_xpress_swig.XPRSsetobjdblcontrol(prob, objidx, control, value)

def XPRSgetobjintcontrol(prob, objidx, control, p_value):
    return _amplpy_xpress_swig.XPRSgetobjintcontrol(prob, objidx, control, p_value)

def XPRSgetobjdblcontrol(prob, objidx, control, p_value):
    return _amplpy_xpress_swig.XPRSgetobjdblcontrol(prob, objidx, control, p_value)

def XPRSgetobjintattrib(prob, solveidx, attrib, p_value):
    return _amplpy_xpress_swig.XPRSgetobjintattrib(prob, solveidx, attrib, p_value)

def XPRSgetobjdblattrib(prob, solveidx, attrib, p_value):
    return _amplpy_xpress_swig.XPRSgetobjdblattrib(prob, solveidx, attrib, p_value)

def XPRSgetqobj(prob, objqcol1, objqcol2, p_objqcoef):
    return _amplpy_xpress_swig.XPRSgetqobj(prob, objqcol1, objqcol2, p_objqcoef)

def XPRSreadprob(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSreadprob(prob, filename, flags)

def XPRSloadlp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub):
    return _amplpy_xpress_swig.XPRSloadlp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub)

def XPRSloadqp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef):
    return _amplpy_xpress_swig.XPRSloadqp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef)

def XPRSloadmiqp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval):
    return _amplpy_xpress_swig.XPRSloadmiqp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval)

def XPRSfixmipentities(prob, options):
    return _amplpy_xpress_swig.XPRSfixmipentities(prob, options)

def XPRSloadmodelcuts(prob, nrows, rowind):
    return _amplpy_xpress_swig.XPRSloadmodelcuts(prob, nrows, rowind)

def XPRSloaddelayedrows(prob, nrows, rowind):
    return _amplpy_xpress_swig.XPRSloaddelayedrows(prob, nrows, rowind)

def XPRSloaddirs(prob, ndirs, colind, priority, dir, uppseudo, downpseudo):
    return _amplpy_xpress_swig.XPRSloaddirs(prob, ndirs, colind, priority, dir, uppseudo, downpseudo)

def XPRSloadbranchdirs(prob, ncols, colind, dir):
    return _amplpy_xpress_swig.XPRSloadbranchdirs(prob, ncols, colind, dir)

def XPRSloadpresolvedirs(prob, ndirs, colind, priority, dir, uppseudo, downpseudo):
    return _amplpy_xpress_swig.XPRSloadpresolvedirs(prob, ndirs, colind, priority, dir, uppseudo, downpseudo)

def XPRSloadmip(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval):
    return _amplpy_xpress_swig.XPRSloadmip(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval)

def XPRSaddnames(prob, type, names, first, last):
    return _amplpy_xpress_swig.XPRSaddnames(prob, type, names, first, last)

def XPRSaddsetnames(prob, names, first, last):
    return _amplpy_xpress_swig.XPRSaddsetnames(prob, names, first, last)

def XPRSscale(prob, rowscale, colscale):
    return _amplpy_xpress_swig.XPRSscale(prob, rowscale, colscale)

def XPRSreaddirs(prob, filename):
    return _amplpy_xpress_swig.XPRSreaddirs(prob, filename)

def XPRSwritedirs(prob, filename):
    return _amplpy_xpress_swig.XPRSwritedirs(prob, filename)

def XPRSunloadprob(prob):
    return _amplpy_xpress_swig.XPRSunloadprob(prob)

def XPRSsetindicators(prob, nrows, rowind, colind, complement):
    return _amplpy_xpress_swig.XPRSsetindicators(prob, nrows, rowind, colind, complement)

def XPRSaddpwlcons(prob, npwls, npoints, colind, resultant, start, xval, yval):
    return _amplpy_xpress_swig.XPRSaddpwlcons(prob, npwls, npoints, colind, resultant, start, xval, yval)

def XPRSgetpwlcons(prob, colind, resultant, start, xval, yval, maxpoints, p_npoints, first, last):
    return _amplpy_xpress_swig.XPRSgetpwlcons(prob, colind, resultant, start, xval, yval, maxpoints, p_npoints, first, last)

def XPRSaddgencons(prob, ncons, ncols, nvals, contype, resultant, colstart, colind, valstart, val):
    return _amplpy_xpress_swig.XPRSaddgencons(prob, ncons, ncols, nvals, contype, resultant, colstart, colind, valstart, val)

def XPRSgetgencons(prob, contype, resultant, colstart, colind, maxcols, p_ncols, valstart, val, maxvals, p_nvals, first, last):
    return _amplpy_xpress_swig.XPRSgetgencons(prob, contype, resultant, colstart, colind, maxcols, p_ncols, valstart, val, maxvals, p_nvals, first, last)

def XPRSdelpwlcons(prob, npwls, pwlind):
    return _amplpy_xpress_swig.XPRSdelpwlcons(prob, npwls, pwlind)

def XPRSdelgencons(prob, ncons, conind):
    return _amplpy_xpress_swig.XPRSdelgencons(prob, ncons, conind)

def XPRSdumpcontrols(prob):
    return _amplpy_xpress_swig.XPRSdumpcontrols(prob)

def XPRSgetindicators(prob, colind, complement, first, last):
    return _amplpy_xpress_swig.XPRSgetindicators(prob, colind, complement, first, last)

def XPRSdelindicators(prob, first, last):
    return _amplpy_xpress_swig.XPRSdelindicators(prob, first, last)

def XPRSgetdirs(prob, p_ndir, indices, prios, branchdirs, uppseudo, downpseudo):
    return _amplpy_xpress_swig.XPRSgetdirs(prob, p_ndir, indices, prios, branchdirs, uppseudo, downpseudo)

def XPRSgetscale(prob, rowscale, colscale):
    return _amplpy_xpress_swig.XPRSgetscale(prob, rowscale, colscale)

def XPRSlpoptimize(prob, flags):
    return _amplpy_xpress_swig.XPRSlpoptimize(prob, flags)

def XPRSmipoptimize(prob, flags):
    return _amplpy_xpress_swig.XPRSmipoptimize(prob, flags)

def XPRSoptimize(prob, flags, solvestatus, solstatus):
    return _amplpy_xpress_swig.XPRSoptimize(prob, flags, solvestatus, solstatus)

def XPRSreadslxsol(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSreadslxsol(prob, filename, flags)

def XPRSalter(prob, filename):
    return _amplpy_xpress_swig.XPRSalter(prob, filename)

def XPRSreadbasis(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSreadbasis(prob, filename, flags)

def XPRSreadbinsol(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSreadbinsol(prob, filename, flags)

def XPRSgetinfeas(prob, p_nprimalcols, p_nprimalrows, p_ndualrows, p_ndualcols, x, slack, duals, djs):
    return _amplpy_xpress_swig.XPRSgetinfeas(prob, p_nprimalcols, p_nprimalrows, p_ndualrows, p_ndualcols, x, slack, duals, djs)

def XPRSgetscaledinfeas(prob, p_nprimalcols, p_nprimalrows, p_ndualrows, p_ndualcols, x, slack, duals, djs):
    return _amplpy_xpress_swig.XPRSgetscaledinfeas(prob, p_nprimalcols, p_nprimalrows, p_ndualrows, p_ndualcols, x, slack, duals, djs)

def XPRSgetunbvec(prob, p_seq):
    return _amplpy_xpress_swig.XPRSgetunbvec(prob, p_seq)

def XPRScrossoverlpsol(prob, p_status):
    return _amplpy_xpress_swig.XPRScrossoverlpsol(prob, p_status)

def XPRStune(prob, flags):
    return _amplpy_xpress_swig.XPRStune(prob, flags)

def XPRStuneprobsetfile(prob, setfile, ifmip, sense):
    return _amplpy_xpress_swig.XPRStuneprobsetfile(prob, setfile, ifmip, sense)

def XPRStunerwritemethod(prob, methodfile):
    return _amplpy_xpress_swig.XPRStunerwritemethod(prob, methodfile)

def XPRStunerreadmethod(prob, methodfile):
    return _amplpy_xpress_swig.XPRStunerreadmethod(prob, methodfile)

def XPRSgetbarnumstability(prob, colstab, rowstab):
    return _amplpy_xpress_swig.XPRSgetbarnumstability(prob, colstab, rowstab)

def XPRSgetpivotorder(prob, pivotorder):
    return _amplpy_xpress_swig.XPRSgetpivotorder(prob, pivotorder)

def XPRSgetpresolvemap(prob, rowmap, colmap):
    return _amplpy_xpress_swig.XPRSgetpresolvemap(prob, rowmap, colmap)

def XPRSbtran(prob, vec):
    return _amplpy_xpress_swig.XPRSbtran(prob, vec)

def XPRSftran(prob, vec):
    return _amplpy_xpress_swig.XPRSftran(prob, vec)

def XPRSsparsebtran(prob, val, ind, p_ncoefs):
    return _amplpy_xpress_swig.XPRSsparsebtran(prob, val, ind, p_ncoefs)

def XPRSsparseftran(prob, val, ind, p_ncoefs):
    return _amplpy_xpress_swig.XPRSsparseftran(prob, val, ind, p_ncoefs)

def XPRSgetobj(prob, objcoef, first, last):
    return _amplpy_xpress_swig.XPRSgetobj(prob, objcoef, first, last)

def XPRSgetobjn(prob, objidx, objcoef, first, last):
    return _amplpy_xpress_swig.XPRSgetobjn(prob, objidx, objcoef, first, last)

def XPRSgetrhs(prob, rhs, first, last):
    return _amplpy_xpress_swig.XPRSgetrhs(prob, rhs, first, last)

def XPRSgetrhsrange(prob, rng, first, last):
    return _amplpy_xpress_swig.XPRSgetrhsrange(prob, rng, first, last)

def XPRSgetlb(prob, lb, first, last):
    return _amplpy_xpress_swig.XPRSgetlb(prob, lb, first, last)

def XPRSgetub(prob, ub, first, last):
    return _amplpy_xpress_swig.XPRSgetub(prob, ub, first, last)

def XPRSgetcols(prob, start, rowind, rowcoef, maxcoefs, p_ncoefs, first, last):
    return _amplpy_xpress_swig.XPRSgetcols(prob, start, rowind, rowcoef, maxcoefs, p_ncoefs, first, last)

def XPRSgetrows(prob, start, colind, colcoef, maxcoefs, p_ncoefs, first, last):
    return _amplpy_xpress_swig.XPRSgetrows(prob, start, colind, colcoef, maxcoefs, p_ncoefs, first, last)

def XPRSgetrowflags(prob, flags, first, last):
    return _amplpy_xpress_swig.XPRSgetrowflags(prob, flags, first, last)

def XPRSclearrowflags(prob, flags, first, last):
    return _amplpy_xpress_swig.XPRSclearrowflags(prob, flags, first, last)

def XPRSgetcoef(prob, row, col, p_coef):
    return _amplpy_xpress_swig.XPRSgetcoef(prob, row, col, p_coef)

def XPRSgetmqobj(prob, start, colind, objqcoef, maxcoefs, p_ncoefs, first, last):
    return _amplpy_xpress_swig.XPRSgetmqobj(prob, start, colind, objqcoef, maxcoefs, p_ncoefs, first, last)

def XPRSwritebasis(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSwritebasis(prob, filename, flags)

def XPRSwritesol(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSwritesol(prob, filename, flags)

def XPRSwritebinsol(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSwritebinsol(prob, filename, flags)

def XPRSwriteprtsol(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSwriteprtsol(prob, filename, flags)

def XPRSwriteslxsol(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSwriteslxsol(prob, filename, flags)

def XPRSgetpresolvesol(prob, x, slack, duals, djs):
    return _amplpy_xpress_swig.XPRSgetpresolvesol(prob, x, slack, duals, djs)

def XPRSgetsolution(prob, status, x, first, last):
    return _amplpy_xpress_swig.XPRSgetsolution(prob, status, x, first, last)

def XPRSgetslacks(prob, status, slacks, first, last):
    return _amplpy_xpress_swig.XPRSgetslacks(prob, status, slacks, first, last)

def XPRSgetduals(prob, status, duals, first, last):
    return _amplpy_xpress_swig.XPRSgetduals(prob, status, duals, first, last)

def XPRSgetredcosts(prob, status, djs, first, last):
    return _amplpy_xpress_swig.XPRSgetredcosts(prob, status, djs, first, last)

def XPRSgetlastbarsol(prob, x, slack, duals, djs, p_status):
    return _amplpy_xpress_swig.XPRSgetlastbarsol(prob, x, slack, duals, djs, p_status)

def XPRSiisclear(prob):
    return _amplpy_xpress_swig.XPRSiisclear(prob)

def XPRSiisfirst(prob, mode, p_status):
    return _amplpy_xpress_swig.XPRSiisfirst(prob, mode, p_status)

def XPRSiisnext(prob, p_status):
    return _amplpy_xpress_swig.XPRSiisnext(prob, p_status)

def XPRSiisstatus(prob, p_niis, nrows, ncols, suminfeas, numinfeas):
    return _amplpy_xpress_swig.XPRSiisstatus(prob, p_niis, nrows, ncols, suminfeas, numinfeas)

def XPRSiisall(prob):
    return _amplpy_xpress_swig.XPRSiisall(prob)

def XPRSiiswrite(prob, iis, filename, filetype, flags):
    return _amplpy_xpress_swig.XPRSiiswrite(prob, iis, filename, filetype, flags)

def XPRSiisisolations(prob, iis):
    return _amplpy_xpress_swig.XPRSiisisolations(prob, iis)

def XPRSgetiisdata(prob, iis, p_nrows, p_ncols, rowind, colind, contype, bndtype, duals, djs, isolationrows, isolationcols):
    return _amplpy_xpress_swig.XPRSgetiisdata(prob, iis, p_nrows, p_ncols, rowind, colind, contype, bndtype, duals, djs, isolationrows, isolationcols)

def XPRSloadpresolvebasis(prob, rowstat, colstat):
    return _amplpy_xpress_swig.XPRSloadpresolvebasis(prob, rowstat, colstat)

def XPRSgetmipentities(prob, p_nentities, p_nsets, coltype, colind, limit, settype, start, setcols, refval):
    return _amplpy_xpress_swig.XPRSgetmipentities(prob, p_nentities, p_nsets, coltype, colind, limit, settype, start, setcols, refval)

def XPRSloadsecurevecs(prob, nrows, ncols, rowind, colind):
    return _amplpy_xpress_swig.XPRSloadsecurevecs(prob, nrows, ncols, rowind, colind)

def XPRSaddrows(prob, nrows, ncoefs, rowtype, rhs, rng, start, colind, rowcoef):
    return _amplpy_xpress_swig.XPRSaddrows(prob, nrows, ncoefs, rowtype, rhs, rng, start, colind, rowcoef)

def XPRSdelrows(prob, nrows, rowind):
    return _amplpy_xpress_swig.XPRSdelrows(prob, nrows, rowind)

def XPRSaddcols(prob, ncols, ncoefs, objcoef, start, rowind, rowcoef, lb, ub):
    return _amplpy_xpress_swig.XPRSaddcols(prob, ncols, ncoefs, objcoef, start, rowind, rowcoef, lb, ub)

def XPRSdelcols(prob, ncols, colind):
    return _amplpy_xpress_swig.XPRSdelcols(prob, ncols, colind)

def XPRSchgcoltype(prob, ncols, colind, coltype):
    return _amplpy_xpress_swig.XPRSchgcoltype(prob, ncols, colind, coltype)

def XPRSloadbasis(prob, rowstat, colstat):
    return _amplpy_xpress_swig.XPRSloadbasis(prob, rowstat, colstat)

def XPRSpostsolve(prob):
    return _amplpy_xpress_swig.XPRSpostsolve(prob)

def XPRSdelsets(prob, nsets, setind):
    return _amplpy_xpress_swig.XPRSdelsets(prob, nsets, setind)

def XPRSaddsets(prob, nsets, nelems, settype, start, colind, refval):
    return _amplpy_xpress_swig.XPRSaddsets(prob, nsets, nelems, settype, start, colind, refval)

def XPRSstrongbranch(prob, nbounds, colind, bndtype, bndval, iterlim, objval, status):
    return _amplpy_xpress_swig.XPRSstrongbranch(prob, nbounds, colind, bndtype, bndval, iterlim, objval, status)

def XPRSestimaterowdualranges(prob, nrows, rowind, iterlim, mindual, maxdual):
    return _amplpy_xpress_swig.XPRSestimaterowdualranges(prob, nrows, rowind, iterlim, mindual, maxdual)

def XPRSsetmessagestatus(prob, msgcode, status):
    return _amplpy_xpress_swig.XPRSsetmessagestatus(prob, msgcode, status)

def XPRSgetmessagestatus(prob, msgcode, p_status):
    return _amplpy_xpress_swig.XPRSgetmessagestatus(prob, msgcode, p_status)

def XPRSchgobjsense(prob, objsense):
    return _amplpy_xpress_swig.XPRSchgobjsense(prob, objsense)

def XPRSchgglblimit(prob, ncols, colind, limit):
    return _amplpy_xpress_swig.XPRSchgglblimit(prob, ncols, colind, limit)

def XPRSsave(prob):
    return _amplpy_xpress_swig.XPRSsave(prob)

def XPRSsaveas(prob, sSaveFileName):
    return _amplpy_xpress_swig.XPRSsaveas(prob, sSaveFileName)

def XPRSrestore(prob, probname, flags):
    return _amplpy_xpress_swig.XPRSrestore(prob, probname, flags)

def XPRSpivot(prob, enter, leave):
    return _amplpy_xpress_swig.XPRSpivot(prob, enter, leave)

def XPRSloadlpsol(prob, x, slack, duals, djs, p_status):
    return _amplpy_xpress_swig.XPRSloadlpsol(prob, x, slack, duals, djs, p_status)

def XPRSlogfilehandler(xprsobj, cbdata, thread, msg, msgtype, msgcode):
    return _amplpy_xpress_swig.XPRSlogfilehandler(xprsobj, cbdata, thread, msg, msgtype, msgcode)

def XPRSrepairweightedinfeas(prob, p_status, lepref, gepref, lbpref, ubpref, phase2, delta, flags):
    return _amplpy_xpress_swig.XPRSrepairweightedinfeas(prob, p_status, lepref, gepref, lbpref, ubpref, phase2, delta, flags)

def XPRSrepairweightedinfeasbounds(prob, p_status, lepref, gepref, lbpref, ubpref, lerelax, gerelax, lbrelax, ubrelax, phase2, delta, flags):
    return _amplpy_xpress_swig.XPRSrepairweightedinfeasbounds(prob, p_status, lepref, gepref, lbpref, ubpref, lerelax, gerelax, lbrelax, ubrelax, phase2, delta, flags)

def XPRSrepairinfeas(prob, p_status, penalty, phase2, flags, lepref, gepref, lbpref, ubpref, delta):
    return _amplpy_xpress_swig.XPRSrepairinfeas(prob, p_status, penalty, phase2, flags, lepref, gepref, lbpref, ubpref, delta)

def XPRSbasisstability(prob, type, norm, scaled, p_value):
    return _amplpy_xpress_swig.XPRSbasisstability(prob, type, norm, scaled, p_value)

def XPRSgetindex(prob, type, name, p_index):
    return _amplpy_xpress_swig.XPRSgetindex(prob, type, name, p_index)

def XPRSgetlasterror(prob, errmsg):
    return _amplpy_xpress_swig.XPRSgetlasterror(prob, errmsg)

def XPRSgetobjecttypename(xprsobj, p_name):
    return _amplpy_xpress_swig.XPRSgetobjecttypename(xprsobj, p_name)

def XPRSgetprimalray(prob, ray, p_hasray):
    return _amplpy_xpress_swig.XPRSgetprimalray(prob, ray, p_hasray)

def XPRSgetdualray(prob, ray, p_hasray):
    return _amplpy_xpress_swig.XPRSgetdualray(prob, ray, p_hasray)

def XPRSstrongbranchcb(prob, nbounds, colind, bndtype, bndval, iterlim, objval, status, callback, data):
    return _amplpy_xpress_swig.XPRSstrongbranchcb(prob, nbounds, colind, bndtype, bndval, iterlim, objval, status, callback, data)

def XPRSloadmipsol(prob, x, p_status):
    return _amplpy_xpress_swig.XPRSloadmipsol(prob, x, p_status)

def XPRSgetbasis(prob, rowstat, colstat):
    return _amplpy_xpress_swig.XPRSgetbasis(prob, rowstat, colstat)

def XPRSgetbasisval(prob, row, col, p_rowstat, p_colstat):
    return _amplpy_xpress_swig.XPRSgetbasisval(prob, row, col, p_rowstat, p_colstat)

def XPRSaddcuts(prob, ncuts, cuttype, rowtype, rhs, start, colind, cutcoef):
    return _amplpy_xpress_swig.XPRSaddcuts(prob, ncuts, cuttype, rowtype, rhs, start, colind, cutcoef)

def XPRSdelcuts(prob, basis, cuttype, interp, delta, ncuts, cutind):
    return _amplpy_xpress_swig.XPRSdelcuts(prob, basis, cuttype, interp, delta, ncuts, cutind)

def XPRSdelcpcuts(prob, cuttype, interp, ncuts, cutind):
    return _amplpy_xpress_swig.XPRSdelcpcuts(prob, cuttype, interp, ncuts, cutind)

def XPRSgetcutlist(prob, cuttype, interp, p_ncuts, maxcuts, cutind):
    return _amplpy_xpress_swig.XPRSgetcutlist(prob, cuttype, interp, p_ncuts, maxcuts, cutind)

def XPRSgetcpcutlist(prob, cuttype, interp, delta, p_ncuts, maxcuts, cutind, viol):
    return _amplpy_xpress_swig.XPRSgetcpcutlist(prob, cuttype, interp, delta, p_ncuts, maxcuts, cutind, viol)

def XPRSgetcpcuts(prob, rowind, ncuts, maxcoefs, cuttype, rowtype, start, colind, cutcoef, rhs):
    return _amplpy_xpress_swig.XPRSgetcpcuts(prob, rowind, ncuts, maxcoefs, cuttype, rowtype, start, colind, cutcoef, rhs)

def XPRSloadcuts(prob, cuttype, interp, ncuts, cutind):
    return _amplpy_xpress_swig.XPRSloadcuts(prob, cuttype, interp, ncuts, cutind)

def XPRSstorecuts(prob, ncuts, nodups, cuttype, rowtype, rhs, start, cutind, colind, cutcoef):
    return _amplpy_xpress_swig.XPRSstorecuts(prob, ncuts, nodups, cuttype, rowtype, rhs, start, cutind, colind, cutcoef)

def XPRSpresolverow(prob, rowtype, norigcoefs, origcolind, origrowcoef, origrhs, maxcoefs, p_ncoefs, colind, rowcoef, p_rhs, p_status):
    return _amplpy_xpress_swig.XPRSpresolverow(prob, rowtype, norigcoefs, origcolind, origrowcoef, origrhs, maxcoefs, p_ncoefs, colind, rowcoef, p_rhs, p_status)

def XPRSpostsolvesol(prob, prex, origx):
    return _amplpy_xpress_swig.XPRSpostsolvesol(prob, prex, origx)

def XPRSgetpivots(prob, enter, outlist, x, p_objval, p_npivots, maxpivots):
    return _amplpy_xpress_swig.XPRSgetpivots(prob, enter, outlist, x, p_objval, p_npivots, maxpivots)

def XPRSwriteprob(prob, filename, flags):
    return _amplpy_xpress_swig.XPRSwriteprob(prob, filename, flags)

def XPRScalcslacks(prob, solution, slacks):
    return _amplpy_xpress_swig.XPRScalcslacks(prob, solution, slacks)

def XPRScalcreducedcosts(prob, duals, solution, djs):
    return _amplpy_xpress_swig.XPRScalcreducedcosts(prob, duals, solution, djs)

def XPRScalcobjective(prob, solution, p_objval):
    return _amplpy_xpress_swig.XPRScalcobjective(prob, solution, p_objval)

def XPRScalcobjn(prob, objidx, solution, p_objval):
    return _amplpy_xpress_swig.XPRScalcobjn(prob, objidx, solution, p_objval)

def XPRScalcsolinfo(prob, solution, duals, property, p_value):
    return _amplpy_xpress_swig.XPRScalcsolinfo(prob, solution, duals, property, p_value)

def XPRSgetrowtype(prob, rowtype, first, last):
    return _amplpy_xpress_swig.XPRSgetrowtype(prob, rowtype, first, last)

def XPRSgetpresolvebasis(prob, rowstat, colstat):
    return _amplpy_xpress_swig.XPRSgetpresolvebasis(prob, rowstat, colstat)

def XPRSgetcoltype(prob, coltype, first, last):
    return _amplpy_xpress_swig.XPRSgetcoltype(prob, coltype, first, last)

def XPRSchgbounds(prob, nbounds, colind, bndtype, bndval):
    return _amplpy_xpress_swig.XPRSchgbounds(prob, nbounds, colind, bndtype, bndval)

def XPRSgetnamelist(prob, type, names, maxbytes, p_nbytes, first, last):
    return _amplpy_xpress_swig.XPRSgetnamelist(prob, type, names, maxbytes, p_nbytes, first, last)

def XPRSaddmipsol(prob, length, solval, colind, name):
    return _amplpy_xpress_swig.XPRSaddmipsol(prob, length, solval, colind, name)

def XPRSgetcutslack(prob, cutind, p_slack):
    return _amplpy_xpress_swig.XPRSgetcutslack(prob, cutind, p_slack)

def XPRSgetcutmap(prob, ncuts, cutind, cutmap):
    return _amplpy_xpress_swig.XPRSgetcutmap(prob, ncuts, cutind, cutmap)

def XPRSgetlpsol(prob, x, slack, duals, djs):
    return _amplpy_xpress_swig.XPRSgetlpsol(prob, x, slack, duals, djs)

def XPRSgetlpsolval(prob, col, row, p_x, p_slack, p_dual, p_dj):
    return _amplpy_xpress_swig.XPRSgetlpsolval(prob, col, row, p_x, p_slack, p_dual, p_dj)

def XPRSgetmipsol(prob, x, slack):
    return _amplpy_xpress_swig.XPRSgetmipsol(prob, x, slack)

def XPRSgetmipsolval(prob, col, row, p_x, p_slack):
    return _amplpy_xpress_swig.XPRSgetmipsolval(prob, col, row, p_x, p_slack)

def XPRSchgobj(prob, ncols, colind, objcoef):
    return _amplpy_xpress_swig.XPRSchgobj(prob, ncols, colind, objcoef)

def XPRSchgcoef(prob, row, col, coef):
    return _amplpy_xpress_swig.XPRSchgcoef(prob, row, col, coef)

def XPRSchgmcoef(prob, ncoefs, rowind, colind, rowcoef):
    return _amplpy_xpress_swig.XPRSchgmcoef(prob, ncoefs, rowind, colind, rowcoef)

def XPRSchgmqobj(prob, ncoefs, objqcol1, objqcol2, objqcoef):
    return _amplpy_xpress_swig.XPRSchgmqobj(prob, ncoefs, objqcol1, objqcol2, objqcoef)

def XPRSchgqobj(prob, objqcol1, objqcol2, objqcoef):
    return _amplpy_xpress_swig.XPRSchgqobj(prob, objqcol1, objqcol2, objqcoef)

def XPRSchgrhs(prob, nrows, rowind, rhs):
    return _amplpy_xpress_swig.XPRSchgrhs(prob, nrows, rowind, rhs)

def XPRSchgrhsrange(prob, nrows, rowind, rng):
    return _amplpy_xpress_swig.XPRSchgrhsrange(prob, nrows, rowind, rng)

def XPRSchgrowtype(prob, nrows, rowind, rowtype):
    return _amplpy_xpress_swig.XPRSchgrowtype(prob, nrows, rowind, rowtype)

def XPRSaddobj(prob, ncols, colind, objcoef, priority, weight):
    return _amplpy_xpress_swig.XPRSaddobj(prob, ncols, colind, objcoef, priority, weight)

def XPRSchgobjn(prob, objidx, ncols, colind, objcoef):
    return _amplpy_xpress_swig.XPRSchgobjn(prob, objidx, ncols, colind, objcoef)

def XPRSdelobj(prob, objidx):
    return _amplpy_xpress_swig.XPRSdelobj(prob, objidx)

def XPRSsetcblplog(prob, lplog, data):
    return _amplpy_xpress_swig.XPRSsetcblplog(prob, lplog, data)

def XPRSgetcblplog(prob, lplog, data):
    return _amplpy_xpress_swig.XPRSgetcblplog(prob, lplog, data)

def XPRSaddcblplog(prob, lplog, data, priority):
    return _amplpy_xpress_swig.XPRSaddcblplog(prob, lplog, data, priority)

def XPRSremovecblplog(prob, lplog, data):
    return _amplpy_xpress_swig.XPRSremovecblplog(prob, lplog, data)

def XPRSsetcbmiplog(prob, miplog, data):
    return _amplpy_xpress_swig.XPRSsetcbmiplog(prob, miplog, data)

def XPRSgetcbmiplog(prob, miplog, data):
    return _amplpy_xpress_swig.XPRSgetcbmiplog(prob, miplog, data)

def XPRSaddcbmiplog(prob, miplog, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbmiplog(prob, miplog, data, priority)

def XPRSremovecbmiplog(prob, miplog, data):
    return _amplpy_xpress_swig.XPRSremovecbmiplog(prob, miplog, data)

def XPRSsetcbcutlog(prob, cutlog, data):
    return _amplpy_xpress_swig.XPRSsetcbcutlog(prob, cutlog, data)

def XPRSgetcbcutlog(prob, cutlog, data):
    return _amplpy_xpress_swig.XPRSgetcbcutlog(prob, cutlog, data)

def XPRSaddcbcutlog(prob, cutlog, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbcutlog(prob, cutlog, data, priority)

def XPRSremovecbcutlog(prob, cutlog, data):
    return _amplpy_xpress_swig.XPRSremovecbcutlog(prob, cutlog, data)

def XPRSsetcbbarlog(prob, barlog, data):
    return _amplpy_xpress_swig.XPRSsetcbbarlog(prob, barlog, data)

def XPRSgetcbbarlog(prob, barlog, data):
    return _amplpy_xpress_swig.XPRSgetcbbarlog(prob, barlog, data)

def XPRSaddcbbarlog(prob, barlog, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbbarlog(prob, barlog, data, priority)

def XPRSremovecbbarlog(prob, barlog, data):
    return _amplpy_xpress_swig.XPRSremovecbbarlog(prob, barlog, data)

def XPRSsetcboptnode(prob, optnode, data):
    return _amplpy_xpress_swig.XPRSsetcboptnode(prob, optnode, data)

def XPRSgetcboptnode(prob, optnode, data):
    return _amplpy_xpress_swig.XPRSgetcboptnode(prob, optnode, data)

def XPRSaddcboptnode(prob, optnode, data, priority):
    return _amplpy_xpress_swig.XPRSaddcboptnode(prob, optnode, data, priority)

def XPRSremovecboptnode(prob, optnode, data):
    return _amplpy_xpress_swig.XPRSremovecboptnode(prob, optnode, data)

def XPRSsetcbprenode(prob, prenode, data):
    return _amplpy_xpress_swig.XPRSsetcbprenode(prob, prenode, data)

def XPRSgetcbprenode(prob, prenode, data):
    return _amplpy_xpress_swig.XPRSgetcbprenode(prob, prenode, data)

def XPRSaddcbprenode(prob, prenode, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbprenode(prob, prenode, data, priority)

def XPRSremovecbprenode(prob, prenode, data):
    return _amplpy_xpress_swig.XPRSremovecbprenode(prob, prenode, data)

def XPRSsetcbinfnode(prob, infnode, data):
    return _amplpy_xpress_swig.XPRSsetcbinfnode(prob, infnode, data)

def XPRSgetcbinfnode(prob, infnode, data):
    return _amplpy_xpress_swig.XPRSgetcbinfnode(prob, infnode, data)

def XPRSaddcbinfnode(prob, infnode, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbinfnode(prob, infnode, data, priority)

def XPRSremovecbinfnode(prob, infnode, data):
    return _amplpy_xpress_swig.XPRSremovecbinfnode(prob, infnode, data)

def XPRSsetcbnodecutoff(prob, nodecutoff, data):
    return _amplpy_xpress_swig.XPRSsetcbnodecutoff(prob, nodecutoff, data)

def XPRSgetcbnodecutoff(prob, nodecutoff, data):
    return _amplpy_xpress_swig.XPRSgetcbnodecutoff(prob, nodecutoff, data)

def XPRSaddcbnodecutoff(prob, nodecutoff, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbnodecutoff(prob, nodecutoff, data, priority)

def XPRSremovecbnodecutoff(prob, nodecutoff, data):
    return _amplpy_xpress_swig.XPRSremovecbnodecutoff(prob, nodecutoff, data)

def XPRSsetcbintsol(prob, intsol, data):
    return _amplpy_xpress_swig.XPRSsetcbintsol(prob, intsol, data)

def XPRSgetcbintsol(prob, intsol, data):
    return _amplpy_xpress_swig.XPRSgetcbintsol(prob, intsol, data)

def XPRSaddcbintsol(prob, intsol, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbintsol(prob, intsol, data, priority)

def XPRSremovecbintsol(prob, intsol, data):
    return _amplpy_xpress_swig.XPRSremovecbintsol(prob, intsol, data)

def XPRSsetcbpreintsol(prob, preintsol, data):
    return _amplpy_xpress_swig.XPRSsetcbpreintsol(prob, preintsol, data)

def XPRSgetcbpreintsol(prob, preintsol, data):
    return _amplpy_xpress_swig.XPRSgetcbpreintsol(prob, preintsol, data)

def XPRSaddcbpreintsol(prob, preintsol, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbpreintsol(prob, preintsol, data, priority)

def XPRSremovecbpreintsol(prob, preintsol, data):
    return _amplpy_xpress_swig.XPRSremovecbpreintsol(prob, preintsol, data)

def XPRSsetcbmessage(prob, message, data):
    return _amplpy_xpress_swig.XPRSsetcbmessage(prob, message, data)

def XPRSgetcbmessage(prob, message, data):
    return _amplpy_xpress_swig.XPRSgetcbmessage(prob, message, data)

def XPRSaddcbmessage(prob, message, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbmessage(prob, message, data, priority)

def XPRSremovecbmessage(prob, message, data):
    return _amplpy_xpress_swig.XPRSremovecbmessage(prob, message, data)

def XPRSsetcbmipthread(prob, mipthread, data):
    return _amplpy_xpress_swig.XPRSsetcbmipthread(prob, mipthread, data)

def XPRSgetcbmipthread(prob, mipthread, data):
    return _amplpy_xpress_swig.XPRSgetcbmipthread(prob, mipthread, data)

def XPRSaddcbmipthread(prob, mipthread, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbmipthread(prob, mipthread, data, priority)

def XPRSremovecbmipthread(prob, mipthread, data):
    return _amplpy_xpress_swig.XPRSremovecbmipthread(prob, mipthread, data)

def XPRSsetcbdestroymt(prob, destroymt, data):
    return _amplpy_xpress_swig.XPRSsetcbdestroymt(prob, destroymt, data)

def XPRSgetcbdestroymt(prob, destroymt, data):
    return _amplpy_xpress_swig.XPRSgetcbdestroymt(prob, destroymt, data)

def XPRSaddcbdestroymt(prob, destroymt, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbdestroymt(prob, destroymt, data, priority)

def XPRSremovecbdestroymt(prob, destroymt, data):
    return _amplpy_xpress_swig.XPRSremovecbdestroymt(prob, destroymt, data)

def XPRSsetcbnewnode(prob, newnode, data):
    return _amplpy_xpress_swig.XPRSsetcbnewnode(prob, newnode, data)

def XPRSgetcbnewnode(prob, newnode, data):
    return _amplpy_xpress_swig.XPRSgetcbnewnode(prob, newnode, data)

def XPRSaddcbnewnode(prob, newnode, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbnewnode(prob, newnode, data, priority)

def XPRSremovecbnewnode(prob, newnode, data):
    return _amplpy_xpress_swig.XPRSremovecbnewnode(prob, newnode, data)

def XPRSsetcbbariteration(prob, bariteration, data):
    return _amplpy_xpress_swig.XPRSsetcbbariteration(prob, bariteration, data)

def XPRSgetcbbariteration(prob, bariteration, data):
    return _amplpy_xpress_swig.XPRSgetcbbariteration(prob, bariteration, data)

def XPRSaddcbbariteration(prob, bariteration, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbbariteration(prob, bariteration, data, priority)

def XPRSremovecbbariteration(prob, bariteration, data):
    return _amplpy_xpress_swig.XPRSremovecbbariteration(prob, bariteration, data)

def XPRSsetcbpresolve(prob, presolve, data):
    return _amplpy_xpress_swig.XPRSsetcbpresolve(prob, presolve, data)

def XPRSgetcbpresolve(prob, presolve, data):
    return _amplpy_xpress_swig.XPRSgetcbpresolve(prob, presolve, data)

def XPRSaddcbpresolve(prob, presolve, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbpresolve(prob, presolve, data, priority)

def XPRSremovecbpresolve(prob, presolve, data):
    return _amplpy_xpress_swig.XPRSremovecbpresolve(prob, presolve, data)

def XPRSsetcbchgbranchobject(prob, chgbranchobject, data):
    return _amplpy_xpress_swig.XPRSsetcbchgbranchobject(prob, chgbranchobject, data)

def XPRSgetcbchgbranchobject(prob, chgbranchobject, data):
    return _amplpy_xpress_swig.XPRSgetcbchgbranchobject(prob, chgbranchobject, data)

def XPRSaddcbchgbranchobject(prob, chgbranchobject, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbchgbranchobject(prob, chgbranchobject, data, priority)

def XPRSremovecbchgbranchobject(prob, chgbranchobject, data):
    return _amplpy_xpress_swig.XPRSremovecbchgbranchobject(prob, chgbranchobject, data)

def XPRSsetcbcomputerestart(prob, computerestart, data):
    return _amplpy_xpress_swig.XPRSsetcbcomputerestart(prob, computerestart, data)

def XPRSgetcbcomputerestart(prob, computerestart, data):
    return _amplpy_xpress_swig.XPRSgetcbcomputerestart(prob, computerestart, data)

def XPRSaddcbcomputerestart(prob, computerestart, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbcomputerestart(prob, computerestart, data, priority)

def XPRSremovecbcomputerestart(prob, computerestart, data):
    return _amplpy_xpress_swig.XPRSremovecbcomputerestart(prob, computerestart, data)

def XPRSsetcbnodelpsolved(prob, nodelpsolved, data):
    return _amplpy_xpress_swig.XPRSsetcbnodelpsolved(prob, nodelpsolved, data)

def XPRSgetcbnodelpsolved(prob, nodelpsolved, data):
    return _amplpy_xpress_swig.XPRSgetcbnodelpsolved(prob, nodelpsolved, data)

def XPRSaddcbnodelpsolved(prob, nodelpsolved, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbnodelpsolved(prob, nodelpsolved, data, priority)

def XPRSremovecbnodelpsolved(prob, nodelpsolved, data):
    return _amplpy_xpress_swig.XPRSremovecbnodelpsolved(prob, nodelpsolved, data)

def XPRSsetcbgapnotify(prob, gapnotify, data):
    return _amplpy_xpress_swig.XPRSsetcbgapnotify(prob, gapnotify, data)

def XPRSgetcbgapnotify(prob, gapnotify, data):
    return _amplpy_xpress_swig.XPRSgetcbgapnotify(prob, gapnotify, data)

def XPRSaddcbgapnotify(prob, gapnotify, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbgapnotify(prob, gapnotify, data, priority)

def XPRSremovecbgapnotify(prob, gapnotify, data):
    return _amplpy_xpress_swig.XPRSremovecbgapnotify(prob, gapnotify, data)

def XPRSsetcbusersolnotify(prob, usersolnotify, data):
    return _amplpy_xpress_swig.XPRSsetcbusersolnotify(prob, usersolnotify, data)

def XPRSgetcbusersolnotify(prob, usersolnotify, data):
    return _amplpy_xpress_swig.XPRSgetcbusersolnotify(prob, usersolnotify, data)

def XPRSaddcbusersolnotify(prob, usersolnotify, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbusersolnotify(prob, usersolnotify, data, priority)

def XPRSremovecbusersolnotify(prob, usersolnotify, data):
    return _amplpy_xpress_swig.XPRSremovecbusersolnotify(prob, usersolnotify, data)

def XPRSsetcbbeforesolve(prob, beforesolve, data):
    return _amplpy_xpress_swig.XPRSsetcbbeforesolve(prob, beforesolve, data)

def XPRSgetcbbeforesolve(prob, beforesolve, data):
    return _amplpy_xpress_swig.XPRSgetcbbeforesolve(prob, beforesolve, data)

def XPRSaddcbbeforesolve(prob, beforesolve, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbbeforesolve(prob, beforesolve, data, priority)

def XPRSremovecbbeforesolve(prob, beforesolve, data):
    return _amplpy_xpress_swig.XPRSremovecbbeforesolve(prob, beforesolve, data)

def XPRSsetcbbeforeobjective(prob, beforeobjective, data):
    return _amplpy_xpress_swig.XPRSsetcbbeforeobjective(prob, beforeobjective, data)

def XPRSgetcbbeforeobjective(prob, beforeobjective, data):
    return _amplpy_xpress_swig.XPRSgetcbbeforeobjective(prob, beforeobjective, data)

def XPRSaddcbbeforeobjective(prob, beforeobjective, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbbeforeobjective(prob, beforeobjective, data, priority)

def XPRSremovecbbeforeobjective(prob, beforeobjective, data):
    return _amplpy_xpress_swig.XPRSremovecbbeforeobjective(prob, beforeobjective, data)

def XPRSsetcbafterobjective(prob, afterobjective, data):
    return _amplpy_xpress_swig.XPRSsetcbafterobjective(prob, afterobjective, data)

def XPRSgetcbafterobjective(prob, afterobjective, data):
    return _amplpy_xpress_swig.XPRSgetcbafterobjective(prob, afterobjective, data)

def XPRSaddcbafterobjective(prob, afterobjective, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbafterobjective(prob, afterobjective, data, priority)

def XPRSremovecbafterobjective(prob, afterobjective, data):
    return _amplpy_xpress_swig.XPRSremovecbafterobjective(prob, afterobjective, data)

def XPRSsetcbchecktime(prob, checktime, data):
    return _amplpy_xpress_swig.XPRSsetcbchecktime(prob, checktime, data)

def XPRSgetcbchecktime(prob, checktime, data):
    return _amplpy_xpress_swig.XPRSgetcbchecktime(prob, checktime, data)

def XPRSaddcbchecktime(prob, checktime, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbchecktime(prob, checktime, data, priority)

def XPRSremovecbchecktime(prob, checktime, data):
    return _amplpy_xpress_swig.XPRSremovecbchecktime(prob, checktime, data)

def XPRSsetcbslpcascadeend(prob, slpcascadeend, data):
    return _amplpy_xpress_swig.XPRSsetcbslpcascadeend(prob, slpcascadeend, data)

def XPRSgetcbslpcascadeend(prob, slpcascadeend, data):
    return _amplpy_xpress_swig.XPRSgetcbslpcascadeend(prob, slpcascadeend, data)

def XPRSaddcbslpcascadeend(prob, slpcascadeend, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpcascadeend(prob, slpcascadeend, data, priority)

def XPRSremovecbslpcascadeend(prob, slpcascadeend, data):
    return _amplpy_xpress_swig.XPRSremovecbslpcascadeend(prob, slpcascadeend, data)

def XPRSsetcbslpcascadestart(prob, slpcascadestart, data):
    return _amplpy_xpress_swig.XPRSsetcbslpcascadestart(prob, slpcascadestart, data)

def XPRSgetcbslpcascadestart(prob, slpcascadestart, data):
    return _amplpy_xpress_swig.XPRSgetcbslpcascadestart(prob, slpcascadestart, data)

def XPRSaddcbslpcascadestart(prob, slpcascadestart, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpcascadestart(prob, slpcascadestart, data, priority)

def XPRSremovecbslpcascadestart(prob, slpcascadestart, data):
    return _amplpy_xpress_swig.XPRSremovecbslpcascadestart(prob, slpcascadestart, data)

def XPRSsetcbslpcascadevar(prob, slpcascadevar, data):
    return _amplpy_xpress_swig.XPRSsetcbslpcascadevar(prob, slpcascadevar, data)

def XPRSgetcbslpcascadevar(prob, slpcascadevar, data):
    return _amplpy_xpress_swig.XPRSgetcbslpcascadevar(prob, slpcascadevar, data)

def XPRSaddcbslpcascadevar(prob, slpcascadevar, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpcascadevar(prob, slpcascadevar, data, priority)

def XPRSremovecbslpcascadevar(prob, slpcascadevar, data):
    return _amplpy_xpress_swig.XPRSremovecbslpcascadevar(prob, slpcascadevar, data)

def XPRSsetcbslpcascadevarfail(prob, slpcascadevarfail, data):
    return _amplpy_xpress_swig.XPRSsetcbslpcascadevarfail(prob, slpcascadevarfail, data)

def XPRSgetcbslpcascadevarfail(prob, slpcascadevarfail, data):
    return _amplpy_xpress_swig.XPRSgetcbslpcascadevarfail(prob, slpcascadevarfail, data)

def XPRSaddcbslpcascadevarfail(prob, slpcascadevarfail, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpcascadevarfail(prob, slpcascadevarfail, data, priority)

def XPRSremovecbslpcascadevarfail(prob, slpcascadevarfail, data):
    return _amplpy_xpress_swig.XPRSremovecbslpcascadevarfail(prob, slpcascadevarfail, data)

def XPRSsetcbslpconstruct(prob, slpconstruct, data):
    return _amplpy_xpress_swig.XPRSsetcbslpconstruct(prob, slpconstruct, data)

def XPRSgetcbslpconstruct(prob, slpconstruct, data):
    return _amplpy_xpress_swig.XPRSgetcbslpconstruct(prob, slpconstruct, data)

def XPRSaddcbslpconstruct(prob, slpconstruct, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpconstruct(prob, slpconstruct, data, priority)

def XPRSremovecbslpconstruct(prob, slpconstruct, data):
    return _amplpy_xpress_swig.XPRSremovecbslpconstruct(prob, slpconstruct, data)

def XPRSsetcbslpintsol(prob, slpintsol, data):
    return _amplpy_xpress_swig.XPRSsetcbslpintsol(prob, slpintsol, data)

def XPRSgetcbslpintsol(prob, slpintsol, data):
    return _amplpy_xpress_swig.XPRSgetcbslpintsol(prob, slpintsol, data)

def XPRSaddcbslpintsol(prob, slpintsol, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpintsol(prob, slpintsol, data, priority)

def XPRSremovecbslpintsol(prob, slpintsol, data):
    return _amplpy_xpress_swig.XPRSremovecbslpintsol(prob, slpintsol, data)

def XPRSsetcbslpiterend(prob, slpiterend, data):
    return _amplpy_xpress_swig.XPRSsetcbslpiterend(prob, slpiterend, data)

def XPRSgetcbslpiterend(prob, slpiterend, data):
    return _amplpy_xpress_swig.XPRSgetcbslpiterend(prob, slpiterend, data)

def XPRSaddcbslpiterend(prob, slpiterend, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpiterend(prob, slpiterend, data, priority)

def XPRSremovecbslpiterend(prob, slpiterend, data):
    return _amplpy_xpress_swig.XPRSremovecbslpiterend(prob, slpiterend, data)

def XPRSsetcbslpiterstart(prob, slpiterstart, data):
    return _amplpy_xpress_swig.XPRSsetcbslpiterstart(prob, slpiterstart, data)

def XPRSgetcbslpiterstart(prob, slpiterstart, data):
    return _amplpy_xpress_swig.XPRSgetcbslpiterstart(prob, slpiterstart, data)

def XPRSaddcbslpiterstart(prob, slpiterstart, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpiterstart(prob, slpiterstart, data, priority)

def XPRSremovecbslpiterstart(prob, slpiterstart, data):
    return _amplpy_xpress_swig.XPRSremovecbslpiterstart(prob, slpiterstart, data)

def XPRSsetcbslpitervar(prob, slpitervar, data):
    return _amplpy_xpress_swig.XPRSsetcbslpitervar(prob, slpitervar, data)

def XPRSgetcbslpitervar(prob, slpitervar, data):
    return _amplpy_xpress_swig.XPRSgetcbslpitervar(prob, slpitervar, data)

def XPRSaddcbslpitervar(prob, slpitervar, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpitervar(prob, slpitervar, data, priority)

def XPRSremovecbslpitervar(prob, slpitervar, data):
    return _amplpy_xpress_swig.XPRSremovecbslpitervar(prob, slpitervar, data)

def XPRSsetcbslpdrcol(prob, slpdrcol, data):
    return _amplpy_xpress_swig.XPRSsetcbslpdrcol(prob, slpdrcol, data)

def XPRSgetcbslpdrcol(prob, slpdrcol, data):
    return _amplpy_xpress_swig.XPRSgetcbslpdrcol(prob, slpdrcol, data)

def XPRSaddcbslpdrcol(prob, slpdrcol, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslpdrcol(prob, slpdrcol, data, priority)

def XPRSremovecbslpdrcol(prob, slpdrcol, data):
    return _amplpy_xpress_swig.XPRSremovecbslpdrcol(prob, slpdrcol, data)

def XPRSsetcbmsjobstart(prob, msjobstart, data):
    return _amplpy_xpress_swig.XPRSsetcbmsjobstart(prob, msjobstart, data)

def XPRSgetcbmsjobstart(prob, msjobstart, data):
    return _amplpy_xpress_swig.XPRSgetcbmsjobstart(prob, msjobstart, data)

def XPRSaddcbmsjobstart(prob, msjobstart, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbmsjobstart(prob, msjobstart, data, priority)

def XPRSremovecbmsjobstart(prob, msjobstart, data):
    return _amplpy_xpress_swig.XPRSremovecbmsjobstart(prob, msjobstart, data)

def XPRSsetcbmsjobend(prob, msjobend, data):
    return _amplpy_xpress_swig.XPRSsetcbmsjobend(prob, msjobend, data)

def XPRSgetcbmsjobend(prob, msjobend, data):
    return _amplpy_xpress_swig.XPRSgetcbmsjobend(prob, msjobend, data)

def XPRSaddcbmsjobend(prob, msjobend, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbmsjobend(prob, msjobend, data, priority)

def XPRSremovecbmsjobend(prob, msjobend, data):
    return _amplpy_xpress_swig.XPRSremovecbmsjobend(prob, msjobend, data)

def XPRSsetcbmswinner(prob, mswinner, data):
    return _amplpy_xpress_swig.XPRSsetcbmswinner(prob, mswinner, data)

def XPRSgetcbmswinner(prob, mswinner, data):
    return _amplpy_xpress_swig.XPRSgetcbmswinner(prob, mswinner, data)

def XPRSaddcbmswinner(prob, mswinner, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbmswinner(prob, mswinner, data, priority)

def XPRSremovecbmswinner(prob, mswinner, data):
    return _amplpy_xpress_swig.XPRSremovecbmswinner(prob, mswinner, data)

def XPRSsetcbnlpcoefevalerror(prob, nlpcoefevalerror, data):
    return _amplpy_xpress_swig.XPRSsetcbnlpcoefevalerror(prob, nlpcoefevalerror, data)

def XPRSgetcbnlpcoefevalerror(prob, nlpcoefevalerror, data):
    return _amplpy_xpress_swig.XPRSgetcbnlpcoefevalerror(prob, nlpcoefevalerror, data)

def XPRSaddcbnlpcoefevalerror(prob, nlpcoefevalerror, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbnlpcoefevalerror(prob, nlpcoefevalerror, data, priority)

def XPRSremovecbnlpcoefevalerror(prob, nlpcoefevalerror, data):
    return _amplpy_xpress_swig.XPRSremovecbnlpcoefevalerror(prob, nlpcoefevalerror, data)

def XPRSsetcbslppreupdatelinearization(prob, slppreupdatelinearization, data):
    return _amplpy_xpress_swig.XPRSsetcbslppreupdatelinearization(prob, slppreupdatelinearization, data)

def XPRSgetcbslppreupdatelinearization(prob, slppreupdatelinearization, data):
    return _amplpy_xpress_swig.XPRSgetcbslppreupdatelinearization(prob, slppreupdatelinearization, data)

def XPRSaddcbslppreupdatelinearization(prob, slppreupdatelinearization, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbslppreupdatelinearization(prob, slppreupdatelinearization, data, priority)

def XPRSremovecbslppreupdatelinearization(prob, slppreupdatelinearization, data):
    return _amplpy_xpress_swig.XPRSremovecbslppreupdatelinearization(prob, slppreupdatelinearization, data)

def XPRSobjsa(prob, ncols, colind, lower, upper):
    return _amplpy_xpress_swig.XPRSobjsa(prob, ncols, colind, lower, upper)

def XPRSbndsa(prob, ncols, colind, lblower, lbupper, ublower, ubupper):
    return _amplpy_xpress_swig.XPRSbndsa(prob, ncols, colind, lblower, lbupper, ublower, ubupper)

def XPRSrhssa(prob, nrows, rowind, lower, upper):
    return _amplpy_xpress_swig.XPRSrhssa(prob, nrows, rowind, lower, upper)

def XPRS_ge_setcbmsghandler(msghandler, data):
    return _amplpy_xpress_swig.XPRS_ge_setcbmsghandler(msghandler, data)

def XPRS_ge_getcbmsghandler(msghandler, data):
    return _amplpy_xpress_swig.XPRS_ge_getcbmsghandler(msghandler, data)

def XPRS_ge_addcbmsghandler(msghandler, data, priority):
    return _amplpy_xpress_swig.XPRS_ge_addcbmsghandler(msghandler, data, priority)

def XPRS_ge_removecbmsghandler(msghandler, data):
    return _amplpy_xpress_swig.XPRS_ge_removecbmsghandler(msghandler, data)

def XPRS_ge_setarchconsistency(consistent):
    return _amplpy_xpress_swig.XPRS_ge_setarchconsistency(consistent)

def XPRS_ge_setsafemode(safemode):
    return _amplpy_xpress_swig.XPRS_ge_setsafemode(safemode)

def XPRS_ge_getsafemode(p_safemode):
    return _amplpy_xpress_swig.XPRS_ge_getsafemode(p_safemode)

def XPRS_ge_setdebugmode(debugmode):
    return _amplpy_xpress_swig.XPRS_ge_setdebugmode(debugmode)

def XPRS_ge_getdebugmode(p_debugmode):
    return _amplpy_xpress_swig.XPRS_ge_getdebugmode(p_debugmode)

def XPRS_ge_getlasterror(p_msgcode, msg, maxbytes, p_nbytes):
    return _amplpy_xpress_swig.XPRS_ge_getlasterror(p_msgcode, msg, maxbytes, p_nbytes)

def XPRS_ge_setcomputeallowed(allow):
    return _amplpy_xpress_swig.XPRS_ge_setcomputeallowed(allow)

def XPRS_ge_getcomputeallowed(p_allow):
    return _amplpy_xpress_swig.XPRS_ge_getcomputeallowed(p_allow)

def XPRS_msp_create(msp):
    return _amplpy_xpress_swig.XPRS_msp_create(msp)

def XPRS_msp_destroy(msp):
    return _amplpy_xpress_swig.XPRS_msp_destroy(msp)

def XPRS_msp_probattach(msp, prob):
    return _amplpy_xpress_swig.XPRS_msp_probattach(msp, prob)

def XPRS_msp_probdetach(msp, prob):
    return _amplpy_xpress_swig.XPRS_msp_probdetach(msp, prob)

def XPRS_msp_getsollist(msp, prob_to_rank_against, iRankAttrib, bRankAscending, iRankFirstIndex_Ob, iRankLastIndex_Ob, iSolutionIds_Zb, nReturnedSolIds, nSols):
    return _amplpy_xpress_swig.XPRS_msp_getsollist(msp, prob_to_rank_against, iRankAttrib, bRankAscending, iRankFirstIndex_Ob, iRankLastIndex_Ob, iSolutionIds_Zb, nReturnedSolIds, nSols)

def XPRS_msp_getsollist2(msp, prob_to_rank_against, iRankAttrib, bRankAscending, iRankFirstIndex_Ob, iRankLastIndex_Ob, bUseUserBitFilter, iUserBitMask, iUserBitPattern, bUseInternalBitFilter, iInternalBitMask, iInternalBitPattern, iSolutionIds_Zb, nReturnedSolIds, nSols):
    return _amplpy_xpress_swig.XPRS_msp_getsollist2(msp, prob_to_rank_against, iRankAttrib, bRankAscending, iRankFirstIndex_Ob, iRankLastIndex_Ob, bUseUserBitFilter, iUserBitMask, iUserBitPattern, bUseInternalBitFilter, iInternalBitMask, iInternalBitPattern, iSolutionIds_Zb, nReturnedSolIds, nSols)

def XPRS_msp_getsol(msp, iSolutionId, iSolutionIdStatus_, x, iColFirst, iColLast, nValuesReturned):
    return _amplpy_xpress_swig.XPRS_msp_getsol(msp, iSolutionId, iSolutionIdStatus_, x, iColFirst, iColLast, nValuesReturned)

def XPRS_msp_getslack(msp, prob_to_rank_against, iSolutionId, iSolutionIdStatus_, slack, iRowFirst, iRowLast, nValuesReturned):
    return _amplpy_xpress_swig.XPRS_msp_getslack(msp, prob_to_rank_against, iSolutionId, iSolutionIdStatus_, slack, iRowFirst, iRowLast, nValuesReturned)

def XPRS_msp_loadsol(msp, iSolutionId, x, nCols, sSolutionName, bNameModifiedForUniqueness, iSolutionIdOfExistingDuplicatePreventedLoad):
    return _amplpy_xpress_swig.XPRS_msp_loadsol(msp, iSolutionId, x, nCols, sSolutionName, bNameModifiedForUniqueness, iSolutionIdOfExistingDuplicatePreventedLoad)

def XPRS_msp_delsol(msp, iSolutionId, iSolutionIdStatus_):
    return _amplpy_xpress_swig.XPRS_msp_delsol(msp, iSolutionId, iSolutionIdStatus_)

def XPRS_msp_getintattribprobsol(msp, prob_to_rank_against, iSolutionId, iSolutionIdStatus_, iAttribId, Dst):
    return _amplpy_xpress_swig.XPRS_msp_getintattribprobsol(msp, prob_to_rank_against, iSolutionId, iSolutionIdStatus_, iAttribId, Dst)

def XPRS_msp_getdblattribprobsol(msp, prob_to_rank_against, iSolutionId, iSolutionIdStatus_, iAttribId, Dst):
    return _amplpy_xpress_swig.XPRS_msp_getdblattribprobsol(msp, prob_to_rank_against, iSolutionId, iSolutionIdStatus_, iAttribId, Dst)

def XPRS_msp_getintattribprob(msp, prob, iAttribId, Dst):
    return _amplpy_xpress_swig.XPRS_msp_getintattribprob(msp, prob, iAttribId, Dst)

def XPRS_msp_getdblattribprob(msp, prob, iAttribId, Dst):
    return _amplpy_xpress_swig.XPRS_msp_getdblattribprob(msp, prob, iAttribId, Dst)

def XPRS_msp_getintattribsol(msp, iSolutionId, iSolutionIdStatus_, iAttribId, Dst):
    return _amplpy_xpress_swig.XPRS_msp_getintattribsol(msp, iSolutionId, iSolutionIdStatus_, iAttribId, Dst)

def XPRS_msp_getdblattribsol(msp, iSolutionId, iSolutionIdStatus_, iAttribId, Dst):
    return _amplpy_xpress_swig.XPRS_msp_getdblattribsol(msp, iSolutionId, iSolutionIdStatus_, iAttribId, Dst)

def XPRS_msp_getintcontrolsol(msp, iSolutionId, iSolutionIdStatus_, iControlId, Val):
    return _amplpy_xpress_swig.XPRS_msp_getintcontrolsol(msp, iSolutionId, iSolutionIdStatus_, iControlId, Val)

def XPRS_msp_getdblcontrolsol(msp, iSolutionId, iSolutionIdStatus_, iControlId, Val):
    return _amplpy_xpress_swig.XPRS_msp_getdblcontrolsol(msp, iSolutionId, iSolutionIdStatus_, iControlId, Val)

def XPRS_msp_setintcontrolsol(msp, iSolutionId, iSolutionIdStatus_, iControlId, Val):
    return _amplpy_xpress_swig.XPRS_msp_setintcontrolsol(msp, iSolutionId, iSolutionIdStatus_, iControlId, Val)

def XPRS_msp_setdblcontrolsol(msp, iSolutionId, iSolutionIdStatus_, iControlId, Val):
    return _amplpy_xpress_swig.XPRS_msp_setdblcontrolsol(msp, iSolutionId, iSolutionIdStatus_, iControlId, Val)

def XPRS_msp_getintattribprobextreme(msp, prob_to_rank_against, bGet_Max_Otherwise_Min, iSolutionId, iAttribId, ExtremeVal):
    return _amplpy_xpress_swig.XPRS_msp_getintattribprobextreme(msp, prob_to_rank_against, bGet_Max_Otherwise_Min, iSolutionId, iAttribId, ExtremeVal)

def XPRS_msp_getdblattribprobextreme(msp, prob_to_rank_against, bGet_Max_Otherwise_Min, iSolutionId, iAttribId, ExtremeVal):
    return _amplpy_xpress_swig.XPRS_msp_getdblattribprobextreme(msp, prob_to_rank_against, bGet_Max_Otherwise_Min, iSolutionId, iAttribId, ExtremeVal)

def XPRS_msp_getintattrib(msp, iAttribId, Val):
    return _amplpy_xpress_swig.XPRS_msp_getintattrib(msp, iAttribId, Val)

def XPRS_msp_getdblattrib(msp, iAttribId, Val):
    return _amplpy_xpress_swig.XPRS_msp_getdblattrib(msp, iAttribId, Val)

def XPRS_msp_getintcontrol(msp, iControlId, Val):
    return _amplpy_xpress_swig.XPRS_msp_getintcontrol(msp, iControlId, Val)

def XPRS_msp_getdblcontrol(msp, iControlId, Val):
    return _amplpy_xpress_swig.XPRS_msp_getdblcontrol(msp, iControlId, Val)

def XPRS_msp_setintcontrol(msp, iControlId, Val):
    return _amplpy_xpress_swig.XPRS_msp_setintcontrol(msp, iControlId, Val)

def XPRS_msp_setdblcontrol(msp, iControlId, Val):
    return _amplpy_xpress_swig.XPRS_msp_setdblcontrol(msp, iControlId, Val)

def XPRS_msp_setsolname(msp, iSolutionId, sNewSolutionBaseName, bNameModifiedForUniqueness, iSolutionIdStatus_):
    return _amplpy_xpress_swig.XPRS_msp_setsolname(msp, iSolutionId, sNewSolutionBaseName, bNameModifiedForUniqueness, iSolutionIdStatus_)

def XPRS_msp_getsolname(msp, iSolutionId, _sname, _iStringBufferBytes, _iBytesInInternalString, iSolutionIdStatus_):
    return _amplpy_xpress_swig.XPRS_msp_getsolname(msp, iSolutionId, _sname, _iStringBufferBytes, _iBytesInInternalString, iSolutionIdStatus_)

def XPRS_msp_findsolbyname(msp, sSolutionName, iSolutionId):
    return _amplpy_xpress_swig.XPRS_msp_findsolbyname(msp, sSolutionName, iSolutionId)

def XPRS_msp_writeslxsol(msp, prob_context, iSolutionId, iSolutionIdStatus_, sFileName, sFlags):
    return _amplpy_xpress_swig.XPRS_msp_writeslxsol(msp, prob_context, iSolutionId, iSolutionIdStatus_, sFileName, sFlags)

def XPRS_msp_readslxsol(msp, col_name_list, sFileName, sFlags, iSolutionId_Beg, iSolutionId_End):
    return _amplpy_xpress_swig.XPRS_msp_readslxsol(msp, col_name_list, sFileName, sFlags, iSolutionId_Beg, iSolutionId_End)

def XPRS_msp_getlasterror(msp, iMsgCode, _msg, _iStringBufferBytes, _iBytesInInternalString):
    return _amplpy_xpress_swig.XPRS_msp_getlasterror(msp, iMsgCode, _msg, _iStringBufferBytes, _iBytesInInternalString)

def XPRS_msp_setcbmsghandler(msp, msghandler, data):
    return _amplpy_xpress_swig.XPRS_msp_setcbmsghandler(msp, msghandler, data)

def XPRS_msp_getcbmsghandler(msp, msghandler, data):
    return _amplpy_xpress_swig.XPRS_msp_getcbmsghandler(msp, msghandler, data)

def XPRS_msp_addcbmsghandler(msp, msghandler, data, priority):
    return _amplpy_xpress_swig.XPRS_msp_addcbmsghandler(msp, msghandler, data, priority)

def XPRS_msp_removecbmsghandler(msp, msghandler, data):
    return _amplpy_xpress_swig.XPRS_msp_removecbmsghandler(msp, msghandler, data)

def XPRSaddqmatrix(prob, row, ncoefs, rowqcol1, rowqcol2, rowqcoef):
    return _amplpy_xpress_swig.XPRSaddqmatrix(prob, row, ncoefs, rowqcol1, rowqcol2, rowqcoef)

def XPRSdelqmatrix(prob, row):
    return _amplpy_xpress_swig.XPRSdelqmatrix(prob, row)

def XPRSloadqcqp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef, nqrows, qrowind, nrowqcoef, rowqcol1, rowqcol2, rowqcoef):
    return _amplpy_xpress_swig.XPRSloadqcqp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef, nqrows, qrowind, nrowqcoef, rowqcol1, rowqcol2, rowqcoef)

def XPRSloadmiqcqp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef, nqrows, qrowind, nrowqcoefs, rowqcol1, rowqcol2, rowqcoef, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval):
    return _amplpy_xpress_swig.XPRSloadmiqcqp(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef, nqrows, qrowind, nrowqcoefs, rowqcol1, rowqcol2, rowqcoef, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval)

def XPRSgetqrowcoeff(prob, row, rowqcol1, rowqcol2, p_rowqcoef):
    return _amplpy_xpress_swig.XPRSgetqrowcoeff(prob, row, rowqcol1, rowqcol2, p_rowqcoef)

def XPRSgetqrowqmatrix(prob, row, start, colind, rowqcoef, maxcoefs, p_ncoefs, first, last):
    return _amplpy_xpress_swig.XPRSgetqrowqmatrix(prob, row, start, colind, rowqcoef, maxcoefs, p_ncoefs, first, last)

def XPRSgetqrowqmatrixtriplets(prob, row, p_ncoefs, rowqcol1, rowqcol2, rowqcoef):
    return _amplpy_xpress_swig.XPRSgetqrowqmatrixtriplets(prob, row, p_ncoefs, rowqcol1, rowqcol2, rowqcoef)

def XPRSchgqrowcoeff(prob, row, rowqcol1, rowqcol2, rowqcoef):
    return _amplpy_xpress_swig.XPRSchgqrowcoeff(prob, row, rowqcol1, rowqcol2, rowqcoef)

def XPRSgetqrows(prob, p_nrows, rowind):
    return _amplpy_xpress_swig.XPRSgetqrows(prob, p_nrows, rowind)

def XPRS_mse_create(mse):
    return _amplpy_xpress_swig.XPRS_mse_create(mse)

def XPRS_mse_destroy(mse):
    return _amplpy_xpress_swig.XPRS_mse_destroy(mse)

def XPRS_mse_minim(mse, prob, msp, f_mse_handler, p, nMaxSols):
    return _amplpy_xpress_swig.XPRS_mse_minim(mse, prob, msp, f_mse_handler, p, nMaxSols)

def XPRS_mse_maxim(mse, prob, msp, f_mse_handler, p, nMaxSols):
    return _amplpy_xpress_swig.XPRS_mse_maxim(mse, prob, msp, f_mse_handler, p, nMaxSols)

def XPRS_mse_opt(mse, prob, msp, f_mse_handler, p, nMaxSols):
    return _amplpy_xpress_swig.XPRS_mse_opt(mse, prob, msp, f_mse_handler, p, nMaxSols)

def XPRS_mse_getsollist(mse, iMetricId, iRankFirstIndex_Ob, iRankLastIndex_Ob, iSolutionIds, nReturnedSolIds, nSols):
    return _amplpy_xpress_swig.XPRS_mse_getsollist(mse, iMetricId, iRankFirstIndex_Ob, iRankLastIndex_Ob, iSolutionIds, nReturnedSolIds, nSols)

def XPRS_mse_getsolmetric(mse, iSolutionId, iSolutionIdStatus, iMetricId, dMetric):
    return _amplpy_xpress_swig.XPRS_mse_getsolmetric(mse, iSolutionId, iSolutionIdStatus, iMetricId, dMetric)

def XPRS_mse_getcullchoice(mse, iMetricId, cull_sol_id_list, nMaxSolsToCull, nSolsToCull, dNewSolMetric, x, nCols, bRejectSoln):
    return _amplpy_xpress_swig.XPRS_mse_getcullchoice(mse, iMetricId, cull_sol_id_list, nMaxSolsToCull, nSolsToCull, dNewSolMetric, x, nCols, bRejectSoln)

def XPRS_mse_getintattrib(mse, iAttribId, Val):
    return _amplpy_xpress_swig.XPRS_mse_getintattrib(mse, iAttribId, Val)

def XPRS_mse_getdblattrib(mse, iAttribId, Val):
    return _amplpy_xpress_swig.XPRS_mse_getdblattrib(mse, iAttribId, Val)

def XPRS_mse_getintcontrol(mse, iAttribId, Val):
    return _amplpy_xpress_swig.XPRS_mse_getintcontrol(mse, iAttribId, Val)

def XPRS_mse_getdblcontrol(mse, iAttribId, Val):
    return _amplpy_xpress_swig.XPRS_mse_getdblcontrol(mse, iAttribId, Val)

def XPRS_mse_setintcontrol(mse, iAttribId, Val):
    return _amplpy_xpress_swig.XPRS_mse_setintcontrol(mse, iAttribId, Val)

def XPRS_mse_setdblcontrol(mse, iAttribId, Val):
    return _amplpy_xpress_swig.XPRS_mse_setdblcontrol(mse, iAttribId, Val)

def XPRS_mse_getlasterror(mse, iMsgCode, _msg, _iStringBufferBytes, _iBytesInInternalString):
    return _amplpy_xpress_swig.XPRS_mse_getlasterror(mse, iMsgCode, _msg, _iStringBufferBytes, _iBytesInInternalString)

def XPRS_mse_setsolbasename(mse, sSolutionBaseName):
    return _amplpy_xpress_swig.XPRS_mse_setsolbasename(mse, sSolutionBaseName)

def XPRS_mse_getsolbasename(mse, _sname, _iStringBufferBytes, _iBytesInInternalString):
    return _amplpy_xpress_swig.XPRS_mse_getsolbasename(mse, _sname, _iStringBufferBytes, _iBytesInInternalString)

def XPRS_mse_setcbgetsolutiondiff(mse, mse_getsolutiondiff, data):
    return _amplpy_xpress_swig.XPRS_mse_setcbgetsolutiondiff(mse, mse_getsolutiondiff, data)

def XPRS_mse_getcbgetsolutiondiff(mse, mse_getsolutiondiff, data):
    return _amplpy_xpress_swig.XPRS_mse_getcbgetsolutiondiff(mse, mse_getsolutiondiff, data)

def XPRS_mse_addcbgetsolutiondiff(mse, mse_getsolutiondiff, data, priority):
    return _amplpy_xpress_swig.XPRS_mse_addcbgetsolutiondiff(mse, mse_getsolutiondiff, data, priority)

def XPRS_mse_removecbgetsolutiondiff(mse, mse_getsolutiondiff, data):
    return _amplpy_xpress_swig.XPRS_mse_removecbgetsolutiondiff(mse, mse_getsolutiondiff, data)

def XPRS_mse_setcbmsghandler(mse, msghandler, data):
    return _amplpy_xpress_swig.XPRS_mse_setcbmsghandler(mse, msghandler, data)

def XPRS_mse_getcbmsghandler(mse, msghandler, data):
    return _amplpy_xpress_swig.XPRS_mse_getcbmsghandler(mse, msghandler, data)

def XPRS_mse_addcbmsghandler(mse, msghandler, data, priority):
    return _amplpy_xpress_swig.XPRS_mse_addcbmsghandler(mse, msghandler, data, priority)

def XPRS_mse_removecbmsghandler(mse, msghandler, data):
    return _amplpy_xpress_swig.XPRS_mse_removecbmsghandler(mse, msghandler, data)

def XPRS_bo_create(p_bo, prob, isoriginal):
    return _amplpy_xpress_swig.XPRS_bo_create(p_bo, prob, isoriginal)

def XPRS_bo_destroy(bo):
    return _amplpy_xpress_swig.XPRS_bo_destroy(bo)

def XPRS_bo_store(bo, p_status):
    return _amplpy_xpress_swig.XPRS_bo_store(bo, p_status)

def XPRS_bo_addbranches(bo, nbranches):
    return _amplpy_xpress_swig.XPRS_bo_addbranches(bo, nbranches)

def XPRS_bo_getbranches(bo, p_nbranches):
    return _amplpy_xpress_swig.XPRS_bo_getbranches(bo, p_nbranches)

def XPRS_bo_setpriority(bo, priority):
    return _amplpy_xpress_swig.XPRS_bo_setpriority(bo, priority)

def XPRS_bo_setpreferredbranch(bo, branch):
    return _amplpy_xpress_swig.XPRS_bo_setpreferredbranch(bo, branch)

def XPRS_bo_addbounds(bo, branch, nbounds, bndtype, colind, bndval):
    return _amplpy_xpress_swig.XPRS_bo_addbounds(bo, branch, nbounds, bndtype, colind, bndval)

def XPRS_bo_getbounds(bo, branch, p_nbounds, maxbounds, bndtype, colind, bndval):
    return _amplpy_xpress_swig.XPRS_bo_getbounds(bo, branch, p_nbounds, maxbounds, bndtype, colind, bndval)

def XPRS_bo_addrows(bo, branch, nrows, ncoefs, rowtype, rhs, start, colind, rowcoef):
    return _amplpy_xpress_swig.XPRS_bo_addrows(bo, branch, nrows, ncoefs, rowtype, rhs, start, colind, rowcoef)

def XPRS_bo_getrows(bo, branch, p_nrows, maxrows, p_ncoefs, maxcoefs, rowtype, rhs, start, colind, rowcoef):
    return _amplpy_xpress_swig.XPRS_bo_getrows(bo, branch, p_nrows, maxrows, p_ncoefs, maxcoefs, rowtype, rhs, start, colind, rowcoef)

def XPRS_bo_addcuts(bo, branch, ncuts, cutind):
    return _amplpy_xpress_swig.XPRS_bo_addcuts(bo, branch, ncuts, cutind)

def XPRS_bo_getid(bo, p_id):
    return _amplpy_xpress_swig.XPRS_bo_getid(bo, p_id)

def XPRS_bo_getlasterror(bo, p_msgcode, msg, maxbytes, p_nbytes):
    return _amplpy_xpress_swig.XPRS_bo_getlasterror(bo, p_msgcode, msg, maxbytes, p_nbytes)

def XPRS_bo_validate(bo, p_status):
    return _amplpy_xpress_swig.XPRS_bo_validate(bo, p_status)

def XPRSmsaddjob(prob, description, ninitial, colind, initial, nintcontrols, intcontrolid, intcontrolval, ndblcontrols, dblcontrolid, dblcontrolval, data):
    return _amplpy_xpress_swig.XPRSmsaddjob(prob, description, ninitial, colind, initial, nintcontrols, intcontrolid, intcontrolval, ndblcontrols, dblcontrolid, dblcontrolval, data)

def XPRSmsaddpreset(prob, description, preset, maxjobs, data):
    return _amplpy_xpress_swig.XPRSmsaddpreset(prob, description, preset, maxjobs, data)

def XPRSmsaddcustompreset(prob, description, preset, maxjobs, ninitial, colind, initial, nintcontrols, intcontrolid, intcontrolval, ndblcontrols, dblcontrolid, dblcontrolval, data):
    return _amplpy_xpress_swig.XPRSmsaddcustompreset(prob, description, preset, maxjobs, ninitial, colind, initial, nintcontrols, intcontrolid, intcontrolval, ndblcontrols, dblcontrolid, dblcontrolval, data)

def XPRSnlpsetfunctionerror(prob):
    return _amplpy_xpress_swig.XPRSnlpsetfunctionerror(prob)

def XPRSnlpprintevalinfo(prob):
    return _amplpy_xpress_swig.XPRSnlpprintevalinfo(prob)

def XPRSnlpvalidate(prob):
    return _amplpy_xpress_swig.XPRSnlpvalidate(prob)

def XPRSnlpoptimize(prob, flags):
    return _amplpy_xpress_swig.XPRSnlpoptimize(prob, flags)

def XPRSgetnlpsol(prob, x, slack, duals, djs):
    return _amplpy_xpress_swig.XPRSgetnlpsol(prob, x, slack, duals, djs)

def XPRSnlpsetcurrentiv(prob):
    return _amplpy_xpress_swig.XPRSnlpsetcurrentiv(prob)

def XPRSnlpvalidaterow(prob, row):
    return _amplpy_xpress_swig.XPRSnlpvalidaterow(prob, row)

def XPRSnlpvalidatekkt(prob, mode, respectbasis, updatemult, violtarget):
    return _amplpy_xpress_swig.XPRSnlpvalidatekkt(prob, mode, respectbasis, updatemult, violtarget)

def XPRSmsclear(prob):
    return _amplpy_xpress_swig.XPRSmsclear(prob)

def XPRSnlpevaluateformula(prob, parsed, type, values, p_value):
    return _amplpy_xpress_swig.XPRSnlpevaluateformula(prob, parsed, type, values, p_value)

def XPRSnlpvalidatevector(prob, solution, p_suminf, p_sumscaledinf, p_objval):
    return _amplpy_xpress_swig.XPRSnlpvalidatevector(prob, solution, p_suminf, p_sumscaledinf, p_objval)

def XPRSnlpadduserfunction(prob, funcname, functype, nin, nout, options, function, data, p_type):
    return _amplpy_xpress_swig.XPRSnlpadduserfunction(prob, funcname, functype, nin, nout, options, function, data, p_type)

def XPRSnlpdeluserfunction(prob, type):
    return _amplpy_xpress_swig.XPRSnlpdeluserfunction(prob, type)

def XPRSnlpimportlibfunc(prob, libname, funcname, p_function, p_status):
    return _amplpy_xpress_swig.XPRSnlpimportlibfunc(prob, libname, funcname, p_function, p_status)

def XPRSnlpaddformulas(prob, ncoefs, rowind, formulastart, parsed, type, value):
    return _amplpy_xpress_swig.XPRSnlpaddformulas(prob, ncoefs, rowind, formulastart, parsed, type, value)

def XPRSnlpchgformulastr(prob, row, formula):
    return _amplpy_xpress_swig.XPRSnlpchgformulastr(prob, row, formula)

def XPRSnlpchgformula(prob, row, parsed, type, value):
    return _amplpy_xpress_swig.XPRSnlpchgformula(prob, row, parsed, type, value)

def XPRSnlpgetformula(prob, row, parsed, maxtypes, p_ntypes, type, value):
    return _amplpy_xpress_swig.XPRSnlpgetformula(prob, row, parsed, maxtypes, p_ntypes, type, value)

def XPRSnlpgetformularows(prob, p_nformulas, rowind):
    return _amplpy_xpress_swig.XPRSnlpgetformularows(prob, p_nformulas, rowind)

def XPRSnlploadformulas(prob, nnlpcoefs, rowind, formulastart, parsed, type, value):
    return _amplpy_xpress_swig.XPRSnlploadformulas(prob, nnlpcoefs, rowind, formulastart, parsed, type, value)

def XPRSnlpdelformulas(prob, nformulas, rowind):
    return _amplpy_xpress_swig.XPRSnlpdelformulas(prob, nformulas, rowind)

def XPRSnlpgetformulastr(prob, row, formula, maxbytes, p_nbytes):
    return _amplpy_xpress_swig.XPRSnlpgetformulastr(prob, row, formula, maxbytes, p_nbytes)

def XPRSnlpsetinitval(prob, nvars, colind, initial):
    return _amplpy_xpress_swig.XPRSnlpsetinitval(prob, nvars, colind, initial)

def XPRSslpgetcoefformula(prob, row, col, p_factor, parsed, maxtypes, p_ntypes, type, value):
    return _amplpy_xpress_swig.XPRSslpgetcoefformula(prob, row, col, p_factor, parsed, maxtypes, p_ntypes, type, value)

def XPRSslpgetcoefs(prob, p_ncoefs, rowind, colind):
    return _amplpy_xpress_swig.XPRSslpgetcoefs(prob, p_ncoefs, rowind, colind)

def XPRSslploadcoefs(prob, ncoefs, rowind, colind, factor, formulastart, parsed, type, coef):
    return _amplpy_xpress_swig.XPRSslploadcoefs(prob, ncoefs, rowind, colind, factor, formulastart, parsed, type, coef)

def XPRSslpdelcoefs(prob, ncoefs, rowind, colind):
    return _amplpy_xpress_swig.XPRSslpdelcoefs(prob, ncoefs, rowind, colind)

def XPRSslpgetcoefstr(prob, row, col, p_factor, formula, maxbytes, p_nbytes):
    return _amplpy_xpress_swig.XPRSslpgetcoefstr(prob, row, col, p_factor, formula, maxbytes, p_nbytes)

def XPRSslpsetdetrow(prob, nvars, colind, rowind):
    return _amplpy_xpress_swig.XPRSslpsetdetrow(prob, nvars, colind, rowind)

def XPRSslpaddcoefs(prob, ncoefs, rowind, colind, factor, formulastart, parsed, type, value):
    return _amplpy_xpress_swig.XPRSslpaddcoefs(prob, ncoefs, rowind, colind, factor, formulastart, parsed, type, value)

def XPRSslpchgcoefstr(prob, row, col, factor, formula):
    return _amplpy_xpress_swig.XPRSslpchgcoefstr(prob, row, col, factor, formula)

def XPRSslpchgcoef(prob, row, col, factor, parsed, type, value):
    return _amplpy_xpress_swig.XPRSslpchgcoef(prob, row, col, factor, parsed, type, value)

def XPRSslpgetcolinfo(prob, type, col, p_info):
    return _amplpy_xpress_swig.XPRSslpgetcolinfo(prob, type, col, p_info)

def XPRSslpgetrowinfo(prob, type, row, p_info):
    return _amplpy_xpress_swig.XPRSslpgetrowinfo(prob, type, row, p_info)

def XPRSslpcascade(prob):
    return _amplpy_xpress_swig.XPRSslpcascade(prob)

def XPRSslpcascadeorder(prob):
    return _amplpy_xpress_swig.XPRSslpcascadeorder(prob)

def XPRSslpchgrowstatus(prob, row, status):
    return _amplpy_xpress_swig.XPRSslpchgrowstatus(prob, row, status)

def XPRSslpchgrowwt(prob, row, weight):
    return _amplpy_xpress_swig.XPRSslpchgrowwt(prob, row, weight)

def XPRSslpchgdeltatype(prob, nvars, varind, deltatypes, values):
    return _amplpy_xpress_swig.XPRSslpchgdeltatype(prob, nvars, varind, deltatypes, values)

def XPRSslpchgcascadenlimit(prob, col, limit):
    return _amplpy_xpress_swig.XPRSslpchgcascadenlimit(prob, col, limit)

def XPRSslpconstruct(prob):
    return _amplpy_xpress_swig.XPRSslpconstruct(prob)

def XPRSslpgetrowstatus(prob, row, p_status):
    return _amplpy_xpress_swig.XPRSslpgetrowstatus(prob, row, p_status)

def XPRSslpgetrowwt(prob, row, p_weight):
    return _amplpy_xpress_swig.XPRSslpgetrowwt(prob, row, p_weight)

def XPRSslpevaluatecoef(prob, row, col, p_value):
    return _amplpy_xpress_swig.XPRSslpevaluatecoef(prob, row, col, p_value)

def XPRSslpreinitialize(prob):
    return _amplpy_xpress_swig.XPRSslpreinitialize(prob)

def XPRSslpunconstruct(prob):
    return _amplpy_xpress_swig.XPRSslpunconstruct(prob)

def XPRSslpupdatelinearization(prob):
    return _amplpy_xpress_swig.XPRSslpupdatelinearization(prob)

def XPRSslpfixpenalties(prob, p_status):
    return _amplpy_xpress_swig.XPRSslpfixpenalties(prob, p_status)

def XPRSnlppostsolve(prob):
    return _amplpy_xpress_swig.XPRSnlppostsolve(prob)

def XPRSnlpcalcslacks(prob, solution, slack):
    return _amplpy_xpress_swig.XPRSnlpcalcslacks(prob, solution, slack)

def XPRSsetcbcutmgr(prob, cutmgr, data):
    return _amplpy_xpress_swig.XPRSsetcbcutmgr(prob, cutmgr, data)

def XPRSgetcbcutmgr(prob, cutmgr, data):
    return _amplpy_xpress_swig.XPRSgetcbcutmgr(prob, cutmgr, data)

def XPRSaddcbcutmgr(prob, cutmgr, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbcutmgr(prob, cutmgr, data, priority)

def XPRSremovecbcutmgr(prob, cutmgr, data):
    return _amplpy_xpress_swig.XPRSremovecbcutmgr(prob, cutmgr, data)

def XPRSsetcbchgnode(prob, chgnode, data):
    return _amplpy_xpress_swig.XPRSsetcbchgnode(prob, chgnode, data)

def XPRSgetcbchgnode(prob, chgnode, data):
    return _amplpy_xpress_swig.XPRSgetcbchgnode(prob, chgnode, data)

def XPRSaddcbchgnode(prob, chgnode, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbchgnode(prob, chgnode, data, priority)

def XPRSremovecbchgnode(prob, chgnode, data):
    return _amplpy_xpress_swig.XPRSremovecbchgnode(prob, chgnode, data)

def XPRSsetcbchgbranch(prob, chgbranch, data):
    return _amplpy_xpress_swig.XPRSsetcbchgbranch(prob, chgbranch, data)

def XPRSgetcbchgbranch(prob, chgbranch, data):
    return _amplpy_xpress_swig.XPRSgetcbchgbranch(prob, chgbranch, data)

def XPRSaddcbchgbranch(prob, chgbranch, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbchgbranch(prob, chgbranch, data, priority)

def XPRSremovecbchgbranch(prob, chgbranch, data):
    return _amplpy_xpress_swig.XPRSremovecbchgbranch(prob, chgbranch, data)

def XPRSsetcbestimate(prob, estimate, data):
    return _amplpy_xpress_swig.XPRSsetcbestimate(prob, estimate, data)

def XPRSgetcbestimate(prob, estimate, data):
    return _amplpy_xpress_swig.XPRSgetcbestimate(prob, estimate, data)

def XPRSaddcbestimate(prob, estimate, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbestimate(prob, estimate, data, priority)

def XPRSremovecbestimate(prob, estimate, data):
    return _amplpy_xpress_swig.XPRSremovecbestimate(prob, estimate, data)

def XPRSsetcbsepnode(prob, sepnode, data):
    return _amplpy_xpress_swig.XPRSsetcbsepnode(prob, sepnode, data)

def XPRSgetcbsepnode(prob, sepnode, data):
    return _amplpy_xpress_swig.XPRSgetcbsepnode(prob, sepnode, data)

def XPRSaddcbsepnode(prob, sepnode, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbsepnode(prob, sepnode, data, priority)

def XPRSremovecbsepnode(prob, sepnode, data):
    return _amplpy_xpress_swig.XPRSremovecbsepnode(prob, sepnode, data)

def XPRSminim(prob, flags):
    return _amplpy_xpress_swig.XPRSminim(prob, flags)

def XPRSmaxim(prob, flags):
    return _amplpy_xpress_swig.XPRSmaxim(prob, flags)

def XPRSbasiscondition(prob, p_cond, p_scaledcond):
    return _amplpy_xpress_swig.XPRSbasiscondition(prob, p_cond, p_scaledcond)

def XPRSrefinemipsol(prob, options, flags, solution, refined, p_status):
    return _amplpy_xpress_swig.XPRSrefinemipsol(prob, options, flags, solution, refined, p_status)

def XPRSgetnamelistobject(prob, type, p_nml):
    return _amplpy_xpress_swig.XPRSgetnamelistobject(prob, type, p_nml)

def XPRS_nml_create(p_nml):
    return _amplpy_xpress_swig.XPRS_nml_create(p_nml)

def XPRS_nml_destroy(nml):
    return _amplpy_xpress_swig.XPRS_nml_destroy(nml)

def XPRS_nml_getnamecount(nml, p_count):
    return _amplpy_xpress_swig.XPRS_nml_getnamecount(nml, p_count)

def XPRS_nml_getmaxnamelen(nml, p_namelen):
    return _amplpy_xpress_swig.XPRS_nml_getmaxnamelen(nml, p_namelen)

def XPRS_nml_getnames(nml, pad, buffer, maxbytes, p_nbytes, first, last):
    return _amplpy_xpress_swig.XPRS_nml_getnames(nml, pad, buffer, maxbytes, p_nbytes, first, last)

def XPRS_nml_addnames(nml, names, first, last):
    return _amplpy_xpress_swig.XPRS_nml_addnames(nml, names, first, last)

def XPRS_nml_removenames(nml, first, last):
    return _amplpy_xpress_swig.XPRS_nml_removenames(nml, first, last)

def XPRS_nml_findname(nml, name, p_index):
    return _amplpy_xpress_swig.XPRS_nml_findname(nml, name, p_index)

def XPRS_nml_copynames(dest, src):
    return _amplpy_xpress_swig.XPRS_nml_copynames(dest, src)

def XPRS_nml_getlasterror(nml, p_msgcode, msg, maxbytes, p_nbytes):
    return _amplpy_xpress_swig.XPRS_nml_getlasterror(nml, p_msgcode, msg, maxbytes, p_nbytes)

def XPRSgetsol(prob, x, slack, duals, djs):
    return _amplpy_xpress_swig.XPRSgetsol(prob, x, slack, duals, djs)

def XPRSstorebounds(prob, nbounds, colind, bndtype, bndval, p_bounds):
    return _amplpy_xpress_swig.XPRSstorebounds(prob, nbounds, colind, bndtype, bndval, p_bounds)

def XPRSsetbranchcuts(prob, ncuts, cutind):
    return _amplpy_xpress_swig.XPRSsetbranchcuts(prob, ncuts, cutind)

def XPRSsetbranchbounds(prob, bounds):
    return _amplpy_xpress_swig.XPRSsetbranchbounds(prob, bounds)

def XPRSgetnames(prob, type, names, first, last):
    return _amplpy_xpress_swig.XPRSgetnames(prob, type, names, first, last)

def XPRSnlpchgformulastring(prob, row, formula):
    return _amplpy_xpress_swig.XPRSnlpchgformulastring(prob, row, formula)

def XPRSnlpgetformulastring(prob, row, formula, maxbytes):
    return _amplpy_xpress_swig.XPRSnlpgetformulastring(prob, row, formula, maxbytes)

def XPRSslpgetccoef(prob, row, col, p_factor, formula, maxbytes):
    return _amplpy_xpress_swig.XPRSslpgetccoef(prob, row, col, p_factor, formula, maxbytes)

def XPRSslpchgccoef(prob, row, col, factor, formula):
    return _amplpy_xpress_swig.XPRSslpchgccoef(prob, row, col, factor, formula)

def XPRSfixglobals(prob, options):
    return _amplpy_xpress_swig.XPRSfixglobals(prob, options)

def XPRSgetglobal(prob, p_nentities, p_nsets, coltype, colind, limit, settype, start, setcols, refval):
    return _amplpy_xpress_swig.XPRSgetglobal(prob, p_nentities, p_nsets, coltype, colind, limit, settype, start, setcols, refval)

def XPRSloadqcqpglobal(prob, probname, ncols, nrows, qrtypes, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, mqcol1, mqcol2, objqcoef, nqrows, qrowind, nrowqcoefs, rowqcol1, rowqcol2, rowqcoef, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval):
    return _amplpy_xpress_swig.XPRSloadqcqpglobal(prob, probname, ncols, nrows, qrtypes, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, mqcol1, mqcol2, objqcoef, nqrows, qrowind, nrowqcoefs, rowqcol1, rowqcol2, rowqcoef, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval)

def XPRSloadqglobal(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval):
    return _amplpy_xpress_swig.XPRSloadqglobal(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nobjqcoefs, objqcol1, objqcol2, objqcoef, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval)

def XPRSloadglobal(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval):
    return _amplpy_xpress_swig.XPRSloadglobal(prob, probname, ncols, nrows, rowtype, rhs, rng, objcoef, start, collen, rowind, rowcoef, lb, ub, nentities, nsets, coltype, entind, limit, settype, setstart, setind, refval)

def XPRSaddcbgloballog(prob, globallog, data, priority):
    return _amplpy_xpress_swig.XPRSaddcbgloballog(prob, globallog, data, priority)

def XPRSremovecbgloballog(prob, globallog, data):
    return _amplpy_xpress_swig.XPRSremovecbgloballog(prob, globallog, data)
class XPRESSCallback(BaseCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def run(self):
        return _amplpy_xpress_swig.XPRESSCallback_run(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_XPRESSCallback

    def getSolutionVector(self):
        return _amplpy_xpress_swig.XPRESSCallback_getSolutionVector(self)

    def getObj(self):
        return _amplpy_xpress_swig.XPRESSCallback_getObj(self)

    def getWhereString(self):
        return _amplpy_xpress_swig.XPRESSCallback_getWhereString(self)

    def getMessage(self):
        return _amplpy_xpress_swig.XPRESSCallback_getMessage(self)

    def getValueImpl(self, v):
        return _amplpy_xpress_swig.XPRESSCallback_getValueImpl(self, v)

    def get(self, what):
        return _amplpy_xpress_swig.XPRESSCallback_get(self, what)

    def getInt(self, what):
        return _amplpy_xpress_swig.XPRESSCallback_getInt(self, what)

    def getDouble(self, what):
        return _amplpy_xpress_swig.XPRESSCallback_getDouble(self, what)

    def getXPRSprob(self):
        return _amplpy_xpress_swig.XPRESSCallback_getXPRSprob(self)

    def setHeuristicSolution(self, nvars, indices, values):
        return _amplpy_xpress_swig.XPRESSCallback_setHeuristicSolution(self, nvars, indices, values)

    def getValueArray(self, v):
        return _amplpy_xpress_swig.XPRESSCallback_getValueArray(self, v)

    def __init__(self):
        if self.__class__ == XPRESSCallback:
            _self = None
        else:
            _self = self
        _amplpy_xpress_swig.XPRESSCallback_swiginit(self, _amplpy_xpress_swig.new_XPRESSCallback(_self, ))
    def __disown__(self):
        self.this.disown()
        _amplpy_xpress_swig.disown_XPRESSCallback(self)
        return weakref.proxy(self)

# Register XPRESSCallback in _amplpy_xpress_swig:
_amplpy_xpress_swig.XPRESSCallback_swigregister(XPRESSCallback)
class XPRESSDrv(SolverDriverXpress):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpy_xpress_swig.delete_XPRESSDrv

    def __init__(self, *args):
        _amplpy_xpress_swig.XPRESSDrv_swiginit(self, _amplpy_xpress_swig.new_XPRESSDrv(*args))

# Register XPRESSDrv in _amplpy_xpress_swig:
_amplpy_xpress_swig.XPRESSDrv_swigregister(XPRESSDrv)
class XPRESSModel(AMPLMPModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _amplpy_xpress_swig.XPRESSModel_swiginit(self, _amplpy_xpress_swig.new_XPRESSModel(*args))

    def driver(self):
        return _amplpy_xpress_swig.XPRESSModel_driver(self)

    def infinity(self):
        return _amplpy_xpress_swig.XPRESSModel_infinity(self)

    def negInfinity(self):
        return _amplpy_xpress_swig.XPRESSModel_negInfinity(self)

    def getStatus(self):
        return _amplpy_xpress_swig.XPRESSModel_getStatus(self)

    def getNumVars(self):
        return _amplpy_xpress_swig.XPRESSModel_getNumVars(self)

    def getNumCons(self):
        return _amplpy_xpress_swig.XPRESSModel_getNumCons(self)

    def getObj(self):
        return _amplpy_xpress_swig.XPRESSModel_getObj(self)

    def getSolution(self, first, length, sol):
        return _amplpy_xpress_swig.XPRESSModel_getSolution(self, first, length, sol)

    def error(self, code):
        return _amplpy_xpress_swig.XPRESSModel_error(self, code)

    def getXPRSprob(self):
        return _amplpy_xpress_swig.XPRESSModel_getXPRSprob(self)

    def optimize(self):
        return _amplpy_xpress_swig.XPRESSModel_optimize(self)

    def getIntAttr(self, what):
        return _amplpy_xpress_swig.XPRESSModel_getIntAttr(self, what)

    def getDoubleAttr(self, what):
        return _amplpy_xpress_swig.XPRESSModel_getDoubleAttr(self, what)

    def isMIP(self):
        return _amplpy_xpress_swig.XPRESSModel_isMIP(self)
    __swig_destroy__ = _amplpy_xpress_swig.delete_XPRESSModel

    def setParam(self, *args):
        return _amplpy_xpress_swig.XPRESSModel_setParam(self, *args)

    def getIntParam(self, XPRSParam):
        return _amplpy_xpress_swig.XPRESSModel_getIntParam(self, XPRSParam)

    def getDoubleParam(self, XPRSParam):
        return _amplpy_xpress_swig.XPRESSModel_getDoubleParam(self, XPRSParam)

    def enableLazyConstraints(self):
        return _amplpy_xpress_swig.XPRESSModel_enableLazyConstraints(self)

    def setAMPLParameter(self, *args):
        return _amplpy_xpress_swig.XPRESSModel_setAMPLParameter(self, *args)

    def getAMPLIntParameter(self, params):
        return _amplpy_xpress_swig.XPRESSModel_getAMPLIntParameter(self, params)

    def getAMPLDoubleParameter(self, params):
        return _amplpy_xpress_swig.XPRESSModel_getAMPLDoubleParameter(self, params)

    def getAMPLIntAttribute(self, attrib):
        return _amplpy_xpress_swig.XPRESSModel_getAMPLIntAttribute(self, attrib)

    def getAMPLDoubleAttribute(self, attrib):
        return _amplpy_xpress_swig.XPRESSModel_getAMPLDoubleAttribute(self, attrib)

    def addConstraintImpl(self, name, numnz, vars, coefficients, sense, rhs):
        return _amplpy_xpress_swig.XPRESSModel_addConstraintImpl(self, name, numnz, vars, coefficients, sense, rhs)
    toXPRESSType = property(_amplpy_xpress_swig.XPRESSModel_toXPRESSType_get)

    def addVariableImpl(self, name, numnz, cons, coefficients, lb, ub, objcoeff, type):
        return _amplpy_xpress_swig.XPRESSModel_addVariableImpl(self, name, numnz, cons, coefficients, lb, ub, objcoeff, type)

    def getConstraintsValueImpl(self, offset, length):
        return _amplpy_xpress_swig.XPRESSModel_getConstraintsValueImpl(self, offset, length)

    def getVarsValueImpl(self, offset, length):
        return _amplpy_xpress_swig.XPRESSModel_getVarsValueImpl(self, offset, length)

    def get_int_attr(self, attr):
        return _amplpy_xpress_swig.XPRESSModel_get_int_attr(self, attr)

    def get_double_attr(self, attr):
        return _amplpy_xpress_swig.XPRESSModel_get_double_attr(self, attr)

    def get_int_param(self, param):
        return _amplpy_xpress_swig.XPRESSModel_get_int_param(self, param)

    def get_double_param(self, param):
        return _amplpy_xpress_swig.XPRESSModel_get_double_param(self, param)

    def set_param(self, *args):
        return _amplpy_xpress_swig.XPRESSModel_set_param(self, *args)

    def get_xprs_prob(self):
        return _amplpy_xpress_swig.XPRESSModel_get_xprs_prob(self)

# Register XPRESSModel in _amplpy_xpress_swig:
_amplpy_xpress_swig.XPRESSModel_swigregister(XPRESSModel)

from enum import Enum
def to_enum(enumclasses : list):
    skip = ['acquire', 'append', 'disown', 'next', 'own', 'this', 'thisown']
    for enumclass in enumclasses:
        env = {name : value for name,value in vars(enumclass).items() 
               if name not in skip and not name.startswith('__')}
        globals()[enumclass.__name__]=Enum(enumclass.__name__, env)

to_enum([Status, SolverAttributes, SolverParams, LPAlgorithms, Where, CanDo, Value, CutDirection])

# clean up the namespace
del to_enum  


def __e_to_v(v):
  if isinstance(v, Enum): return v.value
  return v

def __var_to_v(v):
    if v.type == 0:
        return v.str
    if v.type == 1:
        return v.integer
    if v.type == 2:
        return v.dbl
    raise RuntimeError("Should not happen")


def _do_get_value(self, what):
    v = self._getValue(__e_to_v(what))
    return __var_to_v(v)

def _do_can_do(self, func):
  return self._canDo(__e_to_v(func))

def do_addCut(self, vars, coeffs, direction, rhs):
    return self._addCut(vars, coeffs, __e_to_v(direction), rhs)
def do_addLazy(self, vars, coeffs, direction, rhs):
    return self._addLazy(vars, coeffs, __e_to_v(direction), rhs)
def do_addCutIndices(self, nvars, coeffs, direction, rhs):
    return self._addCutIndices(nvars, coeffs, __e_to_v(direction), rhs)
def do_addLazyIndices(self, nvars, coeffs, direction, rhs):
    return self._addLazyIndices(nvars, coeffs, __e_to_v(direction), rhs)

AMPLModel.get_solution_dict = AMPLModel.getSolutionDict
BaseCallback.get_solution_dict= BaseCallback.getSolutionDict

# Note: do not override getValue, as it is 
# also called from the cpp routines
#BaseCallback._getValue=BaseCallback.getValue
GenericCallback._getValue=GenericCallback.getValue
GenericCallback.getValue=_do_get_value
GenericCallback.get_value=_do_get_value

GenericCallback._canDo=GenericCallback.canDo
GenericCallback.canDo=_do_can_do
GenericCallback.can_do=_do_can_do

GenericCallback._getAMPLWhere=GenericCallback.getAMPLWhere
GenericCallback.get_ampl_where=lambda self : Where(self._getAMPLWhere())
GenericCallback.getAMPLWhere=lambda self : Where(self._getAMPLWhere())

GenericCallback._addLazy=GenericCallback.addLazy
GenericCallback._addCut=GenericCallback.addCut
GenericCallback._addLazyIndices=GenericCallback.addLazyIndices
GenericCallback._addCutIndices=GenericCallback.addCutIndices
GenericCallback.addLazy= do_addLazy
GenericCallback.addCut= do_addCut
GenericCallback.addCutIndices= do_addCutIndices
GenericCallback.addLazyIndices= do_addLazyIndices
GenericCallback.add_lazy= do_addLazy
GenericCallback.add_cut= do_addCut
GenericCallback.add_cut_indices= do_addCutIndices
GenericCallback.add_lazy_indices= do_addLazyIndices

BaseCallback._addLazy=BaseCallback.addLazy
BaseCallback._addCut=BaseCallback.addCut
BaseCallback._addLazyIndices=BaseCallback.addLazyIndices
BaseCallback._addCutIndices=BaseCallback.addCutIndices
BaseCallback.addLazy= do_addLazy
BaseCallback.addCut= do_addCut
BaseCallback.addCutIndices= do_addCutIndices
BaseCallback.addLazyIndices= do_addLazyIndices
BaseCallback.add_lazy= do_addLazy
BaseCallback.add_cut= do_addCut
BaseCallback.add_cut_indices= do_addCutIndices
BaseCallback.add_lazy_indices= do_addLazyIndices

def do_addConstraint(self, vars, coeffs, direction, rhs, name=""):
    return self._addConstraint(vars, coeffs, __e_to_v(direction), rhs, name)

AMPLModel._addConstraint = AMPLModel.addConstraint
AMPLModel.addConstraint = do_addConstraint
AMPLModel.add_constraint = do_addConstraint

# The following are used in common-python-overrides.i
def __get_ampl_parameter(self, param):
    if param.name.startswith('DBL'):
        return self.getAMPLDoubleParameter(__e_to_v(param))
    v = self.getAMPLIntParameter(__e_to_v(param))
    if param == SolverParams.INT_LP_Algorithm:
        return LPAlgorithms(v)
    return v

def __get_ampl_attribute(self, param):
    if param.name.startswith('DBL'):
        return self.getAMPLDoubleAttribute(__e_to_v(param))
    return self.getAMPLIntAttribute(__e_to_v(param))

def __setAMPLParameter(self, what, value):
    self._setAMPLParameter(__e_to_v(what.value), value)




# The functions are defined in common-python-overrides.i
# Call update_common.sh to update them in all solvers

AMPLModel._getStatus=AMPLModel.getStatus
AMPLModel.getStatus=lambda self : Status(self._getStatus())
AMPLModel.get_status=lambda self : Status(self._getStatus())

AMPLModel._setAMPLParameter=AMPLModel.setAMPLParameter
AMPLModel.set_ampl_parameter=__setAMPLParameter
AMPLModel.setAMPLParameter=__setAMPLParameter

AMPLModel.getAMPLParameter=__get_ampl_parameter
AMPLModel.get_ampl_parameter=__get_ampl_parameter

AMPLModel.get_ampl_attribute=__get_ampl_attribute
AMPLModel.getAMPLAttribute=__get_ampl_attribute

BaseCallback._canDo=BaseCallback.canDo
BaseCallback.canDo=_do_can_do
BaseCallback.can_do=_do_can_do

BaseCallback._getAMPLWhere=BaseCallback.getAMPLWhere
BaseCallback.get_ampl_where=lambda self : Where(self._getAMPLWhere())
BaseCallback.getAMPLWhere=lambda self : Where(self._getAMPLWhere())



# The functions are defined in common-python-overrides.i
# Call update_common.sh to update them in all solvers

XPRESSModel._getStatus=XPRESSModel.getStatus
XPRESSModel.getStatus=lambda self : Status(self._getStatus())
XPRESSModel.get_status=lambda self : Status(self._getStatus())

XPRESSModel._setAMPLParameter=XPRESSModel.setAMPLParameter
XPRESSModel.set_ampl_parameter=__setAMPLParameter
XPRESSModel.setAMPLParameter=__setAMPLParameter

XPRESSModel.getAMPLParameter=__get_ampl_parameter
XPRESSModel.get_ampl_parameter=__get_ampl_parameter

XPRESSModel.get_ampl_attribute=__get_ampl_attribute
XPRESSModel.getAMPLAttribute=__get_ampl_attribute

XPRESSCallback._canDo=XPRESSCallback.canDo
XPRESSCallback.canDo=_do_can_do
XPRESSCallback.can_do=_do_can_do

XPRESSCallback._getAMPLWhere=XPRESSCallback.getAMPLWhere
XPRESSCallback.get_ampl_where=lambda self : Where(self._getAMPLWhere())
XPRESSCallback.getAMPLWhere=lambda self : Where(self._getAMPLWhere())


