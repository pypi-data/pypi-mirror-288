from . import (
    core as core,
    error_handling as error_handling,
    support as support,
    utils as utils
)


class PyAttributeObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyAttributeObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyBasicBlockObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyBasicBlockObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyBuilderObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyBuilderObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyContextObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyContextObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyDiagnosticInfoObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyDiagnosticInfoObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyIntrinsicObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyIntrinsicObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyMemoryBufferObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyMemoryBufferObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyMetadataEntriesObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyMetadataEntriesObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyMetadataObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyMetadataObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyModuleFlagEntriesObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyModuleFlagEntriesObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyModuleObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyModuleObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyModuleProviderObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyModuleProviderObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyNamedMDNodeObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyNamedMDNodeObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyOperandBundleObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyOperandBundleObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyPassManagerBaseObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyPassManagerBaseObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyTypeObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyTypeObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyUseObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyUseObject, /) -> bool: ...

    def __hash__(self) -> int: ...

class PyValueObject:
    """The base class."""

    def __bool__(self) -> bool: ...

    def __eq__(self, arg: PyValueObject, /) -> bool: ...

    def __hash__(self) -> int: ...
