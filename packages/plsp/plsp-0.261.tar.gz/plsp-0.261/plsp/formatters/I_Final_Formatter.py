from .Logging_Segment_Generator import _new_segment_from_str_and_head, Logging_Segment

from abc import ABC as __abc_X_ABC
from abc import abstractmethod as _abc_X_abstractmethod

import base64 as _base64







class I_Final_Formatter(__abc_X_ABC):



	"""
	The point of a final formatter is take each piece generated by
	the formatters and combine them into a single string.
	"""



	@staticmethod
	def _handle(inst, segments_string:str, non_segments_string:"str") -> str:
		results = []
		head = 0
		while head < len(segments_string):
			head, result = _new_segment_from_str_and_head(segments_string, head)
			results.append(result)
		reordered = inst.impl_handle(results, non_segments_string)
		ret_str = ""
		for r in reordered:
			ret_str += r.s
		return ret_str



	@_abc_X_abstractmethod
	def impl_handle(self, results:"list[Logging_Segment]", non_segments_string:"str") -> list[Logging_Segment]:
		pass







